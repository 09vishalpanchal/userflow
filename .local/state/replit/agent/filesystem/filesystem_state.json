{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ServiceConnect Platform\n\n## Overview\n\nServiceConnect is a web-based marketplace platform that connects customers with local service providers. The system enables customers to find and book various services (cleaning, repairs, beauty, tech support, etc.) while allowing service providers to list their services and manage their business through the platform. The application features a dual-sided marketplace with distinct user experiences for customers, service providers, and administrators.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Routing**: Wouter for client-side routing\n- **Styling**: Tailwind CSS with shadcn/ui component library\n- **State Management**: TanStack React Query for server state management\n- **Build Tool**: Vite for development and bundling\n- **Component System**: Radix UI primitives with custom styling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Development**: Hot module replacement via Vite integration\n- **Error Handling**: Centralized error middleware with status code mapping\n\n### Database Layer\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **Schema Management**: Drizzle migrations with shared schema definitions\n- **Connection**: Connection pooling via @neondatabase/serverless\n\n### Authentication & Authorization\n- **Authentication Method**: Phone number + OTP verification\n- **User Types**: Customer, Provider, Admin with role-based access\n- **Session Management**: Express sessions with PostgreSQL storage\n- **OTP System**: Time-limited verification codes with expiration tracking\n\n### Data Models\n- **Users**: Core user entity with phone verification and user type classification\n- **Profiles**: Separate customer and provider profiles with location data\n- **Jobs**: Service request system with status tracking\n- **Wallet System**: Credit-based payment system for unlocking job details\n- **Transactions**: Financial transaction logging for wallet operations\n\n### File Structure\n- **Monorepo Structure**: Client, server, and shared code in single repository\n- **Shared Types**: Common TypeScript definitions and database schema\n- **Asset Management**: Centralized asset handling with Vite aliases\n- **Configuration**: Unified TypeScript configuration across all packages\n\n## External Dependencies\n\n### Core Technologies\n- **React Ecosystem**: React, React DOM, React Query for frontend\n- **UI Components**: Radix UI primitives for accessible components\n- **Database**: Neon PostgreSQL with Drizzle ORM\n- **Validation**: Zod for runtime type validation and schema generation\n\n### Development Tools\n- **Build System**: Vite with React plugin and error overlay\n- **Styling**: Tailwind CSS with PostCSS processing\n- **TypeScript**: Full TypeScript support with strict configuration\n- **Code Quality**: ESLint integration via Vite plugins\n\n### Production Services\n- **Database Hosting**: Neon serverless PostgreSQL\n- **SMS Gateway**: SMS service integration for OTP delivery (implementation pending)\n- **File Storage**: Local asset serving with production CDN capability\n- **Session Storage**: PostgreSQL-backed session management\n\n### Utility Libraries\n- **Date Handling**: date-fns for date manipulation\n- **Styling Utilities**: clsx and tailwind-merge for conditional styling\n- **Icons**: Lucide React for consistent iconography\n- **Forms**: React Hook Form with Zod resolvers for form validation","size_bytes":3655},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeInUp: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeInUp 0.6s ease forwards\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3042},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertOtpSchema, insertCustomerProfileSchema, insertProviderProfileSchema, insertJobSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { phoneNumber, userType } = z.object({\n        phoneNumber: z.string(),\n        userType: z.enum(['customer', 'provider'])\n      }).parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByPhone(phoneNumber);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this phone number\" });\n      }\n\n      // Generate OTP (6 digits)\n      const code = Math.floor(100000 + Math.random() * 900000).toString();\n      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n\n      await storage.createOtp({\n        phoneNumber,\n        code,\n        expiresAt,\n        isUsed: false\n      });\n\n      // In production, send SMS with OTP code\n      console.log(`OTP for ${phoneNumber}: ${code}`);\n      \n      res.json({ \n        message: \"OTP sent successfully\",\n        // In development, return the code for testing\n        ...(process.env.NODE_ENV === 'development' && { code })\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify-otp\", async (req, res) => {\n    try {\n      const { phoneNumber, code, userType } = z.object({\n        phoneNumber: z.string(),\n        code: z.string(),\n        userType: z.enum(['customer', 'provider'])\n      }).parse(req.body);\n\n      const otp = await storage.getValidOtp(phoneNumber, code);\n      if (!otp) {\n        return res.status(400).json({ message: \"Invalid or expired OTP\" });\n      }\n\n      await storage.markOtpAsUsed(otp.id);\n\n      // Create user - auto-approve customers, providers need admin approval\n      const user = await storage.createUser({\n        phoneNumber,\n        userType,\n        isVerified: true,\n        isApproved: userType === 'customer' // Auto-approve customers, providers need approval\n      });\n\n      // Create wallet for providers\n      if (userType === 'provider') {\n        await storage.createWallet({\n          providerId: user.id,\n          balance: '0'\n        });\n      }\n\n      const message = userType === 'customer' \n        ? \"Phone verified successfully. Please complete your profile.\"\n        : \"Phone verified successfully. Your account is pending admin approval.\";\n        \n      res.json({ \n        message,\n        user: {\n          id: user.id,\n          phoneNumber: user.phoneNumber,\n          userType: user.userType,\n          isVerified: user.isVerified,\n          isApproved: user.isApproved\n        }\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { phoneNumber } = z.object({\n        phoneNumber: z.string()\n      }).parse(req.body);\n\n      const user = await storage.getUserByPhone(phoneNumber);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.isBlocked) {\n        return res.status(403).json({ message: \"Account is blocked\" });\n      }\n\n      if (!user.isApproved && user.userType === 'provider') {\n        return res.status(403).json({ message: \"Account is pending admin approval\" });\n      }\n\n      // Generate OTP for login\n      const code = Math.floor(100000 + Math.random() * 900000).toString();\n      const expiresAt = new Date(Date.now() + 10 * 60 * 1000);\n\n      await storage.createOtp({\n        phoneNumber,\n        code,\n        expiresAt,\n        isUsed: false\n      });\n\n      console.log(`Login OTP for ${phoneNumber}: ${code}`);\n      \n      res.json({ \n        message: \"OTP sent successfully\",\n        ...(process.env.NODE_ENV === 'development' && { code })\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login-verify\", async (req, res) => {\n    try {\n      const { phoneNumber, code } = z.object({\n        phoneNumber: z.string(),\n        code: z.string()\n      }).parse(req.body);\n\n      const otp = await storage.getValidOtp(phoneNumber, code);\n      if (!otp) {\n        return res.status(400).json({ message: \"Invalid or expired OTP\" });\n      }\n\n      const user = await storage.getUserByPhone(phoneNumber);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (!user.isApproved && user.userType === 'provider') {\n        return res.status(403).json({ message: \"Account is pending admin approval\" });\n      }\n\n      await storage.markOtpAsUsed(otp.id);\n\n      res.json({ \n        message: \"Login successful\",\n        user: {\n          id: user.id,\n          phoneNumber: user.phoneNumber,\n          name: user.name,\n          email: user.email,\n          userType: user.userType,\n          isVerified: user.isVerified,\n          isApproved: user.isApproved\n        }\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  // Profile routes\n  app.post(\"/api/profiles/customer\", async (req, res) => {\n    try {\n      const profileData = insertCustomerProfileSchema.parse(req.body);\n      const profile = await storage.createCustomerProfile(profileData);\n      \n      // Update user with name and email\n      await storage.updateUser(profileData.userId, {\n        name: req.body.name,\n        email: req.body.email\n      });\n\n      res.json({ profile });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid profile data\" });\n    }\n  });\n\n  app.post(\"/api/profiles/provider\", async (req, res) => {\n    try {\n      const profileData = insertProviderProfileSchema.parse(req.body);\n      const profile = await storage.createProviderProfile(profileData);\n      \n      // Update user with name and email\n      await storage.updateUser(profileData.userId, {\n        name: req.body.name,\n        email: req.body.email\n      });\n\n      res.json({ profile });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid profile data\" });\n    }\n  });\n\n  app.get(\"/api/profiles/customer/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.getCustomerProfile(req.params.userId);\n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      res.json({ profile });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/profiles/provider/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.getProviderProfile(req.params.userId);\n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      res.json({ profile });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Job routes\n  app.post(\"/api/jobs\", async (req, res) => {\n    try {\n      console.log(\"Raw job data received:\", req.body);\n      const jobData = insertJobSchema.parse(req.body);\n      console.log(\"Parsed job data:\", jobData);\n      const job = await storage.createJob(jobData);\n      \n      // TODO: Send notifications to nearby providers\n      \n      res.json({ job });\n    } catch (error) {\n      console.error(\"Job creation error:\", error);\n      if (error instanceof z.ZodError) {\n        console.error(\"Validation errors:\", error.errors);\n        res.status(400).json({ \n          message: \"Invalid job data\", \n          errors: error.errors \n        });\n      } else {\n        res.status(400).json({ message: \"Invalid job data\" });\n      }\n    }\n  });\n\n  // Categories API\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = [\n        \"Home Cleaning\",\n        \"Plumbing\",\n        \"Electrical Work\", \n        \"Carpentry\",\n        \"Painting\",\n        \"HVAC\",\n        \"Appliance Repair\",\n        \"Gardening\",\n        \"Beauty & Spa\",\n        \"Auto Services\",\n        \"Tech Support\",\n        \"Tutoring\",\n        \"Pet Care\",\n        \"Moving Services\",\n        \"Photography\",\n        \"Catering\",\n        \"Event Planning\",\n        \"Interior Design\"\n      ];\n      res.json({ categories });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Browse Jobs API\n  app.get(\"/api/jobs/browse\", async (req, res) => {\n    try {\n      const { category, city, radius, search } = req.query;\n      const jobs = await storage.getAllJobs(); // Get all jobs from database\n      \n      // Filter jobs based on query parameters\n      let filteredJobs = jobs.filter(job => job.status === 'open');\n      \n      if (category && category !== 'All Categories') {\n        filteredJobs = filteredJobs.filter(job => job.category === category);\n      }\n      \n      if (search) {\n        const searchLower = (search as string).toLowerCase();\n        filteredJobs = filteredJobs.filter(job => \n          job.title.toLowerCase().includes(searchLower) ||\n          job.description.toLowerCase().includes(searchLower)\n        );\n      }\n\n      res.json({ jobs: filteredJobs });\n    } catch (error) {\n      console.error(\"Browse jobs error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Recent Jobs API for homepage\n  app.get(\"/api/jobs/recent\", async (req, res) => {\n    try {\n      const jobs = await storage.getAllJobs();\n      const recentJobs = jobs\n        .filter(job => job.status === 'open')\n        .sort((a, b) => {\n          const dateB = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n          const dateA = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n          return dateA - dateB;\n        })\n        .slice(0, 3); // Get 3 most recent jobs\n      \n      res.json({ jobs: recentJobs });\n    } catch (error) {\n      console.error(\"Recent jobs error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Individual Job Details API\n  app.get(\"/api/job/:jobId\", async (req, res) => {\n    try {\n      const { jobId } = req.params;\n      const job = await storage.getJob(jobId);\n      \n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      // Get customer info for the job\n      const customer = await storage.getUser(job.customerId);\n      \n      const jobWithCustomer = {\n        ...job,\n        customer: {\n          name: customer?.name || \"Anonymous\",\n          rating: 4.8, // Could be calculated from reviews\n          totalJobs: 15 // Could be counted from database\n        }\n      };\n\n      res.json({ job: jobWithCustomer });\n    } catch (error) {\n      console.error(\"Job details error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/jobs/near\", async (req, res) => {\n    try {\n      const { latitude, longitude, radius = 5 } = z.object({\n        latitude: z.string().transform(Number),\n        longitude: z.string().transform(Number),\n        radius: z.string().transform(Number).optional()\n      }).parse(req.query);\n\n      const jobs = await storage.getJobsNearLocation(latitude, longitude, radius);\n      res.json({ jobs });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid location parameters\" });\n    }\n  });\n\n  app.get(\"/api/jobs/customer/:customerId\", async (req, res) => {\n    try {\n      const jobs = await storage.getCustomerJobs(req.params.customerId);\n      res.json({ jobs });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/jobs/:jobId/unlock\", async (req, res) => {\n    try {\n      const { providerId } = z.object({\n        providerId: z.string()\n      }).parse(req.body);\n\n      const job = await storage.getJob(req.params.jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      if ((job.unlockCount || 0) >= (job.maxUnlocks || 3)) {\n        return res.status(400).json({ message: \"Maximum unlocks reached for this job\" });\n      }\n\n      // Check if provider already unlocked this job\n      const hasUnlocked = await storage.hasProviderUnlockedJob(req.params.jobId, providerId);\n      if (hasUnlocked) {\n        return res.status(400).json({ message: \"You have already unlocked this job\" });\n      }\n\n      // Check wallet balance\n      const wallet = await storage.getWallet(providerId);\n      if (!wallet) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n\n      const unlockPrice = 100; // ₹100 per unlock\n      if (parseFloat(wallet.balance || '0') < unlockPrice) {\n        return res.status(400).json({ message: \"Insufficient wallet balance\" });\n      }\n\n      // Deduct from wallet\n      const newBalance = (parseFloat(wallet.balance || '0') - unlockPrice).toString();\n      await storage.updateWalletBalance(providerId, newBalance);\n\n      // Create transaction record\n      await storage.createTransaction({\n        walletId: wallet.id,\n        type: 'unlock',\n        amount: unlockPrice.toString(),\n        jobId: req.params.jobId,\n        description: `Unlocked job: ${job.title}`\n      });\n\n      // Create unlock record\n      await storage.createJobUnlock({\n        jobId: req.params.jobId,\n        providerId\n      });\n\n      // Increment unlock count\n      await storage.incrementJobUnlockCount(req.params.jobId);\n\n      // Get customer details for contact\n      const customer = await storage.getUser(job.customerId);\n      \n      res.json({ \n        message: \"Job unlocked successfully\",\n        customerContact: {\n          name: customer?.name,\n          phoneNumber: customer?.phoneNumber\n        }\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  // Wallet routes\n  app.get(\"/api/wallet/:providerId\", async (req, res) => {\n    try {\n      const wallet = await storage.getWallet(req.params.providerId);\n      if (!wallet) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n\n      const transactions = await storage.getWalletTransactions(wallet.id);\n      \n      res.json({ \n        wallet,\n        transactions \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/wallet/:providerId/recharge\", async (req, res) => {\n    try {\n      const { amount } = z.object({\n        amount: z.number().positive()\n      }).parse(req.body);\n\n      const wallet = await storage.getWallet(req.params.providerId);\n      if (!wallet) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n\n      const newBalance = (parseFloat(wallet.balance || '0') + amount).toString();\n      await storage.updateWalletBalance(req.params.providerId, newBalance);\n\n      // Create transaction record\n      await storage.createTransaction({\n        walletId: wallet.id,\n        type: 'recharge',\n        amount: amount.toString(),\n        description: `Wallet recharge of ₹${amount}`\n      });\n\n      res.json({ \n        message: \"Wallet recharged successfully\",\n        newBalance \n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid recharge amount\" });\n    }\n  });\n\n  // Profile completion routes\n  app.post(\"/api/profile/customer/complete\", async (req, res) => {\n    try {\n      const { userId, ...profileData } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n      \n      const user = await storage.completeCustomerProfile(userId, profileData);\n      \n      res.json({ \n        message: \"Customer profile completed successfully\",\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          profileCompleted: user.profileCompleted\n        }\n      });\n    } catch (error) {\n      console.error(\"Customer profile completion error:\", error);\n      res.status(500).json({ message: \"Failed to complete profile\" });\n    }\n  });\n\n  app.post(\"/api/profile/provider/complete\", async (req, res) => {\n    try {\n      // Handle both JSON and FormData formats\n      let userId, profileData;\n      \n      if (req.headers['content-type'] && req.headers['content-type'].includes('application/json')) {\n        // JSON format\n        ({ userId, profileData } = req.body);\n      } else {\n        // FormData format\n        userId = req.body.userId;\n        profileData = req.body.profileData;\n      }\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n      \n      // Parse profile data if it's a string (from multipart/form-data)\n      const parsedProfileData = typeof profileData === 'string' ? JSON.parse(profileData) : profileData;\n      \n      const user = await storage.completeProviderProfile(userId, parsedProfileData);\n      \n      res.json({ \n        message: \"Provider profile submitted for approval\",\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          profileCompleted: user.profileCompleted\n        }\n      });\n    } catch (error) {\n      console.error(\"Provider profile completion error:\", error);\n      res.status(500).json({ message: \"Failed to complete profile\" });\n    }\n  });\n\n  // Enhanced Admin routes\n  app.get(\"/api/admin/dashboard\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json({ stats });\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/actions/recent\", async (req, res) => {\n    try {\n      const actions = await storage.getRecentAdminActions();\n      res.json({ actions });\n    } catch (error) {\n      console.error(\"Recent actions error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/providers/pending\", async (req, res) => {\n    try {\n      const providers = await storage.getPendingProviders();\n      res.json({ providers });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      \n      // Fetch wallet information for providers\n      const usersWithWallets = await Promise.all(\n        users.map(async (user) => {\n          if (user.userType === 'provider') {\n            const wallet = await storage.getWallet(user.id);\n            return {\n              ...user,\n              walletBalance: wallet?.balance || '0.00'\n            };\n          }\n          return user;\n        })\n      );\n      \n      res.json({ users: usersWithWallets });\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get pending users for approval\n  app.get(\"/api/admin/users/pending\", async (req, res) => {\n    try {\n      const pendingUsers = await storage.getPendingUsers();\n      res.json({ users: pendingUsers });\n    } catch (error) {\n      console.error(\"Get pending users error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Approve user\n  app.post(\"/api/admin/users/:userId/approve\", async (req, res) => {\n    try {\n      const { adminId } = req.body;\n      await storage.approveUser(req.params.userId);\n      \n      if (adminId) {\n        await storage.createAdminActionLog(adminId, \"Approved user\", req.params.userId, 'user', 'User account approved');\n        // Send approval notification\n        await storage.sendNotification(\n          req.params.userId,\n          \"Account Approved\",\n          \"Your account has been approved! You can now access all features.\",\n          \"approval\"\n        );\n      }\n      \n      res.json({ message: \"User approved successfully\" });\n    } catch (error) {\n      console.error(\"Approve user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Reject user\n  app.post(\"/api/admin/users/:userId/reject\", async (req, res) => {\n    try {\n      const { adminId, reason } = req.body;\n      await storage.rejectUser(req.params.userId);\n      \n      if (adminId) {\n        await storage.createAdminActionLog(adminId, \"Rejected user\", req.params.userId, 'user', reason || 'User registration rejected');\n        // Send rejection notification\n        await storage.sendNotification(\n          req.params.userId,\n          \"Account Rejected\",\n          `Your account registration has been rejected. ${reason || 'Please contact support for more information.'}`,\n          \"rejection\"\n        );\n      }\n      \n      res.json({ message: \"User rejected successfully\" });\n    } catch (error) {\n      console.error(\"Reject user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/jobs\", async (req, res) => {\n    try {\n      const jobs = await storage.getAllJobs();\n      res.json({ jobs });\n    } catch (error) {\n      console.error(\"Get jobs error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/wallets\", async (req, res) => {\n    try {\n      const wallets = await storage.getAllWallets();\n      res.json({ wallets });\n    } catch (error) {\n      console.error(\"Get wallets error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/transactions\", async (req, res) => {\n    try {\n      const transactions = await storage.getAllTransactions();\n      res.json({ transactions });\n    } catch (error) {\n      console.error(\"Get transactions error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getGlobalSettings();\n      res.json({ settings });\n    } catch (error) {\n      console.error(\"Get settings error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/settings\", async (req, res) => {\n    try {\n      const { key, value, category, adminId } = req.body;\n      \n      if (!key || !value || !category || !adminId) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      await storage.updateGlobalSettings(key, value, category, adminId);\n      await storage.createAdminActionLog(adminId, `Updated setting: ${key}`, key, 'setting');\n      \n      res.json({ message: \"Settings updated successfully\" });\n    } catch (error) {\n      console.error(\"Update settings error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/notifications/send\", async (req, res) => {\n    try {\n      const { userId, title, message, type, adminId } = req.body;\n      \n      if (!userId || !title || !message || !type) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      await storage.sendNotification(userId, title, message, type);\n      \n      if (adminId) {\n        await storage.createAdminActionLog(adminId, `Sent notification: ${title}`, userId, 'notification');\n      }\n      \n      res.json({ message: \"Notification sent successfully\" });\n    } catch (error) {\n      console.error(\"Send notification error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/notifications\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      const notifications = await storage.getAllNotifications(userId as string);\n      res.json({ notifications });\n    } catch (error) {\n      console.error(\"Get notifications error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/wallet/add-balance\", async (req, res) => {\n    try {\n      const { providerId, amount, adminId } = req.body;\n      \n      if (!providerId || !amount || !adminId) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      const currentWallet = await storage.getWallet(providerId);\n      if (!currentWallet) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n      \n      const newBalance = (parseFloat(currentWallet.balance) + parseFloat(amount)).toString();\n      await storage.updateWalletBalance(providerId, newBalance);\n      \n      // Create transaction record\n      await storage.createTransaction({\n        walletId: currentWallet.id,\n        type: 'recharge',\n        amount: amount,\n        description: `Admin balance addition by ${adminId}`\n      });\n      \n      await storage.createAdminActionLog(adminId, `Added ₹${amount} to provider wallet`, providerId, 'wallet');\n      \n      res.json({ message: \"Balance added successfully\", newBalance });\n    } catch (error) {\n      console.error(\"Add balance error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/providers/:userId/approve\", async (req, res) => {\n    try {\n      const { adminId } = req.body;\n      await storage.approveProvider(req.params.userId);\n      \n      if (adminId) {\n        await storage.createAdminActionLog(adminId, \"Approved provider\", req.params.userId, 'provider');\n        // Send approval notification\n        await storage.sendNotification(\n          req.params.userId,\n          \"Profile Approved!\",\n          \"Your service provider profile has been approved. You can now start receiving job requests.\",\n          \"approval\"\n        );\n      }\n      \n      res.json({ message: \"Provider approved successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/providers/:userId/reject\", async (req, res) => {\n    try {\n      const { adminId, reason } = req.body;\n      await storage.rejectProvider(req.params.userId);\n      \n      if (adminId) {\n        await storage.createAdminActionLog(adminId, \"Rejected provider\", req.params.userId, 'provider', reason);\n        // Send rejection notification\n        await storage.sendNotification(\n          req.params.userId,\n          \"Profile Rejected\",\n          `Your service provider application has been rejected. ${reason || 'Please review and resubmit with correct information.'}`,\n          \"rejection\"\n        );\n      }\n      \n      res.json({ message: \"Provider rejected successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:userId/block\", async (req, res) => {\n    try {\n      const { adminId, reason } = req.body;\n      await storage.updateUser(req.params.userId, { isBlocked: true });\n      \n      if (adminId) {\n        await storage.createAdminActionLog(adminId, \"Blocked user\", req.params.userId, 'user', reason);\n        // Send block notification\n        await storage.sendNotification(\n          req.params.userId,\n          \"Account Blocked\",\n          `Your account has been temporarily blocked. ${reason || 'Please contact support for more information.'}`,\n          \"block\"\n        );\n      }\n      \n      res.json({ message: \"User blocked successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:userId/unblock\", async (req, res) => {\n    try {\n      const { adminId } = req.body;\n      await storage.updateUser(req.params.userId, { isBlocked: false });\n      \n      if (adminId) {\n        await storage.createAdminActionLog(adminId, \"Unblocked user\", req.params.userId, 'user');\n        // Send unblock notification\n        await storage.sendNotification(\n          req.params.userId,\n          \"Account Restored\",\n          \"Your account has been restored. You can now access all platform features.\",\n          \"unblock\"\n        );\n      }\n      \n      res.json({ message: \"User unblocked successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Phase 4: Enhanced Job Management Routes\n  app.post(\"/api/jobs/:jobId/close\", async (req, res) => {\n    try {\n      await storage.closeJob(req.params.jobId);\n      res.json({ message: \"Job closed successfully\" });\n    } catch (error) {\n      console.error(\"Close job error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/jobs/:jobId/reopen\", async (req, res) => {\n    try {\n      await storage.reopenJob(req.params.jobId);\n      res.json({ message: \"Job reopened successfully\" });\n    } catch (error) {\n      console.error(\"Reopen job error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/jobs/hire-again\", async (req, res) => {\n    try {\n      const { originalJobId, ...newJobData } = req.body;\n      \n      // Auto-detect category if not provided or vague\n      if (!newJobData.category || newJobData.category === 'General Services') {\n        const detectedCategory = await storage.autoDetectCategory(newJobData.description);\n        newJobData.category = detectedCategory;\n        \n        // Log AI action\n        await storage.logAiAction({\n          jobId: null,\n          type: 'category_detection',\n          originalData: newJobData.description,\n          processedData: detectedCategory,\n          confidence: '0.85',\n          action: 'category_suggested'\n        });\n      }\n      \n      // Check for duplicate jobs\n      const duplicates = await storage.detectDuplicateJob(newJobData);\n      if (duplicates.length > 0) {\n        await storage.logAiAction({\n          jobId: null,\n          type: 'duplicate_detection',\n          originalData: JSON.stringify(newJobData),\n          processedData: `Found ${duplicates.length} similar jobs`,\n          confidence: '0.75',\n          action: 'duplicate_flagged'\n        });\n        \n        return res.status(409).json({\n          message: \"Similar job detected\",\n          duplicates: duplicates.slice(0, 3),\n          suggestion: \"You have similar active jobs. Consider updating existing ones instead.\"\n        });\n      }\n      \n      const newJob = await storage.hireAgain(originalJobId, newJobData);\n      res.json({ message: \"Job reposted successfully\", job: newJob });\n    } catch (error) {\n      console.error(\"Hire again error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/jobs/unlocked/:customerId\", async (req, res) => {\n    try {\n      const unlockedJobs = await storage.getCustomerUnlockedJobs(req.params.customerId);\n      res.json({ unlockedJobs });\n    } catch (error) {\n      console.error(\"Get unlocked jobs error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Phase 4: Reviews & Rating System\n  app.post(\"/api/reviews\", async (req, res) => {\n    try {\n      const reviewData = {\n        ...req.body,\n        createdAt: new Date(),\n      };\n      \n      const review = await storage.createReview(reviewData);\n      res.json({ message: \"Review submitted successfully\", review });\n    } catch (error) {\n      console.error(\"Create review error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/reviews/job/:jobId\", async (req, res) => {\n    try {\n      const reviews = await storage.getJobReviews(req.params.jobId);\n      res.json({ reviews });\n    } catch (error) {\n      console.error(\"Get job reviews error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/reviews/provider/:providerId\", async (req, res) => {\n    try {\n      const reviews = await storage.getProviderReviews(req.params.providerId);\n      res.json({ reviews });\n    } catch (error) {\n      console.error(\"Get provider reviews error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Phase 4: WhatsApp Integration\n  app.post(\"/api/whatsapp/log\", async (req, res) => {\n    try {\n      await storage.createWhatsappLog(req.body);\n      res.json({ message: \"WhatsApp interaction logged\" });\n    } catch (error) {\n      console.error(\"WhatsApp log error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Phase 4: Subscription Plans\n  app.post(\"/api/subscriptions\", async (req, res) => {\n    try {\n      const subscription = await storage.createSubscription(req.body);\n      res.json({ message: \"Subscription created successfully\", subscription });\n    } catch (error) {\n      console.error(\"Create subscription error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/subscriptions/:userId\", async (req, res) => {\n    try {\n      const subscription = await storage.getActiveSubscription(req.params.userId);\n      res.json({ subscription });\n    } catch (error) {\n      console.error(\"Get subscription error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Phase 4: Referral System\n  app.post(\"/api/referrals\", async (req, res) => {\n    try {\n      const referralData = {\n        ...req.body,\n        referralCode: `REF${Date.now()}${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n        createdAt: new Date(),\n      };\n      \n      const referral = await storage.createReferral(referralData);\n      res.json({ message: \"Referral created successfully\", referral });\n    } catch (error) {\n      console.error(\"Create referral error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/referrals/:code\", async (req, res) => {\n    try {\n      const referral = await storage.getReferralByCode(req.params.code);\n      if (!referral) {\n        return res.status(404).json({ message: \"Referral code not found\" });\n      }\n      res.json({ referral });\n    } catch (error) {\n      console.error(\"Get referral error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Public Providers List with Filtering (SEO-friendly)\n  app.get(\"/api/providers/list\", async (req, res) => {\n    try {\n      const {\n        search = '',\n        location = '',\n        category = [],\n        minRating = 0,\n        minPrice = 0,\n        maxPrice = 10000,\n        availability = 'all',\n        sort = 'rating',\n        page = 1,\n        limit = 12\n      } = req.query;\n\n      const categories = Array.isArray(category) ? category : (category ? [category] : []);\n      const pageNum = parseInt(page as string) || 1;\n      const limitNum = parseInt(limit as string) || 12;\n      const offset = (pageNum - 1) * limitNum;\n\n      // Get all providers (for now, mock data will be used)\n      const allProviders = await storage.getAllProviders();\n      \n      // Apply filters\n      let filteredProviders = allProviders.filter((provider: any) => {\n        // Search filter\n        if (search && !provider.businessName?.toLowerCase().includes(search.toString().toLowerCase()) && \n            !provider.businessDetails?.toLowerCase().includes(search.toString().toLowerCase())) {\n          return false;\n        }\n        \n        // Location filter\n        if (location && location !== 'all' && provider.location !== location) {\n          return false;\n        }\n        \n        // Category filter\n        if (categories.length > 0 && (!provider.serviceCategories || \n            !categories.some((cat: string) => provider.serviceCategories.includes(cat)))) {\n          return false;\n        }\n        \n        // Rating filter\n        if (parseFloat(minRating as string) > 0 && (provider.rating || 0) < parseFloat(minRating as string)) {\n          return false;\n        }\n        \n        // Price filter\n        const startingPrice = provider.startingPrice || 0;\n        if (startingPrice < parseInt(minPrice as string) || startingPrice > parseInt(maxPrice as string)) {\n          return false;\n        }\n        \n        return true;\n      });\n\n      // Apply sorting\n      filteredProviders.sort((a: any, b: any) => {\n        switch (sort) {\n          case 'rating':\n            return (b.rating || 0) - (a.rating || 0);\n          case 'price_low':\n            return (a.startingPrice || 0) - (b.startingPrice || 0);\n          case 'price_high':\n            return (b.startingPrice || 0) - (a.startingPrice || 0);\n          case 'newest':\n            return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n          case 'experience':\n            return (b.experience || 0) - (a.experience || 0);\n          default:\n            return (b.rating || 0) - (a.rating || 0);\n        }\n      });\n\n      // Pagination\n      const total = filteredProviders.length;\n      const totalPages = Math.ceil(total / limitNum);\n      const providers = filteredProviders.slice(offset, offset + limitNum);\n\n      res.json({\n        providers,\n        total,\n        totalPages,\n        currentPage: pageNum,\n        hasNextPage: pageNum < totalPages,\n        hasPrevPage: pageNum > 1\n      });\n    } catch (error) {\n      console.error(\"Get providers list error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Public Jobs List with Filtering (SEO-friendly)\n  app.get(\"/api/jobs/list\", async (req, res) => {\n    try {\n      const {\n        search = '',\n        location = '',\n        category = [],\n        minBudget = 0,\n        maxBudget = 100000,\n        urgency = 'all',\n        sort = 'newest',\n        page = 1,\n        limit = 12\n      } = req.query;\n\n      const categories = Array.isArray(category) ? category : (category ? [category] : []);\n      const pageNum = parseInt(page as string) || 1;\n      const limitNum = parseInt(limit as string) || 12;\n      const offset = (pageNum - 1) * limitNum;\n\n      // Get all jobs (for now, mock data will be used)\n      const allJobs = await storage.getAllJobs();\n      \n      // Apply filters\n      let filteredJobs = allJobs.filter((job: any) => {\n        // Search filter\n        if (search && !job.title?.toLowerCase().includes(search.toString().toLowerCase()) && \n            !job.description?.toLowerCase().includes(search.toString().toLowerCase())) {\n          return false;\n        }\n        \n        // Location filter\n        if (location && job.location !== location) {\n          return false;\n        }\n        \n        // Category filter\n        if (categories.length > 0 && !categories.includes(job.category)) {\n          return false;\n        }\n        \n        // Budget filter\n        const budget = job.budget || 0;\n        if (budget < parseInt(minBudget as string) || budget > parseInt(maxBudget as string)) {\n          return false;\n        }\n        \n        // Urgency filter\n        if (urgency !== 'all' && job.urgency !== urgency) {\n          return false;\n        }\n        \n        return true;\n      });\n\n      // Apply sorting\n      filteredJobs.sort((a: any, b: any) => {\n        switch (sort) {\n          case 'newest':\n            return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n          case 'budget_high':\n            return (b.budget || 0) - (a.budget || 0);\n          case 'budget_low':\n            return (a.budget || 0) - (b.budget || 0);\n          case 'urgent':\n            const urgencyOrder = { 'urgent': 3, 'asap': 2, 'flexible': 1 };\n            return (urgencyOrder[b.urgency as keyof typeof urgencyOrder] || 0) - \n                   (urgencyOrder[a.urgency as keyof typeof urgencyOrder] || 0);\n          case 'proposals':\n            return (b.proposals || 0) - (a.proposals || 0);\n          default:\n            return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n        }\n      });\n\n      // Pagination\n      const total = filteredJobs.length;\n      const totalPages = Math.ceil(total / limitNum);\n      const jobs = filteredJobs.slice(offset, offset + limitNum);\n\n      res.json({\n        jobs,\n        total,\n        totalPages,\n        currentPage: pageNum,\n        hasNextPage: pageNum < totalPages,\n        hasPrevPage: pageNum > 1\n      });\n    } catch (error) {\n      console.error(\"Get jobs list error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin Wallet Management\n  app.get(\"/api/admin/wallets/total\", async (req, res) => {\n    try {\n      const totalWallets = await storage.getAllWallets();\n      const totalBalance = totalWallets.reduce((sum, wallet) => sum + parseFloat(wallet.balance || '0'), 0);\n      \n      res.json({\n        totalBalance: totalBalance.toFixed(2),\n        walletCount: totalWallets.length,\n        wallets: totalWallets.map(wallet => ({\n          id: wallet.id,\n          providerId: wallet.providerId,\n          balance: parseFloat(wallet.balance || '0').toFixed(2),\n          lastRechargeAt: wallet.lastRechargeAt\n        }))\n      });\n    } catch (error) {\n      console.error(\"Get total wallets error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin paginated users endpoint\n  app.get(\"/api/admin/users/paginated\", async (req, res) => {\n    try {\n      const { search = '', userType = 'all', status = 'all', page = '1', limit = '10' } = req.query;\n      const pageNum = parseInt(page as string);\n      const limitNum = parseInt(limit as string);\n      const offset = (pageNum - 1) * limitNum;\n\n      const users = await storage.getAllUsers();\n      \n      // Filter users based on query parameters\n      let filteredUsers = users;\n      \n      if (search) {\n        const searchTerm = (search as string).toLowerCase();\n        filteredUsers = filteredUsers.filter(user =>\n          user.name?.toLowerCase().includes(searchTerm) ||\n          user.phoneNumber?.toLowerCase().includes(searchTerm) ||\n          user.businessName?.toLowerCase().includes(searchTerm)\n        );\n      }\n      \n      if (userType !== 'all') {\n        filteredUsers = filteredUsers.filter(user => user.userType === userType);\n      }\n      \n      if (status !== 'all') {\n        if (status === 'approved') {\n          filteredUsers = filteredUsers.filter(user => user.isApproved && !user.isBlocked);\n        } else if (status === 'pending') {\n          filteredUsers = filteredUsers.filter(user => !user.isApproved);\n        } else if (status === 'blocked') {\n          filteredUsers = filteredUsers.filter(user => user.isBlocked);\n        }\n      }\n\n      const total = filteredUsers.length;\n      const totalPages = Math.ceil(total / limitNum);\n      const paginatedUsers = filteredUsers.slice(offset, offset + limitNum);\n\n      // Add wallet balances for providers\n      const usersWithWallets = await Promise.all(\n        paginatedUsers.map(async (user) => {\n          if (user.userType === 'provider') {\n            const wallet = await storage.getWallet(user.id);\n            return { ...user, walletBalance: wallet?.balance || '0.00' };\n          }\n          return user;\n        })\n      );\n\n      res.json({\n        users: usersWithWallets,\n        total,\n        totalPages,\n        currentPage: pageNum,\n        limit: limitNum\n      });\n    } catch (error) {\n      console.error(\"Get paginated users error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin paginated jobs endpoint\n  app.get(\"/api/admin/jobs/paginated\", async (req, res) => {\n    try {\n      const { search = '', category = 'all', status = 'all', page = '1', limit = '10' } = req.query;\n      const pageNum = parseInt(page as string);\n      const limitNum = parseInt(limit as string);\n      const offset = (pageNum - 1) * limitNum;\n\n      const jobs = await storage.getAllJobs();\n      \n      // Filter jobs based on query parameters\n      let filteredJobs = jobs;\n      \n      if (search) {\n        const searchTerm = (search as string).toLowerCase();\n        filteredJobs = filteredJobs.filter(job =>\n          job.title?.toLowerCase().includes(searchTerm) ||\n          job.description?.toLowerCase().includes(searchTerm)\n        );\n      }\n      \n      if (category !== 'all') {\n        filteredJobs = filteredJobs.filter(job => job.category === category);\n      }\n      \n      if (status !== 'all') {\n        filteredJobs = filteredJobs.filter(job => job.status === status);\n      }\n\n      const total = filteredJobs.length;\n      const totalPages = Math.ceil(total / limitNum);\n      const paginatedJobs = filteredJobs.slice(offset, offset + limitNum);\n\n      res.json({\n        jobs: paginatedJobs,\n        total,\n        totalPages,\n        currentPage: pageNum,\n        limit: limitNum\n      });\n    } catch (error) {\n      console.error(\"Get paginated jobs error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin paginated transactions endpoint\n  app.get(\"/api/admin/transactions/paginated\", async (req, res) => {\n    try {\n      const { search = '', type = 'all', page = '1', limit = '10' } = req.query;\n      const pageNum = parseInt(page as string);\n      const limitNum = parseInt(limit as string);\n      const offset = (pageNum - 1) * limitNum;\n\n      const transactions = await storage.getAllTransactions();\n      \n      // Filter transactions based on query parameters\n      let filteredTransactions = transactions;\n      \n      if (search) {\n        const searchTerm = (search as string).toLowerCase();\n        filteredTransactions = filteredTransactions.filter(transaction =>\n          transaction.id?.toLowerCase().includes(searchTerm) ||\n          transaction.description?.toLowerCase().includes(searchTerm)\n        );\n      }\n      \n      if (type !== 'all') {\n        filteredTransactions = filteredTransactions.filter(transaction => transaction.type === type);\n      }\n\n      const total = filteredTransactions.length;\n      const totalPages = Math.ceil(total / limitNum);\n      const paginatedTransactions = filteredTransactions.slice(offset, offset + limitNum);\n\n      res.json({\n        transactions: paginatedTransactions,\n        total,\n        totalPages,\n        currentPage: pageNum,\n        limit: limitNum\n      });\n    } catch (error) {\n      console.error(\"Get paginated transactions error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Phase 4: SEO Landing Pages\n  app.get(\"/api/seo/:slug\", async (req, res) => {\n    try {\n      const page = await storage.getSeoPage(req.params.slug);\n      if (!page) {\n        return res.status(404).json({ message: \"Page not found\" });\n      }\n      \n      // Increment views\n      await storage.createSeoPage({\n        ...page,\n        views: page.views + 1,\n        lastUpdated: new Date()\n      });\n      \n      res.json({ page });\n    } catch (error) {\n      console.error(\"Get SEO page error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/seo/pages\", async (req, res) => {\n    try {\n      const page = await storage.createSeoPage(req.body);\n      res.json({ message: \"SEO page created successfully\", page });\n    } catch (error) {\n      console.error(\"Create SEO page error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":47830},"server/storage.ts":{"content":"import { \n  users, \n  otpCodes, \n  customerProfiles, \n  providerProfiles, \n  jobs, \n  wallets, \n  transactions, \n  jobUnlocks,\n  adminSettings,\n  notifications,\n  adminActionLogs,\n  reviews,\n  subscriptions,\n  referrals,\n  aiLogs,\n  enhancedNotifications,\n  seoPages,\n  whatsappLogs,\n  type User, \n  type InsertUser,\n  type OtpCode,\n  type InsertOtpCode,\n  type CustomerProfile,\n  type InsertCustomerProfile,\n  type ProviderProfile,\n  type InsertProviderProfile,\n  type Job,\n  type InsertJob,\n  type Wallet,\n  type InsertWallet,\n  type Transaction,\n  type InsertTransaction,\n  type JobUnlock,\n  type InsertJobUnlock,\n  type AdminSetting,\n  type InsertAdminSetting,\n  type Notification,\n  type InsertNotification,\n  type AdminActionLog,\n  type InsertAdminActionLog\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, sql, desc, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByPhone(phoneNumber: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  getPendingUsers(): Promise<User[]>;\n  approveUser(userId: string): Promise<void>;\n  rejectUser(userId: string): Promise<void>;\n  \n  // Profile completion methods\n  completeCustomerProfile(userId: string, profileData: any): Promise<User>;\n  completeProviderProfile(userId: string, profileData: any): Promise<User>;\n  \n  // OTP methods\n  createOtp(otp: InsertOtpCode): Promise<OtpCode>;\n  getValidOtp(phoneNumber: string, code: string): Promise<OtpCode | undefined>;\n  markOtpAsUsed(id: string): Promise<void>;\n  \n  // Profile methods\n  createCustomerProfile(profile: InsertCustomerProfile): Promise<CustomerProfile>;\n  getCustomerProfile(userId: string): Promise<CustomerProfile | undefined>;\n  updateCustomerProfile(userId: string, updates: Partial<CustomerProfile>): Promise<CustomerProfile | undefined>;\n  \n  createProviderProfile(profile: InsertProviderProfile): Promise<ProviderProfile>;\n  getProviderProfile(userId: string): Promise<ProviderProfile | undefined>;\n  updateProviderProfile(userId: string, updates: Partial<ProviderProfile>): Promise<ProviderProfile | undefined>;\n  getPendingProviders(): Promise<ProviderProfile[]>;\n  approveProvider(userId: string): Promise<void>;\n  rejectProvider(userId: string): Promise<void>;\n  \n  // Job methods\n  createJob(job: InsertJob): Promise<Job>;\n  getJob(id: string): Promise<Job | undefined>;\n  getJobsNearLocation(latitude: number, longitude: number, radiusKm: number): Promise<Job[]>;\n  getCustomerJobs(customerId: string): Promise<Job[]>;\n  closeJob(jobId: string): Promise<void>;\n  reopenJob(jobId: string): Promise<void>;\n  hireAgain(originalJobId: string, newJobData: InsertJob): Promise<Job>;\n  \n  // Wallet methods\n  createWallet(wallet: InsertWallet): Promise<Wallet>;\n  getWallet(providerId: string): Promise<Wallet | undefined>;\n  updateWalletBalance(providerId: string, amount: string): Promise<Wallet | undefined>;\n  \n  // Transaction methods\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getWalletTransactions(walletId: string): Promise<Transaction[]>;\n  \n  // Job unlock methods\n  createJobUnlock(unlock: InsertJobUnlock): Promise<JobUnlock>;\n  getJobUnlocks(jobId: string): Promise<JobUnlock[]>;\n  hasProviderUnlockedJob(jobId: string, providerId: string): Promise<boolean>;\n  incrementJobUnlockCount(jobId: string): Promise<void>;\n  getCustomerUnlockedJobs(customerId: string): Promise<any[]>;\n  \n  // Admin methods\n  getDashboardStats(): Promise<any>;\n  getAllUsers(): Promise<User[]>;\n  getAllJobs(): Promise<Job[]>;\n  getAllProviders(): Promise<any[]>;\n  getAllWallets(): Promise<Wallet[]>;\n  getAllTransactions(): Promise<Transaction[]>;\n  getRecentAdminActions(): Promise<any[]>;\n  createAdminActionLog(adminId: string, action: string, targetId?: string, targetType?: string, details?: string): Promise<void>;\n  updateGlobalSettings(key: string, value: string, category: string, adminId: string): Promise<void>;\n  getGlobalSettings(): Promise<any[]>;\n  sendNotification(userId: string, title: string, message: string, type: string): Promise<void>;\n  getAllNotifications(userId?: string): Promise<any[]>;\n  \n  // Phase 4 methods\n  createReview(reviewData: any): Promise<any>;\n  getJobReviews(jobId: string): Promise<any[]>;\n  getProviderReviews(providerId: string): Promise<any[]>;\n  updateProviderRating(providerId: string): Promise<void>;\n  createSubscription(subscriptionData: any): Promise<any>;\n  getActiveSubscription(userId: string): Promise<any>;\n  createReferral(referralData: any): Promise<any>;\n  getReferralByCode(code: string): Promise<any>;\n  logAiAction(logData: any): Promise<void>;\n  createWhatsappLog(logData: any): Promise<void>;\n  getSeoPage(slug: string): Promise<any>;\n  createSeoPage(pageData: any): Promise<any>;\n  detectDuplicateJob(jobData: any): Promise<any[]>;\n  autoDetectCategory(description: string): Promise<string>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Mock data for demo purposes\n  private mockProviders = [\n    {\n      id: 'prov_1',\n      businessName: 'CleanPro Services',\n      businessDetails: 'Professional home cleaning service with 5+ years of experience. We use eco-friendly products and provide deep cleaning solutions.',\n      location: 'Bangalore',\n      serviceCategories: ['Home Cleaning', 'Deep Cleaning'],\n      startingPrice: 800,\n      createdAt: new Date('2024-01-15'),\n      rating: 4.8,\n      reviewCount: 156,\n      availability: 'Available Today',\n      experience: 5\n    },\n    {\n      id: 'prov_2',\n      businessName: 'QuickFix Plumbing',\n      businessDetails: 'Licensed plumber specializing in residential and commercial plumbing repairs, installations, and maintenance.',\n      location: 'Mumbai',\n      serviceCategories: ['Plumbing', 'Pipe Repair'],\n      startingPrice: 500,\n      createdAt: new Date('2024-01-20'),\n      rating: 4.6,\n      reviewCount: 89,\n      availability: 'Available Now',\n      experience: 7\n    },\n    {\n      id: 'prov_3',\n      businessName: 'ElectroMax Solutions',\n      businessDetails: 'Certified electrician providing safe and reliable electrical services for homes and offices.',\n      location: 'Delhi',\n      serviceCategories: ['Electrical Work', 'Wiring'],\n      startingPrice: 600,\n      createdAt: new Date('2024-01-25'),\n      rating: 4.9,\n      reviewCount: 203,\n      availability: 'Available This Week',\n      experience: 8\n    },\n    {\n      id: 'prov_4',\n      businessName: 'CarpentryKing',\n      businessDetails: 'Expert carpenter for furniture repair, custom woodwork, and home renovations.',\n      location: 'Chennai',\n      serviceCategories: ['Carpentry', 'Furniture Repair'],\n      startingPrice: 750,\n      createdAt: new Date('2024-02-01'),\n      rating: 4.7,\n      reviewCount: 124,\n      availability: 'Available Tomorrow',\n      experience: 6\n    },\n    {\n      id: 'prov_5',\n      businessName: 'ColorCraft Painters',\n      businessDetails: 'Professional painting service for interior and exterior walls with premium quality paints.',\n      location: 'Hyderabad',\n      serviceCategories: ['Painting', 'Interior Design'],\n      startingPrice: 400,\n      createdAt: new Date('2024-02-05'),\n      rating: 4.5,\n      reviewCount: 78,\n      availability: 'Available Next Week',\n      experience: 4\n    },\n    {\n      id: 'prov_6',\n      businessName: 'GreenThumb Gardening',\n      businessDetails: 'Landscape design and garden maintenance services for residential properties.',\n      location: 'Pune',\n      serviceCategories: ['Gardening', 'Landscaping'],\n      startingPrice: 300,\n      createdAt: new Date('2024-02-10'),\n      rating: 4.4,\n      reviewCount: 67,\n      availability: 'Flexible',\n      experience: 3\n    }\n  ];\n\n  private mockJobs = [\n    {\n      id: 'job_1',\n      title: 'Deep Cleaning for 3BHK Apartment',\n      description: 'Need professional deep cleaning service for my 3BHK apartment. Kitchen, bathrooms, living areas, and bedrooms need thorough cleaning. Prefer eco-friendly products.',\n      category: 'Home Cleaning',\n      location: 'Bangalore',\n      budget: 2500,\n      urgency: 'asap',\n      createdAt: new Date('2024-02-15'),\n      customerName: 'Priya Sharma',\n      proposals: 8\n    },\n    {\n      id: 'job_2',\n      title: 'Kitchen Sink Pipe Leakage Repair',\n      description: 'My kitchen sink pipe is leaking and needs immediate attention. Water is dripping constantly and I need a professional plumber to fix it.',\n      category: 'Plumbing',\n      location: 'Mumbai',\n      budget: 1200,\n      urgency: 'urgent',\n      createdAt: new Date('2024-02-16'),\n      customerName: 'Amit Patel',\n      proposals: 12\n    },\n    {\n      id: 'job_3',\n      title: 'Electrical Wiring for New Room',\n      description: 'Need electrical wiring done for a newly constructed room. Requires power outlets, lights, and fan connections. Safety is priority.',\n      category: 'Electrical Work',\n      location: 'Delhi',\n      budget: 5000,\n      urgency: 'flexible',\n      createdAt: new Date('2024-02-14'),\n      customerName: 'Rahul Kumar',\n      proposals: 6\n    },\n    {\n      id: 'job_4',\n      title: 'Wooden Cabinet Repair',\n      description: 'My wooden kitchen cabinet door is broken and needs repair. The hinges are damaged and the door won\\'t close properly.',\n      category: 'Carpentry',\n      location: 'Chennai',\n      budget: 800,\n      urgency: 'asap',\n      createdAt: new Date('2024-02-17'),\n      customerName: 'Lakshmi Iyer',\n      proposals: 4\n    },\n    {\n      id: 'job_5',\n      title: 'Interior Wall Painting - Living Room',\n      description: 'Looking for professional painters to paint my living room walls. Room size is approximately 200 sq ft. Need color consultation too.',\n      category: 'Painting',\n      location: 'Hyderabad',\n      budget: 3500,\n      urgency: 'flexible',\n      createdAt: new Date('2024-02-13'),\n      customerName: 'Suresh Reddy',\n      proposals: 9\n    },\n    {\n      id: 'job_6',\n      title: 'Garden Landscaping and Maintenance',\n      description: 'Need landscaping services for my front garden. Want to plant new flowers, trim existing plants, and general maintenance.',\n      category: 'Gardening',\n      location: 'Pune',\n      budget: 2000,\n      urgency: 'flexible',\n      createdAt: new Date('2024-02-12'),\n      customerName: 'Neha Joshi',\n      proposals: 3\n    },\n    {\n      id: 'job_7',\n      title: 'AC Repair and Servicing',\n      description: 'My split AC is not cooling properly and making strange noises. Need immediate repair and servicing by certified technician.',\n      category: 'HVAC',\n      location: 'Bangalore',\n      budget: 1500,\n      urgency: 'urgent',\n      createdAt: new Date('2024-02-18'),\n      customerName: 'Vikram Singh',\n      proposals: 15\n    },\n    {\n      id: 'job_8',\n      title: 'Laptop Hardware Issue Fix',\n      description: 'My laptop screen is flickering and sometimes goes blank. Need technical expert to diagnose and fix the hardware issue.',\n      category: 'Tech Support',\n      location: 'Mumbai',\n      budget: 2200,\n      urgency: 'asap',\n      createdAt: new Date('2024-02-19'),\n      customerName: 'Anjali Gupta',\n      proposals: 7\n    }\n  ];\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByPhone(phoneNumber: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.phoneNumber, phoneNumber));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user || undefined;\n  }\n\n  // OTP methods\n  async createOtp(otp: InsertOtpCode): Promise<OtpCode> {\n    const [otpCode] = await db.insert(otpCodes).values(otp).returning();\n    return otpCode;\n  }\n\n  async getValidOtp(phoneNumber: string, code: string): Promise<OtpCode | undefined> {\n    const [otp] = await db\n      .select()\n      .from(otpCodes)\n      .where(\n        and(\n          eq(otpCodes.phoneNumber, phoneNumber),\n          eq(otpCodes.code, code),\n          eq(otpCodes.isUsed, false),\n          sql`${otpCodes.expiresAt} > NOW()`\n        )\n      );\n    return otp || undefined;\n  }\n\n  async markOtpAsUsed(id: string): Promise<void> {\n    await db.update(otpCodes).set({ isUsed: true }).where(eq(otpCodes.id, id));\n  }\n\n  // Profile methods\n  async createCustomerProfile(profile: InsertCustomerProfile): Promise<CustomerProfile> {\n    const [customerProfile] = await db.insert(customerProfiles).values(profile).returning();\n    return customerProfile;\n  }\n\n  async getCustomerProfile(userId: string): Promise<CustomerProfile | undefined> {\n    const [profile] = await db.select().from(customerProfiles).where(eq(customerProfiles.userId, userId));\n    return profile || undefined;\n  }\n\n  async updateCustomerProfile(userId: string, updates: Partial<CustomerProfile>): Promise<CustomerProfile | undefined> {\n    const [profile] = await db\n      .update(customerProfiles)\n      .set(updates)\n      .where(eq(customerProfiles.userId, userId))\n      .returning();\n    return profile || undefined;\n  }\n\n  async createProviderProfile(profile: InsertProviderProfile): Promise<ProviderProfile> {\n    const [providerProfile] = await db.insert(providerProfiles).values(profile).returning();\n    return providerProfile;\n  }\n\n  async getProviderProfile(userId: string): Promise<ProviderProfile | undefined> {\n    const [profile] = await db.select().from(providerProfiles).where(eq(providerProfiles.userId, userId));\n    return profile || undefined;\n  }\n\n  async updateProviderProfile(userId: string, updates: Partial<ProviderProfile>): Promise<ProviderProfile | undefined> {\n    const [profile] = await db\n      .update(providerProfiles)\n      .set(updates)\n      .where(eq(providerProfiles.userId, userId))\n      .returning();\n    return profile || undefined;\n  }\n\n  async getPendingProviders(): Promise<ProviderProfile[]> {\n    return await db.select().from(providerProfiles).where(eq(providerProfiles.status, 'pending'));\n  }\n\n  async approveProvider(userId: string): Promise<void> {\n    await db\n      .update(providerProfiles)\n      .set({ status: 'approved', approvedAt: new Date() })\n      .where(eq(providerProfiles.userId, userId));\n  }\n\n  async rejectProvider(userId: string): Promise<void> {\n    await db\n      .update(providerProfiles)\n      .set({ status: 'rejected' })\n      .where(eq(providerProfiles.userId, userId));\n  }\n\n  // Job methods\n  async createJob(job: InsertJob): Promise<Job> {\n    const [newJob] = await db.insert(jobs).values(job).returning();\n    return newJob;\n  }\n\n  async getJob(id: string): Promise<Job | undefined> {\n    const [job] = await db.select().from(jobs).where(eq(jobs.id, id));\n    return job || undefined;\n  }\n\n  // Duplicate method removed - getJob already exists with same functionality\n\n  async getAllJobs(): Promise<Job[]> {\n    const allJobs = await db.select().from(jobs).orderBy(desc(jobs.createdAt));\n    return allJobs.concat(this.mockJobs);\n  }\n\n  async getAllProviders(): Promise<any[]> {\n    // Get real providers from database - only select fields that actually exist\n    const realProviders = await db\n      .select({\n        id: providerProfiles.id,\n        businessName: providerProfiles.businessName,\n        businessDetails: providerProfiles.businessDetails,\n        location: providerProfiles.location,\n        serviceCategories: providerProfiles.serviceCategories,\n        rating: providerProfiles.rating,\n        totalJobs: providerProfiles.totalJobs,\n        status: providerProfiles.status\n      })\n      .from(providerProfiles)\n      .where(eq(providerProfiles.status, 'approved'));\n    \n    // Transform the data to match expected format with default values\n    const transformedProviders = realProviders.map(provider => ({\n      ...provider,\n      startingPrice: 500, // Default price\n      reviewCount: provider.totalJobs || 0,\n      availability: 'Available Today', // Default availability\n      experience: 2, // Default experience years\n      createdAt: new Date().toISOString(), // Current date as fallback\n      // Ensure all mock provider fields are included\n      name: provider.businessName\n    }));\n    \n    // Combine with mock data\n    return transformedProviders.concat(this.mockProviders);\n  }\n\n  async getJobsNearLocation(latitude: number, longitude: number, radiusKm: number): Promise<Job[]> {\n    // Using Haversine formula to calculate distance\n    const jobsNear = await db\n      .select()\n      .from(jobs)\n      .where(\n        and(\n          eq(jobs.status, 'open'),\n          sql`(\n            6371 * acos(\n              cos(radians(${latitude})) * \n              cos(radians(${jobs.latitude})) * \n              cos(radians(${jobs.longitude}) - radians(${longitude})) + \n              sin(radians(${latitude})) * \n              sin(radians(${jobs.latitude}))\n            )\n          ) <= ${radiusKm}`\n        )\n      )\n      .orderBy(desc(jobs.createdAt));\n    \n    return jobsNear;\n  }\n\n  async getCustomerJobs(customerId: string): Promise<Job[]> {\n    return await db\n      .select()\n      .from(jobs)\n      .where(eq(jobs.customerId, customerId))\n      .orderBy(desc(jobs.createdAt));\n  }\n\n  // Wallet methods\n  async createWallet(wallet: InsertWallet): Promise<Wallet> {\n    const [newWallet] = await db.insert(wallets).values(wallet).returning();\n    return newWallet;\n  }\n\n  async getWallet(providerId: string): Promise<Wallet | undefined> {\n    const [wallet] = await db.select().from(wallets).where(eq(wallets.providerId, providerId));\n    return wallet || undefined;\n  }\n\n  async updateWalletBalance(providerId: string, amount: string): Promise<Wallet | undefined> {\n    const [wallet] = await db\n      .update(wallets)\n      .set({ balance: amount })\n      .where(eq(wallets.providerId, providerId))\n      .returning();\n    return wallet || undefined;\n  }\n\n  // Transaction methods\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db.insert(transactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async getWalletTransactions(walletId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.walletId, walletId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  // Job unlock methods\n  async createJobUnlock(unlock: InsertJobUnlock): Promise<JobUnlock> {\n    const [newUnlock] = await db.insert(jobUnlocks).values(unlock).returning();\n    return newUnlock;\n  }\n\n  async getJobUnlocks(jobId: string): Promise<JobUnlock[]> {\n    return await db.select().from(jobUnlocks).where(eq(jobUnlocks.jobId, jobId));\n  }\n\n  async hasProviderUnlockedJob(jobId: string, providerId: string): Promise<boolean> {\n    const [unlock] = await db\n      .select()\n      .from(jobUnlocks)\n      .where(and(eq(jobUnlocks.jobId, jobId), eq(jobUnlocks.providerId, providerId)));\n    return !!unlock;\n  }\n\n  async incrementJobUnlockCount(jobId: string): Promise<void> {\n    await db\n      .update(jobs)\n      .set({ unlockCount: sql`${jobs.unlockCount} + 1` })\n      .where(eq(jobs.id, jobId));\n  }\n\n  // Profile completion methods\n  async completeCustomerProfile(userId: string, profileData: any): Promise<User> {\n    // Update user table\n    const [user] = await db\n      .update(users)\n      .set({\n        name: profileData.name,\n        email: profileData.email,\n        password: profileData.password,\n        profileCompleted: true\n      })\n      .where(eq(users.id, userId))\n      .returning();\n\n    // Check if customer profile already exists\n    const [existingProfile] = await db\n      .select()\n      .from(customerProfiles)\n      .where(eq(customerProfiles.userId, userId))\n      .limit(1);\n\n    if (existingProfile) {\n      // Update existing profile\n      await db\n        .update(customerProfiles)\n        .set({\n          location: profileData.location,\n          latitude: profileData.latitude?.toString(),\n          longitude: profileData.longitude?.toString()\n        })\n        .where(eq(customerProfiles.userId, userId));\n    } else {\n      // Create new profile\n      await db\n        .insert(customerProfiles)\n        .values({\n          userId: userId,\n          location: profileData.location,\n          latitude: profileData.latitude?.toString(),\n          longitude: profileData.longitude?.toString()\n        });\n    }\n\n    return user;\n  }\n\n  async completeProviderProfile(userId: string, profileData: any): Promise<User> {\n    // Update user table\n    const [user] = await db\n      .update(users)\n      .set({\n        name: profileData.name,\n        email: profileData.email,\n        password: profileData.password,\n        profileCompleted: true\n      })\n      .where(eq(users.id, userId))\n      .returning();\n\n    // Check if provider profile already exists\n    const [existingProfile] = await db\n      .select()\n      .from(providerProfiles)\n      .where(eq(providerProfiles.userId, userId))\n      .limit(1);\n\n    if (existingProfile) {\n      // Update existing profile\n      await db\n        .update(providerProfiles)\n        .set({\n          businessName: profileData.businessName,\n          businessDetails: profileData.businessDetails,\n          serviceCategories: profileData.serviceCategories,\n          location: profileData.location,\n          latitude: profileData.latitude?.toString(),\n          longitude: profileData.longitude?.toString(),\n          serviceRadius: profileData.serviceRadius,\n          documentsUploaded: profileData.documents?.length > 0 || false,\n          documents: profileData.documents || []\n        })\n        .where(eq(providerProfiles.userId, userId));\n    } else {\n      // Create new profile\n      await db\n        .insert(providerProfiles)\n        .values({\n          userId: userId,\n          businessName: profileData.businessName,\n          businessDetails: profileData.businessDetails,\n          serviceCategories: profileData.serviceCategories,\n          location: profileData.location,\n          latitude: profileData.latitude?.toString(),\n          longitude: profileData.longitude?.toString(),\n          serviceRadius: profileData.serviceRadius,\n          status: 'pending',\n          documentsUploaded: profileData.documents?.length > 0 || false,\n          documents: profileData.documents || []\n        });\n    }\n\n    return user;\n  }\n\n  // Enhanced Job Methods\n  async closeJob(jobId: string): Promise<void> {\n    await db.update(jobs).set({ status: 'closed' }).where(eq(jobs.id, jobId));\n  }\n\n  async reopenJob(jobId: string): Promise<void> {\n    await db.update(jobs).set({ status: 'open' }).where(eq(jobs.id, jobId));\n  }\n\n  async hireAgain(originalJobId: string, newJobData: InsertJob): Promise<Job> {\n    const [job] = await db.insert(jobs).values(newJobData).returning();\n    return job;\n  }\n\n  async getCustomerUnlockedJobs(customerId: string): Promise<any[]> {\n    try {\n      const unlocked = await db\n        .select({\n          id: jobUnlocks.id,\n          jobId: jobUnlocks.jobId,\n          providerId: jobUnlocks.providerId,\n          providerName: users.name,\n          providerPhone: users.phoneNumber,\n          providerRating: sql<string>`COALESCE(${providerProfiles.rating}, '0')`.as('providerRating'),\n          unlockedAt: jobUnlocks.unlockedAt,\n        })\n        .from(jobUnlocks)\n        .innerJoin(jobs, eq(jobUnlocks.jobId, jobs.id))\n        .innerJoin(users, eq(jobUnlocks.providerId, users.id))\n        .leftJoin(providerProfiles, eq(users.id, providerProfiles.userId))\n        .where(eq(jobs.customerId, customerId))\n        .orderBy(desc(jobUnlocks.unlockedAt));\n\n      return unlocked.map(unlock => ({\n        ...unlock,\n        providerRating: parseFloat(unlock.providerRating || '0'),\n        whatsappLink: unlock.providerPhone \n          ? `https://wa.me/${unlock.providerPhone.replace('+', '')}?text=Hi, I saw your profile on ServiceConnect and would like to discuss the job.`\n          : undefined\n      }));\n    } catch (error) {\n      console.error('Error in getCustomerUnlockedJobs:', error);\n      return [];\n    }\n  }\n\n  // Admin methods\n  async getDashboardStats(): Promise<any> {\n    const totalUsers = await db.select({ count: sql<number>`count(*)` }).from(users);\n    const activeProviders = await db.select({ count: sql<number>`count(*)` }).from(providerProfiles).where(eq(providerProfiles.status, 'approved'));\n    const totalJobs = await db.select({ count: sql<number>`count(*)` }).from(jobs);\n    const monthlyRevenue = await db.select({ sum: sql<number>`sum(amount::numeric)` }).from(transactions).where(eq(transactions.type, 'unlock'));\n    const pendingProviders = await db.select({ count: sql<number>`count(*)` }).from(providerProfiles).where(eq(providerProfiles.status, 'pending'));\n\n    return {\n      totalUsers: totalUsers[0]?.count || 0,\n      activeProviders: activeProviders[0]?.count || 0,\n      totalJobs: totalJobs[0]?.count || 0,\n      monthlyRevenue: monthlyRevenue[0]?.sum || 0,\n      pendingApprovals: pendingProviders[0]?.count || 0\n    };\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getPendingUsers(): Promise<User[]> {\n    return await db.select().from(users)\n      .where(and(eq(users.isVerified, true), eq(users.isApproved, false)))\n      .orderBy(desc(users.createdAt));\n  }\n\n  async approveUser(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ isApproved: true, approvedAt: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  async rejectUser(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ isApproved: false })\n      .where(eq(users.id, userId));\n  }\n\n  // Duplicate method removed - getAllJobs already exists in MemStorage above\n\n  async getAllWallets(): Promise<Wallet[]> {\n    return await db.select().from(wallets).orderBy(desc(wallets.lastRechargeAt));\n  }\n\n  async getAllTransactions(): Promise<Transaction[]> {\n    return await db.select().from(transactions).orderBy(desc(transactions.createdAt));\n  }\n\n  async getRecentAdminActions(): Promise<any[]> {\n    return await db\n      .select({\n        id: adminActionLogs.id,\n        action: adminActionLogs.action,\n        targetId: adminActionLogs.targetId,\n        targetType: adminActionLogs.targetType,\n        details: adminActionLogs.details,\n        createdAt: adminActionLogs.createdAt,\n        adminName: users.name\n      })\n      .from(adminActionLogs)\n      .leftJoin(users, eq(adminActionLogs.adminId, users.id))\n      .orderBy(desc(adminActionLogs.createdAt))\n      .limit(10);\n  }\n\n  async createAdminActionLog(adminId: string, action: string, targetId?: string, targetType?: string, details?: string): Promise<void> {\n    await db.insert(adminActionLogs).values({\n      adminId,\n      action,\n      targetId,\n      targetType,\n      details\n    });\n  }\n\n  async updateGlobalSettings(key: string, value: string, category: string, adminId: string): Promise<void> {\n    await db\n      .insert(adminSettings)\n      .values({\n        settingKey: key,\n        settingValue: value,\n        category,\n        updatedBy: adminId\n      })\n      .onConflictDoUpdate({\n        target: adminSettings.settingKey,\n        set: {\n          settingValue: value,\n          updatedBy: adminId,\n          updatedAt: sql`now()`\n        }\n      });\n  }\n\n  async getGlobalSettings(): Promise<any[]> {\n    return await db.select().from(adminSettings).orderBy(adminSettings.category, adminSettings.settingKey);\n  }\n\n  async sendNotification(userId: string, title: string, message: string, type: string): Promise<void> {\n    await db.insert(notifications).values({\n      userId,\n      title,\n      message,\n      type\n    });\n  }\n\n  async getAllNotifications(userId?: string): Promise<any[]> {\n    const query = db.select().from(notifications);\n    \n    if (userId) {\n      return await query.where(eq(notifications.userId, userId)).orderBy(desc(notifications.createdAt));\n    }\n    \n    return await query.orderBy(desc(notifications.createdAt)).limit(50);\n  }\n\n  // Phase 4 Implementation\n  async createReview(reviewData: any): Promise<any> {\n    const [review] = await db.insert(reviews).values(reviewData).returning();\n    \n    // Update provider rating\n    await this.updateProviderRating(reviewData.providerId);\n    \n    return review;\n  }\n\n  async getJobReviews(jobId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: reviews.id,\n        rating: reviews.rating,\n        comment: reviews.comment,\n        customerName: users.name,\n        createdAt: reviews.createdAt,\n      })\n      .from(reviews)\n      .innerJoin(users, eq(reviews.customerId, users.id))\n      .where(eq(reviews.jobId, jobId));\n  }\n\n  async getProviderReviews(providerId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: reviews.id,\n        rating: reviews.rating,\n        comment: reviews.comment,\n        customerName: users.name,\n        createdAt: reviews.createdAt,\n      })\n      .from(reviews)\n      .innerJoin(users, eq(reviews.customerId, users.id))\n      .where(eq(reviews.providerId, providerId));\n  }\n\n  async updateProviderRating(providerId: string): Promise<void> {\n    const avgRating = await db\n      .select({ avg: sql<number>`avg(cast(rating as decimal))` })\n      .from(reviews)\n      .where(eq(reviews.providerId, providerId));\n\n    if (avgRating[0]?.avg) {\n      await db\n        .update(providerProfiles)\n        .set({ rating: avgRating[0].avg.toString() })\n        .where(eq(providerProfiles.userId, providerId));\n    }\n  }\n\n  async createSubscription(subscriptionData: any): Promise<any> {\n    const [subscription] = await db.insert(subscriptions).values(subscriptionData).returning();\n    return subscription;\n  }\n\n  async getActiveSubscription(userId: string): Promise<any> {\n    const [subscription] = await db\n      .select()\n      .from(subscriptions)\n      .where(and(\n        eq(subscriptions.userId, userId),\n        eq(subscriptions.status, 'active')\n      ))\n      .orderBy(desc(subscriptions.createdAt));\n    \n    return subscription;\n  }\n\n  async createReferral(referralData: any): Promise<any> {\n    const [referral] = await db.insert(referrals).values(referralData).returning();\n    return referral;\n  }\n\n  async getReferralByCode(code: string): Promise<any> {\n    const [referral] = await db\n      .select()\n      .from(referrals)\n      .where(eq(referrals.referralCode, code));\n    \n    return referral;\n  }\n\n  async logAiAction(logData: any): Promise<void> {\n    await db.insert(aiLogs).values(logData);\n  }\n\n  async createWhatsappLog(logData: any): Promise<void> {\n    await db.insert(whatsappLogs).values(logData);\n  }\n\n  async getSeoPage(slug: string): Promise<any> {\n    const [page] = await db\n      .select()\n      .from(seoPages)\n      .where(and(eq(seoPages.slug, slug), eq(seoPages.isActive, true)));\n    \n    return page;\n  }\n\n  async createSeoPage(pageData: any): Promise<any> {\n    const [page] = await db.insert(seoPages).values(pageData).returning();\n    return page;\n  }\n\n  async detectDuplicateJob(jobData: any): Promise<any[]> {\n    // Simple duplicate detection based on title and location similarity\n    const duplicates = await db\n      .select()\n      .from(jobs)\n      .where(and(\n        eq(jobs.customerId, jobData.customerId),\n        eq(jobs.category, jobData.category),\n        eq(jobs.status, 'open')\n      ))\n      .limit(5);\n\n    return duplicates.filter(job => \n      job.title.toLowerCase().includes(jobData.title.toLowerCase().substring(0, 10)) ||\n      job.location.toLowerCase().includes(jobData.location.toLowerCase().substring(0, 10))\n    );\n  }\n\n  async autoDetectCategory(description: string): Promise<string> {\n    // Simple category detection based on keywords\n    const text = description.toLowerCase();\n    \n    if (text.includes('clean') || text.includes('maid') || text.includes('house')) {\n      return 'Home Cleaning';\n    }\n    if (text.includes('plumb') || text.includes('pipe') || text.includes('leak')) {\n      return 'Plumbing';\n    }\n    if (text.includes('electric') || text.includes('wire') || text.includes('power')) {\n      return 'Electrical';\n    }\n    if (text.includes('beauty') || text.includes('makeup') || text.includes('hair')) {\n      return 'Beauty & Personal Care';\n    }\n    if (text.includes('repair') || text.includes('fix') || text.includes('maintenance')) {\n      return 'Home Repairs';\n    }\n    \n    return 'General Services';\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":32931},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, decimal, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const userTypeEnum = pgEnum('user_type', ['customer', 'provider', 'admin']);\nexport const jobStatusEnum = pgEnum('job_status', ['open', 'closed']);\nexport const providerStatusEnum = pgEnum('provider_status', ['pending', 'approved', 'rejected']);\nexport const transactionTypeEnum = pgEnum('transaction_type', ['recharge', 'unlock', 'refund', 'subscription']);\nexport const reviewRatingEnum = pgEnum('review_rating', ['1', '2', '3', '4', '5']);\nexport const subscriptionStatusEnum = pgEnum('subscription_status', ['active', 'expired', 'cancelled']);\nexport const subscriptionTypeEnum = pgEnum('subscription_type', ['basic', 'premium', 'enterprise']);\nexport const aiLogTypeEnum = pgEnum('ai_log_type', ['category_detection', 'duplicate_detection', 'auto_close']);\nexport const notificationTypeEnum = pgEnum('notification_type', ['approval', 'rejection', 'unlock', 'review', 'system', 'promotional']);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }).notNull().unique(),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  password: text(\"password\"), // Optional password\n  userType: userTypeEnum(\"user_type\").notNull(),\n  isVerified: boolean(\"is_verified\").default(false),\n  isApproved: boolean(\"is_approved\").default(false), // Admin approval required\n  isBlocked: boolean(\"is_blocked\").default(false),\n  profileCompleted: boolean(\"profile_completed\").default(false), // Track if profile is completed\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const otpCodes = pgTable(\"otp_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }).notNull(),\n  code: varchar(\"code\", { length: 6 }).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  isUsed: boolean(\"is_used\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const customerProfiles = pgTable(\"customer_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id),\n  location: text(\"location\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n});\n\nexport const providerProfiles = pgTable(\"provider_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id),\n  businessName: text(\"business_name\"),\n  businessDetails: text(\"business_details\"),\n  serviceCategories: text(\"service_categories\").array(),\n  location: text(\"location\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  serviceRadius: integer(\"service_radius\").default(5), // in km\n  maxServiceRadius: integer(\"max_service_radius\").default(20),\n  status: providerStatusEnum(\"status\").default('pending'),\n  documentsUploaded: boolean(\"documents_uploaded\").default(false),\n  documents: text(\"documents\").array(), // Array of document URLs\n  gallery: text(\"gallery\").array(), // Array of image URLs for public profile\n  publicProfile: text(\"public_profile\"), // Public description for customers\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default('0'), // Average rating\n  totalJobs: integer(\"total_jobs\").default(0), // Total completed jobs\n  approvedAt: timestamp(\"approved_at\"),\n});\n\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").notNull().references(() => users.id),\n  category: text(\"category\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  originalDescription: text(\"original_description\"), // Before AI enhancement\n  budget: text(\"budget\"), // Budget range\n  location: text(\"location\").notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  status: jobStatusEnum(\"status\").default('open'),\n  unlockCount: integer(\"unlock_count\").default(0),\n  maxUnlocks: integer(\"max_unlocks\").default(3),\n  notificationsSent: boolean(\"notifications_sent\").default(false), // Track if notifications sent\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wallets = pgTable(\"wallets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  providerId: varchar(\"provider_id\").notNull().references(() => users.id),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).default('0'),\n  lastRechargeAt: timestamp(\"last_recharge_at\"),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletId: varchar(\"wallet_id\").notNull().references(() => wallets.id),\n  type: transactionTypeEnum(\"type\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  jobId: varchar(\"job_id\").references(() => jobs.id), // for unlock transactions\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const jobUnlocks = pgTable(\"job_unlocks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id),\n  providerId: varchar(\"provider_id\").notNull().references(() => users.id),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\n// Admin Settings Table\nexport const adminSettings = pgTable(\"admin_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  settingKey: text(\"setting_key\").notNull().unique(),\n  settingValue: text(\"setting_value\").notNull(),\n  category: text(\"category\").notNull(), // pricing, notifications, etc\n  description: text(\"description\"),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notifications Table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // approval, rejection, unlock_success, low_balance, manual\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Admin Actions Log\nexport const adminActionLogs = pgTable(\"admin_action_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(), // approve_provider, block_user, add_balance, etc\n  targetId: varchar(\"target_id\"), // user id, job id, etc\n  targetType: text(\"target_type\"), // user, job, wallet, etc\n  details: text(\"details\"), // additional context as JSON string\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Phase 4: Reviews and Ratings\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id),\n  customerId: varchar(\"customer_id\").notNull().references(() => users.id),\n  providerId: varchar(\"provider_id\").notNull().references(() => users.id),\n  rating: reviewRatingEnum(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  isHelpful: boolean(\"is_helpful\").default(true), // For filtering fake reviews\n  isVerified: boolean(\"is_verified\").default(false), // Admin verification\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Phase 4: Subscription Plans\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: subscriptionTypeEnum(\"type\").notNull(),\n  status: subscriptionStatusEnum(\"status\").default('active'),\n  monthlyUnlocks: integer(\"monthly_unlocks\").notNull(), // Number of free unlocks per month\n  priorityJobs: boolean(\"priority_jobs\").default(false), // Show jobs first\n  startDate: timestamp(\"start_date\").defaultNow(),\n  endDate: timestamp(\"end_date\").notNull(),\n  autoRenew: boolean(\"auto_renew\").default(true),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Phase 4: Referral System\nexport const referrals = pgTable(\"referrals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  referrerId: varchar(\"referrer_id\").notNull().references(() => users.id),\n  refereeId: varchar(\"referee_id\").notNull().references(() => users.id),\n  referralCode: varchar(\"referral_code\", { length: 20 }).notNull().unique(),\n  creditsEarned: decimal(\"credits_earned\", { precision: 10, scale: 2 }).default('0'),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Phase 4: AI Automation Logs\nexport const aiLogs = pgTable(\"ai_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").references(() => jobs.id),\n  type: aiLogTypeEnum(\"type\").notNull(),\n  originalData: text(\"original_data\"), // Original job title/description\n  processedData: text(\"processed_data\"), // AI processed version\n  confidence: decimal(\"confidence\", { precision: 3, scale: 2 }), // AI confidence score\n  action: text(\"action\"), // Action taken (e.g., 'category_changed', 'job_flagged')\n  details: text(\"details\"), // Additional details\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Phase 4: Enhanced Notifications\nexport const enhancedNotifications = pgTable(\"enhanced_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: notificationTypeEnum(\"type\").notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  actionUrl: text(\"action_url\"), // Deep link or action URL\n  isRead: boolean(\"is_read\").default(false),\n  priority: integer(\"priority\").default(1), // 1=low, 2=medium, 3=high\n  metadata: text(\"metadata\"), // JSON metadata for complex notifications\n  expiresAt: timestamp(\"expires_at\"), // Auto-expire promotional notifications\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Phase 4: SEO Landing Pages\nexport const seoPages = pgTable(\"seo_pages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  slug: varchar(\"slug\", { length: 200 }).notNull().unique(), // e.g., \"plumbers-in-delhi\"\n  city: text(\"city\").notNull(),\n  category: text(\"category\").notNull(),\n  title: text(\"title\").notNull(), // SEO title\n  description: text(\"description\").notNull(), // SEO description\n  content: text(\"content\").notNull(), // AI generated content\n  isActive: boolean(\"is_active\").default(true),\n  views: integer(\"views\").default(0),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Phase 4: Subscription Usage Tracking\nexport const subscriptionUsage = pgTable(\"subscription_usage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subscriptionId: varchar(\"subscription_id\").notNull().references(() => subscriptions.id),\n  month: integer(\"month\").notNull(), // 1-12\n  year: integer(\"year\").notNull(),\n  unlocksUsed: integer(\"unlocks_used\").default(0),\n  unlocksLimit: integer(\"unlocks_limit\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Phase 4: WhatsApp Integration\nexport const whatsappLogs = pgTable(\"whatsapp_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id),\n  customerId: varchar(\"customer_id\").notNull().references(() => users.id),\n  providerId: varchar(\"provider_id\").notNull().references(() => users.id),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }).notNull(),\n  message: text(\"message\").notNull(),\n  clicked: boolean(\"clicked\").default(false),\n  clickedAt: timestamp(\"clicked_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  customerProfile: one(customerProfiles, {\n    fields: [users.id],\n    references: [customerProfiles.userId],\n  }),\n  providerProfile: one(providerProfiles, {\n    fields: [users.id],\n    references: [providerProfiles.userId],\n  }),\n  jobs: many(jobs),\n  wallet: one(wallets, {\n    fields: [users.id],\n    references: [wallets.providerId],\n  }),\n  jobUnlocks: many(jobUnlocks),\n}));\n\nexport const customerProfilesRelations = relations(customerProfiles, ({ one }) => ({\n  user: one(users, {\n    fields: [customerProfiles.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const providerProfilesRelations = relations(providerProfiles, ({ one }) => ({\n  user: one(users, {\n    fields: [providerProfiles.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one, many }) => ({\n  customer: one(users, {\n    fields: [jobs.customerId],\n    references: [users.id],\n  }),\n  unlocks: many(jobUnlocks),\n}));\n\nexport const walletsRelations = relations(wallets, ({ one, many }) => ({\n  provider: one(users, {\n    fields: [wallets.providerId],\n    references: [users.id],\n  }),\n  transactions: many(transactions),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  wallet: one(wallets, {\n    fields: [transactions.walletId],\n    references: [wallets.id],\n  }),\n  job: one(jobs, {\n    fields: [transactions.jobId],\n    references: [jobs.id],\n  }),\n}));\n\nexport const jobUnlocksRelations = relations(jobUnlocks, ({ one }) => ({\n  job: one(jobs, {\n    fields: [jobUnlocks.jobId],\n    references: [jobs.id],\n  }),\n  provider: one(users, {\n    fields: [jobUnlocks.providerId],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const adminActionLogsRelations = relations(adminActionLogs, ({ one }) => ({\n  admin: one(users, {\n    fields: [adminActionLogs.adminId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOtpSchema = createInsertSchema(otpCodes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCustomerProfileSchema = createInsertSchema(customerProfiles).omit({\n  id: true,\n});\n\nexport const insertProviderProfileSchema = createInsertSchema(providerProfiles).omit({\n  id: true,\n  approvedAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  unlockCount: true,\n});\n\nexport const insertWalletSchema = createInsertSchema(wallets).omit({\n  id: true,\n  lastRechargeAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJobUnlockSchema = createInsertSchema(jobUnlocks).omit({\n  id: true,\n  unlockedAt: true,\n});\n\nexport const insertAdminSettingSchema = createInsertSchema(adminSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAdminActionLogSchema = createInsertSchema(adminActionLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type OtpCode = typeof otpCodes.$inferSelect;\nexport type InsertOtpCode = z.infer<typeof insertOtpSchema>;\nexport type CustomerProfile = typeof customerProfiles.$inferSelect;\nexport type InsertCustomerProfile = z.infer<typeof insertCustomerProfileSchema>;\nexport type ProviderProfile = typeof providerProfiles.$inferSelect;\nexport type InsertProviderProfile = z.infer<typeof insertProviderProfileSchema>;\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Wallet = typeof wallets.$inferSelect;\nexport type InsertWallet = z.infer<typeof insertWalletSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type JobUnlock = typeof jobUnlocks.$inferSelect;\nexport type InsertJobUnlock = z.infer<typeof insertJobUnlockSchema>;\nexport type AdminSetting = typeof adminSettings.$inferSelect;\nexport type InsertAdminSetting = z.infer<typeof insertAdminSettingSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type AdminActionLog = typeof adminActionLogs.$inferSelect;\nexport type InsertAdminActionLog = z.infer<typeof insertAdminActionLogSchema>;\n\n// Phase 4 Types\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = typeof reviews.$inferInsert;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = typeof subscriptions.$inferInsert;\nexport type Referral = typeof referrals.$inferSelect;\nexport type InsertReferral = typeof referrals.$inferInsert;\nexport type AiLog = typeof aiLogs.$inferSelect;\nexport type InsertAiLog = typeof aiLogs.$inferInsert;\nexport type EnhancedNotification = typeof enhancedNotifications.$inferSelect;\nexport type InsertEnhancedNotification = typeof enhancedNotifications.$inferInsert;\nexport type SeoPage = typeof seoPages.$inferSelect;\nexport type InsertSeoPage = typeof seoPages.$inferInsert;\nexport type SubscriptionUsage = typeof subscriptionUsage.$inferSelect;\nexport type InsertSubscriptionUsage = typeof subscriptionUsage.$inferInsert;\nexport type WhatsappLog = typeof whatsappLogs.$inferSelect;\nexport type InsertWhatsappLog = typeof whatsappLogs.$inferInsert;\n\n// Phase 4 Schemas\nexport const insertReviewSchema = createInsertSchema(reviews);\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions);\nexport const insertReferralSchema = createInsertSchema(referrals);\nexport const insertAiLogSchema = createInsertSchema(aiLogs);\nexport const insertEnhancedNotificationSchema = createInsertSchema(enhancedNotifications);\nexport const insertSeoPageSchema = createInsertSchema(seoPages);\nexport const insertSubscriptionUsageSchema = createInsertSchema(subscriptionUsage);\nexport const insertWhatsappLogSchema = createInsertSchema(whatsappLogs);\n\n// Profile completion schemas\nexport const customerProfileCompletionSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().optional(),\n  location: z.string().min(5, \"Please enter a complete address\"),\n  latitude: z.number().optional(),\n  longitude: z.number().optional(),\n});\n\nexport const providerProfileCompletionSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().optional(),\n  businessName: z.string().min(2, \"Business name is required\"),\n  businessDetails: z.string().min(20, \"Please provide detailed business information\"),\n  serviceCategories: z.array(z.string()).min(1, \"Select at least one service category\"),\n  location: z.string().min(5, \"Please enter your business address\"),\n  latitude: z.number().optional(),\n  longitude: z.number().optional(),\n  serviceRadius: z.number().min(1).max(20).default(5),\n});\n\nexport type CustomerProfileCompletion = z.infer<typeof customerProfileCompletionSchema>;\nexport type ProviderProfileCompletion = z.infer<typeof providerProfileCompletionSchema>;\n","size_bytes":20086},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { Suspense, lazy } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Home from \"@/pages/home\";\nimport Register from \"@/pages/auth/register\";\nimport Login from \"@/pages/auth/login\";\nimport CustomerDashboard from \"@/pages/customer/dashboard\";\nimport CustomerDashboardProfile from \"@/pages/customer/profile\";\nimport PostJob from \"@/pages/customer/post-job\";\nimport ProviderDashboard from \"@/pages/provider/dashboard\";\nimport EnhancedProviderDashboard from \"@/pages/provider/enhanced-dashboard\";\nimport ProviderDashboardProfile from \"@/pages/provider/profile\";\nimport ProviderWallet from \"@/pages/provider/wallet\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\n// Profile Completion Pages\nimport CustomerProfileCompletion from \"@/pages/profile-completion/customer-profile\";\nimport ProviderProfileCompletion from \"@/pages/profile-completion/provider-profile\";\n\n// Phase 1 Public Pages - Lazy loaded for better SEO\nconst JobDetails = lazy(() => import(\"@/pages/job-details\"));\nconst HowItWorksPage = lazy(() => import(\"@/pages/how-it-works\"));\nconst JoinAsProvider = lazy(() => import(\"@/pages/join-as-provider\"));\nconst ProviderProfilePage = lazy(() => import(\"@/pages/provider-profile-page\"));\nconst About = lazy(() => import(\"@/pages/about-us\"));\nconst Contact = lazy(() => import(\"@/pages/contact\"));\nconst FAQ = lazy(() => import(\"@/pages/faq\"));\nconst Blog = lazy(() => import(\"@/pages/blog\"));\nconst Privacy = lazy(() => import(\"@/pages/privacy\"));\nconst Terms = lazy(() => import(\"@/pages/terms\"));\n\nfunction Router() {\n  return (\n    <Suspense fallback={\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    }>\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        \n        {/* Auth Routes */}\n        <Route path=\"/auth/register\" component={Register} />\n        <Route path=\"/auth/login\" component={Login} />\n        \n        {/* Profile Routes */}\n        <Route path=\"/profile/select\" component={lazy(() => import(\"@/pages/profile/select\"))} />\n        <Route path=\"/profile/customer\" component={CustomerProfileCompletion} />\n        <Route path=\"/profile/provider\" component={ProviderProfileCompletion} />\n        \n        {/* Public Pages */}\n        <Route path=\"/browse-jobs\" component={lazy(() => import(\"@/pages/jobs/list\"))} />\n        <Route path=\"/jobs/:city/:category\" component={lazy(() => import(\"@/pages/jobs/list\"))} />\n        <Route path=\"/providers/list\" component={lazy(() => import(\"@/pages/providers/list\"))} />\n        <Route path=\"/jobs/list\" component={lazy(() => import(\"@/pages/jobs/list\"))} />\n        <Route path=\"/job/:jobId\" component={JobDetails} />\n        <Route path=\"/how-it-works\" component={HowItWorksPage} />\n        <Route path=\"/post-job\" component={PostJob} />\n        <Route path=\"/join-as-provider\" component={JoinAsProvider} />\n        <Route path=\"/provider/:providerId\" component={ProviderProfilePage} />\n        <Route path=\"/about-us\" component={About} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/faq\" component={FAQ} />\n        <Route path=\"/blog\" component={Blog} />\n        <Route path=\"/privacy\" component={Privacy} />\n        <Route path=\"/terms\" component={Terms} />\n        \n        {/* Customer Routes */}\n        <Route path=\"/customer/dashboard\" component={CustomerDashboard} />\n        <Route path=\"/customer/profile\" component={CustomerDashboardProfile} />\n        <Route path=\"/customer/post-job\" component={PostJob} />\n        \n        {/* Provider Routes */}\n        <Route path=\"/provider/dashboard\" component={ProviderDashboard} />\n        <Route path=\"/provider/enhanced-dashboard\" component={EnhancedProviderDashboard} />\n        <Route path=\"/provider/profile\" component={ProviderDashboardProfile} />\n        <Route path=\"/provider/wallet\" component={ProviderWallet} />\n        \n        {/* Admin Routes */}\n        <Route path=\"/admin/dashboard\" component={lazy(() => import(\"@/pages/admin/sidebar-dashboard\"))} />\n        \n        {/* Fallback to 404 */}\n        <Route component={NotFound} />\n      </Switch>\n    </Suspense>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"serviceconnect-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5005},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(0, 0%, 0%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 0%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 0%);\n  --primary: hsl(261, 73%, 56%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(261, 73%, 56%);\n  --secondary-foreground: hsl(0, 0%, 0%);\n  --muted: hsl(210, 30%, 96%);\n  --muted-foreground: hsl(0, 0%, 0%);\n  --accent: hsl(261, 73%, 56%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 75%, 55%);\n  --destructive-foreground: hsl(0, 0%, 0%);\n  --border: hsl(210, 30%, 85%);\n  --input: hsl(210, 30%, 90%);\n  --ring: hsl(214, 84%, 42%);\n  --chart-1: hsl(214, 84%, 42%);\n  --chart-2: hsl(195, 88%, 42%);\n  --chart-3: hsl(24, 95%, 53%);\n  --chart-4: hsl(147, 85%, 41%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 20%, 15%);\n  --sidebar-primary: hsl(214, 84%, 42%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 30%, 96%);\n  --sidebar-accent-foreground: hsl(214, 84%, 42%);\n  --sidebar-border: hsl(210, 30%, 85%);\n  --sidebar-ring: hsl(214, 84%, 42%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214, 84%, 42%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214, 84%, 42%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214, 84%, 42%, 0.00), 0px 1px 2px -1px hsl(214, 84%, 42%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214, 84%, 42%, 0.00), 0px 1px 2px -1px hsl(214, 84%, 42%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214, 84%, 42%, 0.00), 0px 2px 4px -1px hsl(214, 84%, 42%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214, 84%, 42%, 0.00), 0px 4px 6px -1px hsl(214, 84%, 42%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214, 84%, 42%, 0.00), 0px 8px 10px -1px hsl(214, 84%, 42%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214, 84%, 42%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 12%, 8%);\n  --foreground: hsl(0, 0%, 0%);\n  --card: hsl(222, 12%, 12%);\n  --card-foreground: hsl(0, 0%, 0%);\n  --popover: hsl(222, 12%, 12%);\n  --popover-foreground: hsl(0, 0%, 0%);\n  --primary: hsl(214, 84%, 52%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(195, 88%, 52%);\n  --secondary-foreground: hsl(0, 0%, 0%);\n  --muted: hsl(222, 12%, 15%);\n  --muted-foreground: hsl(0, 0%, 0%);\n  --accent: hsl(24, 95%, 63%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 75%, 55%);\n  --destructive-foreground: hsl(0, 0%, 0%);\n  --border: hsl(222, 12%, 20%);\n  --input: hsl(222, 12%, 18%);\n  --ring: hsl(214, 84%, 52%);\n  --chart-1: hsl(214, 84%, 52%);\n  --chart-2: hsl(195, 88%, 52%);\n  --chart-3: hsl(24, 95%, 63%);\n  --chart-4: hsl(147, 85%, 41%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(222, 12%, 12%);\n  --sidebar-foreground: hsl(210, 20%, 90%);\n  --sidebar-primary: hsl(214, 84%, 52%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(222, 12%, 15%);\n  --sidebar-accent-foreground: hsl(214, 84%, 52%);\n  --sidebar-border: hsl(222, 12%, 20%);\n  --sidebar-ring: hsl(214, 84%, 52%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214, 84%, 52%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214, 84%, 52%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214, 84%, 52%, 0.00), 0px 1px 2px -1px hsl(214, 84%, 52%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214, 84%, 52%, 0.00), 0px 1px 2px -1px hsl(214, 84%, 52%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214, 84%, 52%, 0.00), 0px 2px 4px -1px hsl(214, 84%, 52%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214, 84%, 52%, 0.00), 0px 4px 6px -1px hsl(214, 84%, 52%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214, 84%, 52%, 0.00), 0px 8px 10px -1px hsl(214, 84%, 52%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214, 84%, 52%, 0.00);\n}\n\n.hero-gradient {\n  background: linear-gradient(135deg, hsl(214, 84%, 42%) 0%, hsl(195, 88%, 42%) 100%);\n}\n\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.service-category:hover {\n  background: hsl(214, 84%, 50%);\n  color: white;\n}\n\n.fade-in {\n  opacity: 0;\n  transform: translateY(20px);\n  animation: fadeInUp 0.6s ease forwards;\n}\n\n@keyframes fadeInUp {\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n@keyframes slideInFromLeft {\n  0% {\n    opacity: 0;\n    transform: translateX(-100px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideInFromRight {\n  0% {\n    opacity: 0;\n    transform: translateX(100px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-slide-in-left {\n  animation: slideInFromLeft 0.8s ease-out forwards;\n}\n\n.animate-slide-in-right {\n  animation: slideInFromRight 0.8s ease-out forwards;\n}\n\n/* Modern gradient backgrounds */\n.gradient-bg-1 {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.gradient-bg-2 {\n  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n}\n\n.gradient-bg-3 {\n  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n}\n\n/* Phone Input Styles */\n.PhoneInput {\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\n.PhoneInputInput {\n  flex: 1;\n  font-size: 1rem;\n  padding: 0.5rem 0.75rem;\n  border: 1px solid hsl(var(--border));\n  border-radius: calc(var(--radius) - 2px);\n  background: hsl(var(--background));\n  color: hsl(var(--foreground));\n  transition: border-color 0.2s;\n  border-radius: 0 calc(var(--radius) - 2px) calc(var(--radius) - 2px) 0;\n  border-left: none;\n}\n\n.PhoneInputInput:focus {\n  outline: none;\n  border-color: hsl(var(--ring));\n  box-shadow: 0 0 0 2px hsl(var(--ring) / 0.2);\n}\n\n.PhoneInputCountry {\n  display: flex;\n  align-items: center;\n  padding: 0.5rem;\n  border: 1px solid hsl(var(--border));\n  border-right: none;\n  border-radius: calc(var(--radius) - 2px) 0 0 calc(var(--radius) - 2px);\n  background: hsl(var(--background));\n  cursor: pointer;\n  transition: background-color 0.2s;\n  min-width: fit-content;\n}\n\n.PhoneInputCountry:hover {\n  background: hsl(var(--muted));\n}\n\n.PhoneInputCountryIcon {\n  width: 1.2em;\n  height: 1.2em;\n  margin-right: 0.5rem;\n  border-radius: 2px;\n}\n\n.PhoneInputCountrySelect {\n  border: none;\n  background: transparent;\n  font-size: 0.875rem;\n  color: hsl(var(--foreground));\n  cursor: pointer;\n  outline: none;\n}\n\n.PhoneInputCountrySelectArrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.25rem;\n  border-left: 0.3em solid transparent;\n  border-right: 0.3em solid transparent;\n  border-top: 0.3em solid hsl(var(--muted-foreground));\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Better color combination for buttons and inputs - exclude admin panel */\n  body:not([data-admin]) button, \n  body:not([data-admin]) input, \n  body:not([data-admin]) textarea, \n  body:not([data-admin]) select,\n  .PhoneInputInput,\n  .PhoneInputCountrySelect {\n    color: #1f2937 !important;\n    background-color: #f9fafb !important;\n    border: 1px solid #d1d5db !important;\n  }\n  \n  /* Exclude admin routes from black styling */\n  [data-testid*=\"admin\"] button,\n  [data-testid*=\"admin\"] input,\n  [data-testid*=\"admin\"] textarea,\n  [data-testid*=\"admin\"] select {\n    color: inherit !important;\n    background-color: inherit !important;\n  }\n\n  /* Better placeholder colors - exclude admin */\n  body:not([data-admin]) input::placeholder,\n  body:not([data-admin]) textarea::placeholder,\n  .PhoneInputInput::placeholder {\n    color: #6b7280 !important;\n    opacity: 1;\n  }\n  \n  /* Exclude admin from black placeholder styling */\n  [data-testid*=\"admin\"] input::placeholder,\n  [data-testid*=\"admin\"] textarea::placeholder {\n    color: inherit !important;\n    opacity: inherit !important;\n  }\n\n  /* Better button content colors - exclude admin */\n  body:not([data-admin]) button * {\n    color: white !important;\n  }\n  \n  /* Better button styling - exclude admin */\n  body:not([data-admin]) button {\n    background-color: #3b82f6 !important;\n    border-color: #3b82f6 !important;\n    transition: all 0.2s ease !important;\n  }\n  \n  body:not([data-admin]) button:hover {\n    background-color: #2563eb !important;\n    border-color: #2563eb !important;\n    transform: translateY(-1px) !important;\n  }\n  \n  /* Exclude admin routes from black button styling */\n  [data-testid*=\"admin\"] button * {\n    color: inherit !important;\n  }\n  \n  [data-testid*=\"admin\"] button {\n    background-color: inherit !important;\n    border-color: inherit !important;\n  }\n\n  /* Better label colors - exclude admin */\n  body:not([data-admin]) label {\n    color: #374151 !important;\n    font-weight: 500 !important;\n  }\n  \n  /* Exclude admin from label styling */\n  [data-testid*=\"admin\"] label {\n    color: inherit !important;\n    font-weight: inherit !important;\n  }\n}\n","size_bytes":9316},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/browse-jobs-preview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Clock, ArrowRight } from \"lucide-react\";\n\ninterface Job {\n  id: string;\n  title: string;\n  category: string;\n  description: string;\n  location: string;\n  createdAt: string;\n  status: \"open\" | \"closed\";\n}\n\nexport function BrowseJobsPreview() {\n  const [, setLocation] = useLocation();\n  \n  const { data: jobsData, isLoading } = useQuery({\n    queryKey: [\"/api/jobs/recent\"],\n    enabled: true,\n  });\n\n  const recentJobs: Job[] = (jobsData as any)?.jobs || [];\n\n  const JobCard = ({ job }: { job: Job }) => (\n    <Card className=\"hover:shadow-md transition-shadow cursor-pointer\" data-testid={`preview-job-${job.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg line-clamp-2 mb-2\" data-testid={`preview-job-title-${job.id}`}>\n              {job.title}\n            </CardTitle>\n            <div className=\"flex items-center gap-3 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-1\">\n                <MapPin size={12} />\n                <span>{job.location}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Clock size={12} />\n                <span>{job.createdAt}</span>\n              </div>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" data-testid={`preview-job-category-${job.id}`}>\n            {job.category}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-muted-foreground text-sm line-clamp-2 mb-3\">\n          {job.description}\n        </p>\n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          onClick={() => setLocation(`/job/${job.id}`)}\n          data-testid={`preview-job-view-${job.id}`}\n        >\n          View Details\n        </Button>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <section className=\"py-16 bg-background\" data-testid=\"browse-jobs-preview\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"preview-section-title\">\n            Latest Job Opportunities\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"preview-section-description\">\n            Discover the newest service requests from customers in your area\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading latest jobs...</p>\n          </div>\n        ) : (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\" data-testid=\"preview-jobs-grid\">\n            {recentJobs.map(job => (\n              <JobCard key={job.id} job={job} />\n            ))}\n          </div>\n        )}\n\n        <div className=\"text-center\">\n          <Button \n            size=\"lg\"\n            onClick={() => setLocation(\"/jobs/list\")}\n            className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-3 rounded-lg font-semibold transition-colors\"\n            data-testid=\"view-all-jobs-cta\"\n          >\n            View All Jobs\n            <ArrowRight size={16} className=\"ml-2\" />\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":3785},"client/src/components/featured-providers.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Star, MapPin } from \"lucide-react\";\n\nconst featuredProviders = [\n  {\n    id: \"sarah-johnson\",\n    name: \"Sarah Johnson\",\n    service: \"Professional Cleaning\",\n    rating: 4.9,\n    description: \"5+ years experience in residential and commercial cleaning. Eco-friendly products used.\",\n    location: \"Downtown Area\",\n    image: \"https://images.unsplash.com/photo-1607990281513-2c110a25bd8c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\"\n  },\n  {\n    id: \"mike-rodriguez\",\n    name: \"Mike Rodriguez\",\n    service: \"Licensed Electrician\",\n    rating: 4.8,\n    description: \"Licensed electrician with 10+ years experience. Emergency repairs and installations.\",\n    location: \"North Side\",\n    image: \"https://images.unsplash.com/photo-1621905252507-b35492cc74b4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\"\n  },\n  {\n    id: \"emma-wilson\",\n    name: \"Emma Wilson\",\n    service: \"Hair Stylist\",\n    rating: 5.0,\n    description: \"Expert in modern cuts, color, and styling. Mobile service available for special events.\",\n    location: \"Westside\",\n    image: \"https://images.unsplash.com/photo-1560066984-138dadb4c035?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\"\n  }\n];\n\nexport function FeaturedProviders() {\n  return (\n    <section id=\"providers\" className=\"py-20 bg-muted/30\" data-testid=\"featured-providers-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-providers-title\">Featured Service Providers</h2>\n          <p className=\"text-lg text-muted-foreground\" data-testid=\"text-providers-description\">Meet some of our top-rated professionals</p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\" data-testid=\"providers-grid\">\n          {featuredProviders.map((provider) => (\n            <div key={provider.id} className=\"bg-card rounded-xl overflow-hidden shadow-sm card-hover\" data-testid={`card-provider-${provider.id}`}>\n              <img \n                src={provider.image} \n                alt={`${provider.name} - ${provider.service}`} \n                className=\"w-full h-48 object-cover\"\n                data-testid={`img-provider-${provider.id}`}\n              />\n              <div className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\" data-testid={`text-name-${provider.id}`}>{provider.name}</h3>\n                    <p className=\"text-muted-foreground\" data-testid={`text-service-${provider.id}`}>{provider.service}</p>\n                  </div>\n                  <div className=\"ml-auto\">\n                    <div className=\"flex items-center\">\n                      <Star className=\"text-yellow-400 fill-current\" size={16} />\n                      <span className=\"ml-1 font-semibold\" data-testid={`text-rating-${provider.id}`}>{provider.rating}</span>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-muted-foreground text-sm mb-4\" data-testid={`text-description-${provider.id}`}>\n                  {provider.description}\n                </p>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    <MapPin className=\"inline mr-1\" size={14} />\n                    <span data-testid={`text-location-${provider.id}`}>{provider.location}</span>\n                  </span>\n                  <Button size=\"sm\" data-testid={`button-view-profile-${provider.id}`}>\n                    View Profile\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"text-center mt-12\">\n          <Button className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-3 rounded-lg font-semibold transition-colors\" data-testid=\"button-view-all-providers\">\n            View All Providers\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4291},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport function Footer() {\n  const customerLinks = [\n    { href: \"/jobs/list\", label: \"Browse Services\" },\n    { href: \"/customer/post-job\", label: \"Post a Job\" },\n    { href: \"/how-it-works\", label: \"How It Works\" },\n    { href: \"/contact\", label: \"Customer Support\" },\n  ];\n\n  const providerLinks = [\n    { href: \"/join-as-provider\", label: \"Join as Provider\" },\n    { href: \"/provider/dashboard\", label: \"Provider Dashboard\" },\n    { href: \"/blog\", label: \"Resources\" },\n    { href: \"/faq\", label: \"Provider Support\" },\n  ];\n\n  const companyLinks = [\n    { href: \"/about-us\", label: \"About Us\" },\n    { href: \"/blog\", label: \"Blog\" },\n    { href: \"/faq\", label: \"FAQ\" },\n    { href: \"/contact\", label: \"Contact\" },\n  ];\n\n  const legalLinks = [\n    { href: \"/privacy\", label: \"Privacy Policy\" },\n    { href: \"/terms\", label: \"Terms of Service\" },\n    { href: \"/contact\", label: \"Support\" },\n  ];\n\n  return (\n    <footer className=\"bg-card border-t\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div data-testid=\"footer-brand\">\n            <h3 className=\"text-2xl font-bold text-primary mb-4\" data-testid=\"text-brand-name\">ServiceConnect</h3>\n            <p className=\"text-muted-foreground mb-4\" data-testid=\"text-brand-description\">\n              Connecting customers with trusted local service providers.\n            </p>\n            <div className=\"flex space-x-4\" data-testid=\"social-links\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-facebook\">\n                <span className=\"sr-only\">Facebook</span>\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"/>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-twitter\">\n                <span className=\"sr-only\">Twitter</span>\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n          \n          <div data-testid=\"footer-customers\">\n            <h4 className=\"font-semibold mb-4\" data-testid=\"text-customers-title\">For Customers</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              {customerLinks.map((link, index) => (\n                <li key={index}>\n                  <Link href={link.href} className=\"hover:text-primary\" data-testid={`link-customer-${index}`}>\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          <div data-testid=\"footer-providers\">\n            <h4 className=\"font-semibold mb-4\" data-testid=\"text-providers-title\">For Providers</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              {providerLinks.map((link, index) => (\n                <li key={index}>\n                  <Link href={link.href} className=\"hover:text-primary\" data-testid={`link-provider-${index}`}>\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          <div data-testid=\"footer-company\">\n            <h4 className=\"font-semibold mb-4\" data-testid=\"text-company-title\">Company</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              {companyLinks.map((link, index) => (\n                <li key={index}>\n                  <Link href={link.href} className=\"hover:text-primary\" data-testid={`link-company-${index}`}>\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-12 pt-8\" data-testid=\"footer-bottom\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-muted-foreground text-sm\" data-testid=\"text-copyright\">\n              © 2024 ServiceConnect. All rights reserved.\n            </p>\n            <div className=\"flex space-x-6 text-sm text-muted-foreground mt-4 md:mt-0\" data-testid=\"legal-links\">\n              {legalLinks.map((link, index) => (\n                <Link key={index} href={link.href} className=\"hover:text-primary\" data-testid={`link-legal-${index}`}>\n                  {link.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5650},"client/src/components/hero-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, MapPin, Star, Users, CheckCircle, Shield, Clock } from \"lucide-react\";\nimport { SearchAutocomplete } from \"@/components/search/search-autocomplete\";\nimport heroImage from \"@assets/generated_images/Service_marketplace_hero_image_d2b2ae8f.png\";\nimport serviceProvidersImage from \"@assets/generated_images/Professional_service_providers_illustration_42cf6597.png\";\n\ninterface HeroSectionProps {\n  onCustomerSignup: () => void;\n  onProviderSignup: () => void;\n}\n\nexport function HeroSection({ onCustomerSignup, onProviderSignup }: HeroSectionProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [location, setLocation] = useState(\"Bangalore\");\n\n  return (\n    <section className=\"relative bg-gradient-to-br from-blue-50 via-white to-indigo-50 py-20 md:py-28\" data-testid=\"hero-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          {/* Left Content */}\n          <div className=\"text-center lg:text-left\">\n            <div className=\"inline-flex items-center bg-blue-100 text-blue-800 px-4 py-2 rounded-full text-sm font-medium mb-6\">\n              <Shield className=\"w-4 h-4 mr-2\" />\n              Trusted by 10,000+ customers\n            </div>\n            \n            <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 mb-6 leading-tight\" data-testid=\"text-hero-title\">\n              Professional <span className=\"text-blue-600\">Home Services</span> at Your Doorstep\n            </h1>\n            \n            <p className=\"text-xl text-gray-600 mb-8 max-w-lg\">\n              Connect with verified service professionals for all your home needs. Fast, reliable, and affordable.\n            </p>\n\n            {/* Search Section */}\n            <div className=\"mb-8\">\n              <SearchAutocomplete />\n            </div>\n\n            {/* Trust Indicators */}\n            <div className=\"flex flex-wrap justify-center lg:justify-start items-center gap-6 text-sm text-gray-600 mb-8\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                <span>Verified Professionals</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"w-5 h-5 text-blue-500\" />\n                <span>Same Day Service</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5 text-purple-500\" />\n                <span>100% Secure</span>\n              </div>\n            </div>\n\n            {/* Statistics */}\n            <div className=\"flex justify-center lg:justify-start items-center gap-8\">\n              <div className=\"text-center\" data-testid=\"rating-stat\">\n                <div className=\"text-3xl font-bold text-gray-900\">4.8⭐</div>\n                <div className=\"text-sm text-gray-600\">Service Rating</div>\n              </div>\n              \n              <div className=\"text-center\" data-testid=\"customers-stat\">\n                <div className=\"text-3xl font-bold text-gray-900\">10K+</div>\n                <div className=\"text-sm text-gray-600\">Happy Customers</div>\n              </div>\n\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-gray-900\">500+</div>\n                <div className=\"text-sm text-gray-600\">Service Partners</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Right Content - Hero Image */}\n          <div className=\"relative\">\n            <div className=\"relative z-10\">\n              <img\n                src={heroImage}\n                alt=\"Professional home services\"\n                className=\"w-full h-auto rounded-2xl shadow-2xl\"\n              />\n            </div>\n            {/* Decorative elements */}\n            <div className=\"absolute -top-4 -right-4 w-72 h-72 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse\"></div>\n            <div className=\"absolute -bottom-4 -left-4 w-72 h-72 bg-gradient-to-r from-pink-400 to-blue-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse delay-75\"></div>\n          </div>\n        </div>\n\n        {/* Service Providers Section */}\n        <div className=\"mt-20 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n            Meet Our Expert Service Providers\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-12 max-w-3xl mx-auto\">\n            All our service professionals are background-verified, trained, and committed to delivering exceptional service quality.\n          </p>\n          \n          <div className=\"relative max-w-4xl mx-auto\">\n            <img\n              src={serviceProvidersImage}\n              alt=\"Professional service providers\"\n              className=\"w-full h-auto rounded-2xl shadow-lg\"\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5164},"client/src/components/how-it-works.tsx":{"content":"export function HowItWorks() {\n  const customerSteps = [\n    {\n      number: 1,\n      title: \"Register with Phone\",\n      description: \"Sign up using your phone number and verify with OTP for secure access.\"\n    },\n    {\n      number: 2,\n      title: \"Complete Your Profile\",\n      description: \"Add your name, email, and location for personalized service recommendations.\"\n    },\n    {\n      number: 3,\n      title: \"Book Services\",\n      description: \"Browse and book verified service providers in your area with transparent pricing.\"\n    },\n    {\n      number: 4,\n      title: \"Track & Review\",\n      description: \"Monitor your booking status and leave reviews to help other customers.\"\n    }\n  ];\n\n  const providerSteps = [\n    {\n      number: 1,\n      title: \"Register & Verify\",\n      description: \"Sign up with phone verification and submit business documents for approval.\"\n    },\n    {\n      number: 2,\n      title: \"Create Your Profile\",\n      description: \"Add business details, service areas, pricing, and showcase your expertise.\"\n    },\n    {\n      number: 3,\n      title: \"Receive Bookings\",\n      description: \"Get notified about new service requests and communicate with customers.\"\n    },\n    {\n      number: 4,\n      title: \"Grow Your Business\",\n      description: \"Build your reputation through reviews and expand your customer base.\"\n    }\n  ];\n\n  return (\n    <section id=\"how-it-works\" className=\"py-20 bg-background\" data-testid=\"how-it-works-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-how-it-works-title\">How It Works</h2>\n          <p className=\"text-lg text-muted-foreground\" data-testid=\"text-how-it-works-description\">Simple steps to connect with the right professionals</p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-16\">\n          {/* For Customers */}\n          <div data-testid=\"customer-steps\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-customer-steps-title\">For Customers</h3>\n            <div className=\"space-y-8\">\n              {customerSteps.map((step) => (\n                <div key={step.number} className=\"flex items-start\" data-testid={`customer-step-${step.number}`}>\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-10 h-10 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-bold\" data-testid={`step-number-${step.number}`}>\n                      {step.number}\n                    </div>\n                  </div>\n                  <div className=\"ml-4\">\n                    <h4 className=\"text-lg font-semibold mb-2\" data-testid={`step-title-${step.number}`}>{step.title}</h4>\n                    <p className=\"text-muted-foreground\" data-testid={`step-description-${step.number}`}>{step.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* For Service Providers */}\n          <div data-testid=\"provider-steps\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-provider-steps-title\">For Service Providers</h3>\n            <div className=\"space-y-8\">\n              {providerSteps.map((step) => (\n                <div key={step.number} className=\"flex items-start\" data-testid={`provider-step-${step.number}`}>\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-10 h-10 bg-secondary text-secondary-foreground rounded-full flex items-center justify-center font-bold\" data-testid={`provider-step-number-${step.number}`}>\n                      {step.number}\n                    </div>\n                  </div>\n                  <div className=\"ml-4\">\n                    <h4 className=\"text-lg font-semibold mb-2\" data-testid={`provider-step-title-${step.number}`}>{step.title}</h4>\n                    <p className=\"text-muted-foreground\" data-testid={`provider-step-description-${step.number}`}>{step.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4251},"client/src/components/mobile-app-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Smartphone, Download, Star, Users } from \"lucide-react\";\nimport mobileAppImage from \"@assets/generated_images/Mobile_app_interface_mockup_68f73536.png\";\n\nexport function MobileAppSection() {\n  return (\n    <section className=\"py-20 bg-gradient-to-r from-gray-50 to-blue-50\" data-testid=\"mobile-app-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          {/* Left Content */}\n          <div>\n            <div className=\"inline-flex items-center bg-blue-100 text-blue-800 px-4 py-2 rounded-full text-sm font-medium mb-6\">\n              <Smartphone className=\"w-4 h-4 mr-2\" />\n              Now Available on Mobile\n            </div>\n            \n            <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\" data-testid=\"text-mobile-app-title\">\n              Book Services <span className=\"text-blue-600\">On The Go</span>\n            </h2>\n            \n            <p className=\"text-xl text-gray-600 mb-8 max-w-lg\" data-testid=\"text-mobile-app-description\">\n              Download our mobile app for instant booking, real-time tracking, and seamless payment experience. Available on iOS and Android.\n            </p>\n\n            {/* App Features */}\n            <div className=\"space-y-4 mb-8\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                  <Download className=\"w-4 h-4 text-green-600\" />\n                </div>\n                <span className=\"text-gray-700\">Instant Service Booking</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Star className=\"w-4 h-4 text-blue-600\" />\n                </div>\n                <span className=\"text-gray-700\">Real-time Service Tracking</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                  <Users className=\"w-4 h-4 text-purple-600\" />\n                </div>\n                <span className=\"text-gray-700\">24/7 Customer Support</span>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row items-start gap-4\" data-testid=\"app-store-buttons\">\n              <Button \n                className=\"inline-flex items-center bg-black hover:bg-gray-900 text-white px-8 py-4 rounded-xl font-semibold transition-all transform hover:scale-105 shadow-lg\"\n                data-testid=\"button-app-store\"\n              >\n                <div className=\"text-left\">\n                  <div className=\"text-xs opacity-80\">Download on the</div>\n                  <div className=\"text-lg\">App Store</div>\n                </div>\n              </Button>\n              \n              <Button \n                className=\"inline-flex items-center bg-black hover:bg-gray-900 text-white px-8 py-4 rounded-xl font-semibold transition-all transform hover:scale-105 shadow-lg\"\n                data-testid=\"button-google-play\"\n              >\n                <div className=\"text-left\">\n                  <div className=\"text-xs opacity-80\">Get it on</div>\n                  <div className=\"text-lg\">Google Play</div>\n                </div>\n              </Button>\n            </div>\n\n            {/* App Stats */}\n            <div className=\"flex items-center gap-8 mt-8 pt-8 border-t border-gray-200\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-900\">50K+</div>\n                <div className=\"text-sm text-gray-600\">App Downloads</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-900\">4.9⭐</div>\n                <div className=\"text-sm text-gray-600\">App Rating</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Right Content - Mobile App Image */}\n          <div className=\"relative\">\n            <div className=\"relative z-10\">\n              <img\n                src={mobileAppImage}\n                alt=\"Mobile app interface\"\n                className=\"w-full max-w-md mx-auto h-auto rounded-2xl shadow-2xl\"\n              />\n            </div>\n            {/* Decorative background */}\n            <div className=\"absolute inset-0 bg-gradient-to-r from-blue-400 to-purple-500 rounded-2xl transform rotate-3 opacity-10\"></div>\n            <div className=\"absolute -top-4 -right-4 w-32 h-32 bg-gradient-to-r from-pink-400 to-blue-400 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-pulse\"></div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4916},"client/src/components/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from \"@/components/ui/dropdown-menu\";\nimport { Menu, X, User, Settings, LogOut, BarChart3 } from \"lucide-react\";\n\ninterface User {\n  id: string;\n  name?: string;\n  phoneNumber: string;\n  userType: \"customer\" | \"provider\" | \"admin\";\n}\n\ninterface NavbarProps {\n  user?: User;\n  onSignIn: () => void;\n  onSignOut?: () => void;\n}\n\nexport function Navbar({ user, onSignIn, onSignOut }: NavbarProps) {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const navItems = [\n    { href: \"/jobs/list\", label: \"Jobs\" },\n    { href: \"/providers/list\", label: \"Providers\" },\n    { href: \"/how-it-works\", label: \"How It Works\" },\n    { href: \"/about-us\", label: \"About\" },\n  ];\n\n  const getDashboardLink = () => {\n    if (!user) return \"/\";\n    switch (user.userType) {\n      case \"customer\":\n        return \"/customer/dashboard\";\n      case \"provider\":\n        return \"/provider/dashboard\";\n      case \"admin\":\n        return \"/admin/dashboard\";\n      default:\n        return \"/\";\n    }\n  };\n\n  return (\n    <nav className=\"bg-white border-b border-gray-100 sticky top-0 z-50\" data-testid=\"navbar\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" data-testid=\"link-home\" className=\"flex items-center gap-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">JC</span>\n              </div>\n              <h1 className=\"text-xl font-bold text-primary\">JC Bid</h1>\n            </Link>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:block\">\n            <div className=\"flex items-center space-x-6\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className=\"text-gray-600 hover:text-primary text-sm font-medium transition-colors\"\n                  data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* Auth Buttons */}\n          <div className=\"flex items-center space-x-3\">\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"user-dropdown-trigger\">\n                    <User size={16} className=\"mr-2\" />\n                    {user.name || user.phoneNumber}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                  <DropdownMenuItem asChild>\n                    <Link href={getDashboardLink()} data-testid=\"link-dashboard\" className=\"flex items-center\">\n                      <BarChart3 size={16} className=\"mr-2\" />\n                      Dashboard\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href={`/${user.userType}/profile`} data-testid=\"link-profile\" className=\"flex items-center\">\n                      <Settings size={16} className=\"mr-2\" />\n                      Update Profile\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={onSignOut} data-testid=\"button-logout\" className=\"flex items-center\">\n                    <LogOut size={16} className=\"mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Button \n                variant=\"ghost\" \n                onClick={onSignIn}\n                data-testid=\"button-sign-in\"\n              >\n                Sign In\n              </Button>\n            )}\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMobileMenuOpen ? <X size={20} /> : <Menu size={20} />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden pb-4\" data-testid=\"mobile-menu\">\n            <div className=\"space-y-2\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className=\"block text-muted-foreground hover:text-primary px-3 py-2 rounded-md text-sm font-medium\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  data-testid={`mobile-link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5454},"client/src/components/service-categories.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { \n  Home, \n  Wrench, \n  Scissors, \n  Car, \n  Laptop, \n  Paintbrush, \n  Sparkles,\n  Zap,\n  Settings,\n  Users,\n  Car as CarIcon,\n  BookOpen,\n  Heart,\n  Camera,\n  UtensilsCrossed,\n  PawPrint\n} from \"lucide-react\";\n\nconst iconMap: { [key: string]: any } = {\n  \"Home Cleaning\": Home,\n  \"Plumbing\": Wrench,\n  \"Electrical Work\": Zap,\n  \"Carpentry\": Settings,\n  \"Painting\": Paintbrush,\n  \"HVAC\": Settings,\n  \"Appliance Repair\": Laptop,\n  \"Gardening\": Sparkles,\n  \"Beauty & Spa\": Scissors,\n  \"Auto Services\": Car,\n  \"Tech Support\": Laptop,\n  \"Tutoring\": BookOpen,\n  \"Pet Care\": PawPrint,\n  \"Moving Services\": Users,\n  \"Photography\": Camera,\n  \"Catering\": UtensilsCrossed,\n  \"Other\": Settings,\n};\n\nexport function ServiceCategories() {\n  const { data: categoriesData } = useQuery({\n    queryKey: [\"/api/categories\"],\n    enabled: true,\n  });\n\n  const categories = (categoriesData as any)?.categories || [];\n\n  return (\n    <section className=\"py-8 bg-white\" data-testid=\"service-categories-section\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        \n        {/* Categories Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4\" data-testid=\"categories-grid\">\n          {categories.slice(0, 8).map((category: string) => {\n            const IconComponent = iconMap[category] || Settings;\n            const categoryId = category.toLowerCase().replace(/\\s+/g, '-');\n            \n            return (\n              <div \n                key={categoryId}\n                className=\"flex flex-col items-center p-4 rounded-xl hover:shadow-md transition-shadow cursor-pointer group\"\n                data-testid={`category-${categoryId}`}\n              >\n                <div className=\"w-14 h-14 rounded-full bg-gray-100 flex items-center justify-center mb-3 group-hover:bg-primary/10 transition-colors\">\n                  <IconComponent className=\"w-7 h-7 text-gray-600 group-hover:text-primary\" />\n                </div>\n                <span className=\"text-sm font-medium text-gray-800 text-center leading-tight\">\n                  {category}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2264},"client/src/components/testimonials.tsx":{"content":"import { Star } from \"lucide-react\";\n\nconst testimonials = [\n  {\n    id: \"jessica\",\n    content: \"Found an amazing house cleaner through ServiceConnect. The booking process was so easy and the service was exceptional. Highly recommend!\",\n    name: \"Jessica Thompson\",\n    location: \"Phoenix, AZ\",\n    image: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"\n  },\n  {\n    id: \"david\",\n    content: \"As a service provider, this platform has helped me grow my plumbing business significantly. Great customer support!\",\n    name: \"David Chen\",\n    location: \"Licensed Plumber\",\n    image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"\n  },\n  {\n    id: \"robert\",\n    content: \"Love how easy it is to find reliable contractors. The review system gives me confidence in who I'm hiring.\",\n    name: \"Robert Martinez\",\n    location: \"Denver, CO\",\n    image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"\n  }\n];\n\nexport function Testimonials() {\n  return (\n    <section className=\"py-20 bg-background\" data-testid=\"testimonials-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-testimonials-title\">What Our Customers Say</h2>\n          <p className=\"text-lg text-muted-foreground\" data-testid=\"text-testimonials-description\">Real reviews from satisfied customers</p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\" data-testid=\"testimonials-grid\">\n          {testimonials.map((testimonial) => (\n            <div key={testimonial.id} className=\"bg-card rounded-xl p-8 shadow-sm card-hover\" data-testid={`card-testimonial-${testimonial.id}`}>\n              <div className=\"flex mb-4\" data-testid={`stars-${testimonial.id}`}>\n                {[...Array(5)].map((_, i) => (\n                  <Star key={i} className=\"text-yellow-400 fill-current\" size={16} />\n                ))}\n              </div>\n              <p className=\"text-card-foreground mb-6\" data-testid={`text-content-${testimonial.id}`}>\n                \"{testimonial.content}\"\n              </p>\n              <div className=\"flex items-center\">\n                <img \n                  src={testimonial.image} \n                  alt={testimonial.name} \n                  className=\"w-12 h-12 rounded-full mr-4\"\n                  data-testid={`img-avatar-${testimonial.id}`}\n                />\n                <div>\n                  <h4 className=\"font-semibold\" data-testid={`text-name-${testimonial.id}`}>{testimonial.name}</h4>\n                  <p className=\"text-muted-foreground text-sm\" data-testid={`text-location-${testimonial.id}`}>{testimonial.location}</p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3156},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1600},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { Users, Target, Heart, Shield, Award, TrendingUp } from \"lucide-react\";\n\nexport default function About() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null);\n\n  const stats = [\n    { icon: <Users size={24} />, value: \"10,000+\", label: \"Active Users\" },\n    { icon: <Award size={24} />, value: \"50,000+\", label: \"Jobs Completed\" },\n    { icon: <Shield size={24} />, value: \"5,000+\", label: \"Verified Providers\" },\n    { icon: <TrendingUp size={24} />, value: \"95%\", label: \"Success Rate\" }\n  ];\n\n  const values = [\n    {\n      icon: <Target className=\"text-primary\" size={32} />,\n      title: \"Our Mission\",\n      description: \"To connect skilled service providers with customers who need their expertise, creating opportunities and solving problems in local communities.\"\n    },\n    {\n      icon: <Heart className=\"text-primary\" size={32} />,\n      title: \"Our Vision\",\n      description: \"To become India's most trusted platform for local services, empowering millions of service providers while making life easier for customers.\"\n    },\n    {\n      icon: <Shield className=\"text-primary\" size={32} />,\n      title: \"Our Values\",\n      description: \"Trust, transparency, and quality in every interaction. We believe in fair pricing, verified providers, and exceptional customer service.\"\n    }\n  ];\n\n  const team = [\n    {\n      name: \"Arjun Patel\",\n      role: \"Founder & CEO\",\n      description: \"Tech entrepreneur with 10+ years experience in marketplace platforms.\"\n    },\n    {\n      name: \"Priya Singh\", \n      role: \"Head of Operations\",\n      description: \"Operations expert focused on provider onboarding and quality assurance.\"\n    },\n    {\n      name: \"Rajesh Kumar\",\n      role: \"CTO\", \n      description: \"Technology leader building scalable platforms for millions of users.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"about-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"page-title\">\n            About ServiceConnect\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"page-description\">\n            We're on a mission to revolutionize how people find and hire local service providers across India. \n            Our platform connects skilled professionals with customers who need quality services.\n          </p>\n        </div>\n\n        {/* Stats */}\n        <section className=\"mb-16\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {stats.map((stat, index) => (\n              <Card key={index} className=\"text-center\" data-testid={`stat-${index}`}>\n                <CardHeader className=\"pb-2\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto text-primary\">\n                    {stat.icon}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold mb-1\">{stat.value}</div>\n                  <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* Mission, Vision, Values */}\n        <section className=\"mb-16\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {values.map((value, index) => (\n              <Card key={index} className=\"text-center\" data-testid={`value-${index}`}>\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    {value.icon}\n                  </div>\n                  <CardTitle className=\"text-xl\">{value.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">{value.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* Story */}\n        <section className=\"mb-16\">\n          <Card data-testid=\"story-section\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl text-center\">Our Story</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose max-w-none\">\n              <p className=\"text-muted-foreground text-center max-w-3xl mx-auto\">\n                ServiceConnect was founded in 2023 with a simple observation: finding reliable local service providers \n                was unnecessarily difficult, while skilled professionals struggled to find consistent work. We decided \n                to bridge this gap with technology.\n              </p>\n              <br />\n              <p className=\"text-muted-foreground text-center max-w-3xl mx-auto\">\n                Starting in Bangalore, we've grown to connect thousands of service providers with customers across \n                multiple cities. Our platform ensures quality through verification processes, transparent pricing, \n                and a robust review system.\n              </p>\n              <br />\n              <p className=\"text-muted-foreground text-center max-w-3xl mx-auto\">\n                Today, ServiceConnect is helping people get their daily tasks done while empowering service providers \n                to build sustainable businesses. We're just getting started.\n              </p>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Team */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\" data-testid=\"team-title\">\n            Meet Our Team\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {team.map((member, index) => (\n              <Card key={index} className=\"text-center\" data-testid={`team-member-${index}`}>\n                <CardHeader>\n                  <div className=\"w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <span className=\"text-2xl font-bold text-primary\">\n                      {member.name.split(' ').map(n => n[0]).join('')}\n                    </span>\n                  </div>\n                  <CardTitle>{member.name}</CardTitle>\n                  <p className=\"text-primary font-semibold\">{member.role}</p>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground text-sm\">{member.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"bg-primary/5 rounded-lg p-8 text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\" data-testid=\"cta-title\">\n            Join Our Growing Community\n          </h2>\n          <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\">\n            Whether you need services or provide them, ServiceConnect is here to help you succeed.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\"\n              onClick={() => setLocation(\"/post-job\")}\n              data-testid=\"customer-cta\"\n            >\n              Post a Job\n            </Button>\n            <Button \n              size=\"lg\"\n              variant=\"outline\"\n              onClick={() => setLocation(\"/join-as-provider\")}\n              data-testid=\"provider-cta\"\n            >\n              Become a Provider\n            </Button>\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":8130},"client/src/pages/blog.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { Calendar, User, Clock, Search, Tag } from \"lucide-react\";\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  excerpt: string;\n  content: string;\n  author: string;\n  publishDate: string;\n  readTime: string;\n  category: string;\n  tags: string[];\n  featured: boolean;\n}\n\nexport default function Blog() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n\n  const blogPosts: BlogPost[] = [\n    {\n      id: \"1\",\n      title: \"10 Tips for Hiring the Right Home Cleaning Service\",\n      excerpt: \"Finding a reliable cleaning service can be challenging. Here are our top tips to help you make the right choice for your home.\",\n      content: \"Complete guide content would be here...\",\n      author: \"Priya Sharma\",\n      publishDate: \"2024-01-15\",\n      readTime: \"5 min read\",\n      category: \"Home Services\",\n      tags: [\"cleaning\", \"tips\", \"home\"],\n      featured: true\n    },\n    {\n      id: \"2\",\n      title: \"How to Build a Successful Service Business on ServiceConnect\",\n      excerpt: \"Learn the strategies that top-rated providers use to grow their business and increase their earnings on our platform.\",\n      content: \"Complete guide content would be here...\",\n      author: \"Rajesh Kumar\",\n      publishDate: \"2024-01-12\",\n      readTime: \"7 min read\",\n      category: \"Business Growth\",\n      tags: [\"business\", \"providers\", \"growth\"],\n      featured: true\n    },\n    {\n      id: \"3\",\n      title: \"The Future of Local Services: Technology and Trust\",\n      excerpt: \"Exploring how technology is revolutionizing the local services industry while maintaining the human touch that customers value.\",\n      content: \"Complete guide content would be here...\",\n      author: \"Arjun Patel\",\n      publishDate: \"2024-01-10\",\n      readTime: \"6 min read\",\n      category: \"Industry Insights\",\n      tags: [\"technology\", \"future\", \"trends\"],\n      featured: false\n    },\n    {\n      id: \"4\",\n      title: \"Essential Plumbing Maintenance Tips for Homeowners\",\n      excerpt: \"Prevent costly repairs with these simple maintenance tips that every homeowner should know about their plumbing system.\",\n      content: \"Complete guide content would be here...\",\n      author: \"Mohammed Ali\",\n      publishDate: \"2024-01-08\",\n      readTime: \"4 min read\", \n      category: \"Home Services\",\n      tags: [\"plumbing\", \"maintenance\", \"diy\"],\n      featured: false\n    },\n    {\n      id: \"5\",\n      title: \"Seasonal Home Maintenance Checklist\",\n      excerpt: \"Stay ahead of seasonal maintenance needs with our comprehensive checklist for spring, summer, fall, and winter.\",\n      content: \"Complete guide content would be here...\",\n      author: \"Sunita Gupta\",\n      publishDate: \"2024-01-05\",\n      readTime: \"8 min read\",\n      category: \"Home Services\", \n      tags: [\"maintenance\", \"seasonal\", \"checklist\"],\n      featured: false\n    },\n    {\n      id: \"6\",\n      title: \"Customer Safety Guide: Vetting Service Providers\",\n      excerpt: \"Important safety considerations and red flags to watch out for when hiring service providers for your home.\",\n      content: \"Complete guide content would be here...\",\n      author: \"Security Team\",\n      publishDate: \"2024-01-03\",\n      readTime: \"5 min read\",\n      category: \"Safety & Security\",\n      tags: [\"safety\", \"vetting\", \"security\"],\n      featured: false\n    }\n  ];\n\n  const categories = [\"All\", \"Home Services\", \"Business Growth\", \"Industry Insights\", \"Safety & Security\"];\n  const featuredPosts = blogPosts.filter(post => post.featured);\n  const regularPosts = blogPosts.filter(post => !post.featured);\n\n  const filteredPosts = blogPosts.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         post.excerpt.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === \"All\" || post.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const BlogCard = ({ post, featured = false }: { post: BlogPost, featured?: boolean }) => (\n    <Card \n      className={`hover:shadow-lg transition-shadow cursor-pointer ${featured ? 'md:col-span-2' : ''}`}\n      onClick={() => setLocation(`/blog/${post.id}`)}\n      data-testid={`blog-post-${post.id}`}\n    >\n      <CardHeader>\n        <div className=\"flex items-start justify-between mb-2\">\n          <Badge variant=\"secondary\" data-testid={`post-category-${post.id}`}>\n            {post.category}\n          </Badge>\n          {featured && (\n            <Badge className=\"bg-yellow-100 text-yellow-800\" data-testid={`featured-badge-${post.id}`}>\n              Featured\n            </Badge>\n          )}\n        </div>\n        <CardTitle className={`${featured ? 'text-xl' : 'text-lg'} line-clamp-2`} data-testid={`post-title-${post.id}`}>\n          {post.title}\n        </CardTitle>\n        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <User size={14} />\n            <span>{post.author}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Calendar size={14} />\n            <span>{new Date(post.publishDate).toLocaleDateString()}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock size={14} />\n            <span>{post.readTime}</span>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p className={`text-muted-foreground ${featured ? 'line-clamp-3' : 'line-clamp-2'} mb-4`} data-testid={`post-excerpt-${post.id}`}>\n          {post.excerpt}\n        </p>\n        <div className=\"flex flex-wrap gap-1\">\n          {post.tags.map((tag, index) => (\n            <Badge key={index} variant=\"outline\" className=\"text-xs\" data-testid={`post-tag-${post.id}-${index}`}>\n              <Tag size={10} className=\"mr-1\" />\n              {tag}\n            </Badge>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"blog-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"page-title\">\n            ServiceConnect Blog\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"page-description\">\n            Tips, insights, and guides to help you make the most of local services\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"max-w-2xl mx-auto mb-12\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search size={16} className=\"absolute left-3 top-3 text-muted-foreground\" />\n              <Input \n                placeholder=\"Search articles...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-input\"\n              />\n            </div>\n            <div className=\"flex gap-2 overflow-x-auto\">\n              {categories.map(category => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                  className=\"whitespace-nowrap\"\n                  data-testid={`category-filter-${category}`}\n                >\n                  {category}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Featured Posts */}\n        {featuredPosts.length > 0 && searchQuery === \"\" && selectedCategory === \"All\" && (\n          <section className=\"mb-12\">\n            <h2 className=\"text-2xl font-bold mb-6\" data-testid=\"featured-title\">Featured Articles</h2>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {featuredPosts.map(post => (\n                <BlogCard key={post.id} post={post} featured />\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* All Posts */}\n        <section>\n          <h2 className=\"text-2xl font-bold mb-6\" data-testid=\"all-posts-title\">\n            {searchQuery || selectedCategory !== \"All\" ? \"Search Results\" : \"Latest Articles\"}\n          </h2>\n          \n          {filteredPosts.length === 0 ? (\n            <div className=\"text-center py-12\" data-testid=\"no-results\">\n              <div className=\"text-muted-foreground mb-4\">\n                <h3 className=\"text-lg font-semibold\">No articles found</h3>\n                <p>Try adjusting your search terms or filters</p>\n              </div>\n              <Button onClick={() => { setSearchQuery(\"\"); setSelectedCategory(\"All\"); }} data-testid=\"clear-filters\">\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"blog-grid\">\n              {filteredPosts.map(post => (\n                <BlogCard key={post.id} post={post} />\n              ))}\n            </div>\n          )}\n        </section>\n\n        {/* Newsletter Signup */}\n        <section className=\"mt-16\">\n          <Card className=\"text-center\" data-testid=\"newsletter-section\">\n            <CardHeader>\n              <CardTitle>Stay Updated</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-6\">\n                Get the latest tips, insights, and updates delivered to your inbox\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 max-w-md mx-auto\">\n                <Input placeholder=\"Enter your email\" type=\"email\" data-testid=\"newsletter-email\" />\n                <Button data-testid=\"newsletter-subscribe\">Subscribe</Button>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Popular Tags */}\n        <section className=\"mt-12\">\n          <h2 className=\"text-xl font-bold mb-4\" data-testid=\"popular-tags-title\">Popular Tags</h2>\n          <div className=\"flex flex-wrap gap-2\">\n            {Array.from(new Set(blogPosts.flatMap(post => post.tags))).map(tag => (\n              <Button \n                key={tag} \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setSearchQuery(tag)}\n                data-testid={`popular-tag-${tag}`}\n              >\n                <Tag size={12} className=\"mr-1\" />\n                {tag}\n              </Button>\n            ))}\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":11379},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, Phone, MapPin, Clock } from \"lucide-react\";\n\nconst contactSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email\"),\n  phone: z.string().min(10, \"Please enter a valid phone number\"),\n  subject: z.string().min(5, \"Subject must be at least 5 characters\"),\n  message: z.string().min(20, \"Message must be at least 20 characters\"),\n});\n\ntype ContactFormData = z.infer<typeof contactSchema>;\n\nexport default function Contact() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null);\n  const { toast } = useToast();\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const onSubmit = async (data: ContactFormData) => {\n    // Simulate form submission\n    console.log(\"Contact form data:\", data);\n    \n    toast({\n      title: \"Message Sent!\",\n      description: \"Thank you for contacting us. We'll get back to you within 24 hours.\",\n    });\n    \n    form.reset();\n  };\n\n  const contactInfo = [\n    {\n      icon: <Mail className=\"text-primary\" size={20} />,\n      title: \"Email Us\",\n      details: [\"support@serviceconnect.com\", \"business@serviceconnect.com\"],\n      description: \"Get in touch via email for general inquiries\"\n    },\n    {\n      icon: <Phone className=\"text-primary\" size={20} />,\n      title: \"Call Us\", \n      details: [\"+91 80 1234 5678\", \"+91 80 8765 4321\"],\n      description: \"Speak with our support team directly\"\n    },\n    {\n      icon: <MapPin className=\"text-primary\" size={20} />,\n      title: \"Visit Us\",\n      details: [\"Koramangala\", \"Bangalore, Karnataka 560095\"],\n      description: \"Our office is open for meetings by appointment\"\n    },\n    {\n      icon: <Clock className=\"text-primary\" size={20} />,\n      title: \"Business Hours\",\n      details: [\"Mon - Fri: 9:00 AM - 6:00 PM\", \"Sat: 10:00 AM - 4:00 PM\"],\n      description: \"We're here to help during business hours\"\n    }\n  ];\n\n  const faqs = [\n    {\n      question: \"How do I post a job?\",\n      answer: \"Simply click 'Post a Job', fill in the details, and our verified providers will start bidding on your project.\"\n    },\n    {\n      question: \"How do I become a service provider?\",\n      answer: \"Register as a provider, complete your profile with business details, and get verified by our team.\"\n    },\n    {\n      question: \"What is the cost to unlock job details?\",\n      answer: \"Providers pay ₹100 to unlock customer contact details for each job they're interested in.\"\n    },\n    {\n      question: \"How do you ensure provider quality?\",\n      answer: \"We verify all providers through document checks, background verification, and maintain a rating system.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"contact-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"page-title\">\n            Contact Us\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"page-description\">\n            Have questions about our platform? Need help with your account? We're here to assist you.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <div>\n            <Card data-testid=\"contact-form\">\n              <CardHeader>\n                <CardTitle>Send us a Message</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"form-contact\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Your name\" {...field} data-testid=\"input-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email Address</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"your@email.com\" type=\"email\" {...field} data-testid=\"input-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Your phone number\" {...field} data-testid=\"input-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"subject\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Subject</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"What's this about?\" {...field} data-testid=\"input-subject\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"message\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Message</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Tell us how we can help you...\"\n                              className=\"min-h-[120px]\"\n                              {...field}\n                              data-testid=\"input-message\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button type=\"submit\" className=\"w-full\" data-testid=\"button-send\">\n                      Send Message\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Info */}\n          <div className=\"space-y-6\">\n            <div className=\"grid gap-6\">\n              {contactInfo.map((info, index) => (\n                <Card key={index} data-testid={`contact-info-${index}`}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-3\">\n                      {info.icon}\n                      {info.title}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-1\">\n                      {info.details.map((detail, i) => (\n                        <p key={i} className=\"font-semibold\">{detail}</p>\n                      ))}\n                      <p className=\"text-sm text-muted-foreground\">{info.description}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Quick FAQ */}\n            <Card data-testid=\"quick-faq\">\n              <CardHeader>\n                <CardTitle>Quick Answers</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {faqs.map((faq, index) => (\n                    <div key={index} data-testid={`faq-${index}`}>\n                      <h4 className=\"font-semibold mb-2\">{faq.question}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{faq.answer}</p>\n                    </div>\n                  ))}\n                </div>\n                <Button \n                  variant=\"link\" \n                  className=\"w-full mt-4 p-0\"\n                  onClick={() => setLocation(\"/faq\")}\n                  data-testid=\"view-all-faq\"\n                >\n                  View All FAQs\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Map Section */}\n        <section className=\"mt-16\">\n          <Card data-testid=\"map-section\">\n            <CardHeader>\n              <CardTitle className=\"text-center\">Find Us</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"aspect-video bg-muted rounded-lg flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <MapPin size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    Interactive map would be embedded here<br />\n                    Koramangala, Bangalore, Karnataka 560095\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":10945},"client/src/pages/faq.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { MessageCircle, Users, Shield, CreditCard } from \"lucide-react\";\n\nexport default function FAQ() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null);\n\n  const customerFaqs = [\n    {\n      question: \"How do I post a job on ServiceConnect?\",\n      answer: \"Click 'Post a Job', fill in your requirements including title, description, location, and budget. Your job will be visible to verified providers in your area who can then submit bids.\"\n    },\n    {\n      question: \"Is it free to post jobs?\",\n      answer: \"Yes, posting jobs on ServiceConnect is completely free for customers. You only pay the provider directly for their services once you hire them.\"\n    },\n    {\n      question: \"How do I choose the right service provider?\",\n      answer: \"Review provider profiles, ratings, past work examples, and bids. You can also contact providers directly to discuss your requirements before making a decision.\"\n    },\n    {\n      question: \"What if I'm not satisfied with the work?\",\n      answer: \"We have a dispute resolution process. Contact our support team with your concerns, and we'll help mediate between you and the provider to find a fair solution.\"\n    },\n    {\n      question: \"How do I pay the service provider?\",\n      answer: \"Payment is made directly to the service provider. We recommend discussing payment terms upfront and paying after satisfactory completion of work.\"\n    },\n    {\n      question: \"Can I cancel a job after posting?\",\n      answer: \"Yes, you can cancel a job before hiring a provider. However, once you've hired someone and work has begun, cancellation should be discussed directly with the provider.\"\n    },\n    {\n      question: \"How do I rate and review a provider?\",\n      answer: \"After job completion, you'll receive a notification to rate and review the provider. Your feedback helps maintain platform quality and assists other customers.\"\n    },\n    {\n      question: \"What types of services are available?\",\n      answer: \"We offer a wide range of services including home cleaning, plumbing, electrical work, carpentry, beauty services, tutoring, pet care, and much more.\"\n    }\n  ];\n\n  const providerFaqs = [\n    {\n      question: \"How do I register as a service provider?\",\n      answer: \"Click 'Join as Provider', create your profile with business details, upload verification documents, and wait for approval from our team. The process typically takes 1-2 business days.\"\n    },\n    {\n      question: \"What documents do I need for verification?\",\n      answer: \"You'll need a valid ID proof (Aadhar/PAN), business registration documents (if applicable), and any relevant certifications or licenses for your services.\"\n    },\n    {\n      question: \"How much does it cost to unlock job details?\",\n      answer: \"Each job unlock costs ₹100. This gives you access to the customer's contact details so you can discuss the job requirements and negotiate terms directly.\"\n    },\n    {\n      question: \"How do I add money to my wallet?\",\n      answer: \"Go to your wallet section and choose from various recharge options. You can add money using UPI, debit/credit cards, or net banking.\"\n    },\n    {\n      question: \"What happens if I unlock a job but don't get hired?\",\n      answer: \"The ₹100 unlock fee is non-refundable as it provides access to customer contact details. However, you can use this opportunity to build relationships for future jobs.\"\n    },\n    {\n      question: \"How do I increase my chances of getting hired?\",\n      answer: \"Maintain a complete profile, showcase your work through photos, respond quickly to jobs, provide competitive pricing, and maintain high ratings through quality work.\"\n    },\n    {\n      question: \"Can I offer services in multiple cities?\",\n      answer: \"Yes, you can set your service radius and operate in multiple locations. Update your profile to reflect all areas where you provide services.\"\n    },\n    {\n      question: \"How do I handle difficult customers?\",\n      answer: \"Always maintain professionalism. If issues arise, try to resolve them directly first. If needed, contact our support team for mediation and guidance.\"\n    }\n  ];\n\n  const generalFaqs = [\n    {\n      question: \"How does ServiceConnect ensure safety and trust?\",\n      answer: \"We verify all providers through document checks, maintain a rating system, offer customer support, and have dispute resolution processes in place.\"\n    },\n    {\n      question: \"Is ServiceConnect available in my city?\",\n      answer: \"We're currently active in major Indian cities and expanding rapidly. Check our website or app to see if services are available in your location.\"\n    },\n    {\n      question: \"How do I report a problem or file a complaint?\",\n      answer: \"Contact our customer support through the app, website, or call our helpline. We take all complaints seriously and work to resolve them promptly.\"\n    },\n    {\n      question: \"Can I use ServiceConnect without creating an account?\",\n      answer: \"You can browse jobs and provider profiles, but you need to create an account to post jobs (as customer) or apply for jobs (as provider).\"\n    },\n    {\n      question: \"Is there a mobile app available?\",\n      answer: \"Yes, ServiceConnect is available on both Android and iOS. Download from Google Play Store or Apple App Store for a better mobile experience.\"\n    },\n    {\n      question: \"How do you handle data privacy and security?\",\n      answer: \"We follow strict data protection guidelines, encrypt sensitive information, and never share your personal details without consent. Read our Privacy Policy for details.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"faq-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"page-title\">\n            Frequently Asked Questions\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"page-description\">\n            Find answers to common questions about using ServiceConnect\n          </p>\n        </div>\n\n        {/* FAQ Categories */}\n        <Tabs defaultValue=\"customers\" className=\"max-w-4xl mx-auto\" data-testid=\"faq-tabs\">\n          <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"tabs-list\">\n            <TabsTrigger value=\"customers\" data-testid=\"tab-customers\">\n              <Users size={16} className=\"mr-2\" />\n              For Customers\n            </TabsTrigger>\n            <TabsTrigger value=\"providers\" data-testid=\"tab-providers\">\n              <Shield size={16} className=\"mr-2\" />\n              For Providers\n            </TabsTrigger>\n            <TabsTrigger value=\"general\" data-testid=\"tab-general\">\n              <MessageCircle size={16} className=\"mr-2\" />\n              General\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Customer FAQs */}\n          <TabsContent value=\"customers\" data-testid=\"tab-content-customers\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users size={20} />\n                  Customer Questions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Accordion type=\"single\" collapsible className=\"w-full\" data-testid=\"customer-accordion\">\n                  {customerFaqs.map((faq, index) => (\n                    <AccordionItem key={index} value={`customer-${index}`} data-testid={`customer-faq-${index}`}>\n                      <AccordionTrigger className=\"text-left\">\n                        {faq.question}\n                      </AccordionTrigger>\n                      <AccordionContent>\n                        <p className=\"text-muted-foreground\">{faq.answer}</p>\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Provider FAQs */}\n          <TabsContent value=\"providers\" data-testid=\"tab-content-providers\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield size={20} />\n                  Provider Questions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Accordion type=\"single\" collapsible className=\"w-full\" data-testid=\"provider-accordion\">\n                  {providerFaqs.map((faq, index) => (\n                    <AccordionItem key={index} value={`provider-${index}`} data-testid={`provider-faq-${index}`}>\n                      <AccordionTrigger className=\"text-left\">\n                        {faq.question}\n                      </AccordionTrigger>\n                      <AccordionContent>\n                        <p className=\"text-muted-foreground\">{faq.answer}</p>\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* General FAQs */}\n          <TabsContent value=\"general\" data-testid=\"tab-content-general\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageCircle size={20} />\n                  General Questions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Accordion type=\"single\" collapsible className=\"w-full\" data-testid=\"general-accordion\">\n                  {generalFaqs.map((faq, index) => (\n                    <AccordionItem key={index} value={`general-${index}`} data-testid={`general-faq-${index}`}>\n                      <AccordionTrigger className=\"text-left\">\n                        {faq.question}\n                      </AccordionTrigger>\n                      <AccordionContent>\n                        <p className=\"text-muted-foreground\">{faq.answer}</p>\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Still Have Questions */}\n        <section className=\"mt-16\">\n          <Card className=\"text-center\" data-testid=\"contact-section\">\n            <CardHeader>\n              <CardTitle>Still Have Questions?</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-6\">\n                Can't find what you're looking for? Our support team is here to help.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button onClick={() => setLocation(\"/contact\")} data-testid=\"contact-us\">\n                  Contact Support\n                </Button>\n                <Button variant=\"outline\" data-testid=\"help-chat\">\n                  <MessageCircle size={16} className=\"mr-2\" />\n                  Live Chat\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Popular Help Topics */}\n        <section className=\"mt-12\">\n          <h2 className=\"text-2xl font-bold text-center mb-8\" data-testid=\"help-topics-title\">\n            Popular Help Topics\n          </h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {[\n              { icon: <CreditCard size={20} />, title: \"Payment Issues\", link: \"#\" },\n              { icon: <Shield size={20} />, title: \"Account Verification\", link: \"#\" },\n              { icon: <Users size={20} />, title: \"Profile Management\", link: \"#\" },\n              { icon: <MessageCircle size={20} />, title: \"Communication\", link: \"#\" }\n            ].map((topic, index) => (\n              <Button\n                key={index}\n                variant=\"outline\"\n                className=\"h-auto p-4 flex flex-col items-center gap-2\"\n                data-testid={`help-topic-${index}`}\n              >\n                <div className=\"text-primary\">{topic.icon}</div>\n                <span className=\"text-sm\">{topic.title}</span>\n              </Button>\n            ))}\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":13034},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Navbar } from \"@/components/navbar\";\nimport { HeroSection } from \"@/components/hero-section\";\nimport { ServiceCategories } from \"@/components/service-categories\";\nimport { NewNoteworthy } from \"@/components/new-noteworthy\";\nimport { FeaturedServices } from \"@/components/featured-services\";\nimport { CategorySpecificSections } from \"@/components/category-specific-sections\";\nimport { HowItWorks } from \"@/components/how-it-works\";\nimport { BrowseJobsPreview } from \"@/components/browse-jobs-preview\";\nimport { FeaturedProviders } from \"@/components/featured-providers\";\nimport { Testimonials } from \"@/components/testimonials\";\nimport { MobileAppSection } from \"@/components/mobile-app-section\";\nimport { Footer } from \"@/components/footer\";\nimport { MobileAppLayout } from \"@/components/layout/mobile-app-layout\";\nimport UnifiedAuthModal from \"@/components/auth/unified-auth-modal\";\nimport { authUtils, type User } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const { toast } = useToast();\n\n  // Check for existing authentication on component mount\n  useEffect(() => {\n    const existingUser = authUtils.getUser();\n    if (existingUser) {\n      setUser(existingUser);\n    }\n  }, []);\n\n  const handleSignIn = () => {\n    setShowAuthModal(true);\n  };\n\n\n\n  const handleSignOut = () => {\n    authUtils.removeUser();\n    setUser(null);\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out.\",\n    });\n  };\n\n  return (\n    <div data-testid=\"home-page\">\n      {/* Desktop Layout */}\n      <div className=\"hidden lg:block min-h-screen bg-background\">\n        <Navbar \n          user={user || undefined}\n          onSignIn={handleSignIn}\n          onSignOut={handleSignOut}\n        />\n        \n        <main>\n          <HeroSection \n            onCustomerSignup={handleSignIn}\n            onProviderSignup={handleSignIn}\n          />\n          <ServiceCategories />\n          <NewNoteworthy />\n          <FeaturedServices />\n          <CategorySpecificSections />\n          <BrowseJobsPreview />\n          <FeaturedProviders />\n          <Testimonials />\n          <MobileAppSection />\n        </main>\n        \n        <Footer />\n      </div>\n\n      {/* Mobile/Tablet App Layout */}\n      <div className=\"lg:hidden\">\n        <MobileAppLayout user={user} onAuthRequired={handleSignIn}>\n          <main>\n            <HeroSection \n              onCustomerSignup={handleSignIn}\n              onProviderSignup={handleSignIn}\n            />\n            <ServiceCategories />\n            <NewNoteworthy />\n            <FeaturedServices />\n            <CategorySpecificSections />\n            <BrowseJobsPreview />\n            <FeaturedProviders />\n            <Testimonials />\n            <MobileAppSection />\n          </main>\n        </MobileAppLayout>\n      </div>\n\n      {/* Auth Modal */}\n      <UnifiedAuthModal \n        isOpen={showAuthModal} \n        onClose={() => setShowAuthModal(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":3259},"client/src/pages/how-it-works-page.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { CheckCircle, Search, MessageCircle, User, FileText, Shield, CreditCard } from \"lucide-react\";\n\nexport default function HowItWorksPage() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null); // Would come from auth context\n\n  const customerSteps = [\n    {\n      icon: <FileText className=\"text-primary\" size={24} />,\n      title: \"Post Your Job\",\n      description: \"Describe what you need, set your budget, and specify your location. It's free to post!\"\n    },\n    {\n      icon: <Search className=\"text-primary\" size={24} />,\n      title: \"Get Bids from Providers\",\n      description: \"Qualified service providers will review your job and submit competitive bids.\"\n    },\n    {\n      icon: <User className=\"text-primary\" size={24} />,\n      title: \"Choose Your Provider\",\n      description: \"Review provider profiles, ratings, and bids to select the best fit for your needs.\"\n    },\n    {\n      icon: <MessageCircle className=\"text-primary\" size={24} />,\n      title: \"Connect & Complete\",\n      description: \"Contact your chosen provider directly and get your job done professionally.\"\n    }\n  ];\n\n  const providerSteps = [\n    {\n      icon: <User className=\"text-primary\" size={24} />,\n      title: \"Register & Create Profile\",\n      description: \"Sign up, add your business details, and showcase your skills and experience.\"\n    },\n    {\n      icon: <Shield className=\"text-primary\" size={24} />,\n      title: \"Get Verified\",\n      description: \"Upload required documents and get verified by our team to build customer trust.\"\n    },\n    {\n      icon: <Search className=\"text-primary\" size={24} />,\n      title: \"Browse & Apply to Jobs\",\n      description: \"Find jobs in your area that match your skills. Submit competitive bids.\"\n    },\n    {\n      icon: <CreditCard className=\"text-primary\" size={24} />,\n      title: \"Unlock Contact Details\",\n      description: \"Pay ₹100 to unlock customer contact details and start working on jobs.\"\n    }\n  ];\n\n  const benefits = {\n    customers: [\n      \"Free job posting\",\n      \"Multiple competitive bids\",\n      \"Verified service providers\",\n      \"Direct communication\",\n      \"No hidden fees\",\n      \"Quality guarantee\"\n    ],\n    providers: [\n      \"Access to local jobs\",\n      \"Grow your business\",\n      \"Verified customer base\",\n      \"Flexible working\",\n      \"Competitive marketplace\",\n      \"Regular income opportunity\"\n    ]\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"how-it-works-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"page-title\">\n            How ServiceConnect Works\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"page-description\">\n            Connect with trusted service providers or find new customers in just a few simple steps\n          </p>\n        </div>\n\n        {/* Customer Flow */}\n        <section className=\"mb-16\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"customer-section-title\">\n              For Customers\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Get your jobs done by trusted professionals\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {customerSteps.map((step, index) => (\n              <Card key={index} className=\"text-center\" data-testid={`customer-step-${index + 1}`}>\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    {step.icon}\n                  </div>\n                  <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold mx-auto mb-2\">\n                    {index + 1}\n                  </div>\n                  <CardTitle className=\"text-lg\">{step.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground text-sm\">{step.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center\">\n            <Button \n              size=\"lg\"\n              onClick={() => setLocation(\"/post-job\")}\n              data-testid=\"post-job-cta\"\n            >\n              Post Your First Job\n            </Button>\n          </div>\n        </section>\n\n        {/* Provider Flow */}\n        <section className=\"mb-16\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"provider-section-title\">\n              For Service Providers\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Grow your business with new customers\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {providerSteps.map((step, index) => (\n              <Card key={index} className=\"text-center\" data-testid={`provider-step-${index + 1}`}>\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    {step.icon}\n                  </div>\n                  <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold mx-auto mb-2\">\n                    {index + 1}\n                  </div>\n                  <CardTitle className=\"text-lg\">{step.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground text-sm\">{step.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center\">\n            <Button \n              size=\"lg\"\n              onClick={() => setLocation(\"/join-as-provider\")}\n              data-testid=\"join-provider-cta\"\n            >\n              Join as Service Provider\n            </Button>\n          </div>\n        </section>\n\n        {/* Benefits Section */}\n        <section className=\"mb-16\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"benefits-title\">\n              Why Choose ServiceConnect?\n            </h2>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <Card data-testid=\"customer-benefits\">\n              <CardHeader>\n                <CardTitle className=\"text-xl text-center\">Customer Benefits</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {benefits.customers.map((benefit, index) => (\n                    <div key={index} className=\"flex items-center gap-3\">\n                      <CheckCircle size={16} className=\"text-green-500 flex-shrink-0\" />\n                      <span className=\"text-sm\">{benefit}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"provider-benefits\">\n              <CardHeader>\n                <CardTitle className=\"text-xl text-center\">Provider Benefits</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {benefits.providers.map((benefit, index) => (\n                    <div key={index} className=\"flex items-center gap-3\">\n                      <CheckCircle size={16} className=\"text-green-500 flex-shrink-0\" />\n                      <span className=\"text-sm\">{benefit}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"bg-primary/5 rounded-lg p-8 text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\" data-testid=\"final-cta-title\">\n            Ready to Get Started?\n          </h2>\n          <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\">\n            Join thousands of satisfied customers and service providers on ServiceConnect\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\"\n              onClick={() => setLocation(\"/post-job\")}\n              data-testid=\"final-customer-cta\"\n            >\n              Post a Job\n            </Button>\n            <Button \n              size=\"lg\"\n              variant=\"outline\"\n              onClick={() => setLocation(\"/join-as-provider\")}\n              data-testid=\"final-provider-cta\"\n            >\n              Become a Provider\n            </Button>\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9488},"client/src/pages/job-details.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { MapPin, Clock, User, ArrowLeft, LogIn } from \"lucide-react\";\n\ninterface Job {\n  id: string;\n  title: string;\n  category: string;\n  description: string;\n  location: string;\n  budget?: string;\n  createdAt: string;\n  status: \"open\" | \"closed\";\n  customer: {\n    name: string;\n    rating: number;\n    totalJobs: number;\n  };\n}\n\nexport default function JobDetails() {\n  const { jobId } = useParams();\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null); // Would come from auth context\n\n  const { data: jobData, isLoading } = useQuery({\n    queryKey: [\"/api/job\", jobId],\n    enabled: !!jobId,\n  });\n\n  const job: Job | undefined = (jobData as any)?.job;\n\n  // Related jobs for SEO\n  const relatedJobs = [\n    {\n      id: \"2\",\n      title: \"Office Cleaning Service\",\n      category: \"Home Cleaning\",\n      location: \"HSR Layout, Bangalore\",\n      createdAt: \"4 hours ago\"\n    },\n    {\n      id: \"3\", \n      title: \"Apartment Deep Cleaning\",\n      category: \"Home Cleaning\",\n      location: \"Whitefield, Bangalore\", \n      createdAt: \"1 day ago\"\n    }\n  ];\n\n  if (isLoading || !job) {\n    return (\n      <div className=\"min-h-screen bg-background\" data-testid=\"loading-state\">\n        <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading job details...</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"job-details-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Back Button */}\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation(\"/jobs/list\")}\n          className=\"mb-6\"\n          data-testid=\"back-button\"\n        >\n          <ArrowLeft size={16} className=\"mr-2\" />\n          Back to Jobs\n        </Button>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Job Header */}\n            <Card data-testid=\"job-header\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h1 className=\"text-2xl font-bold mb-3\" data-testid=\"job-title\">\n                      {job.title}\n                    </h1>\n                    <div className=\"flex flex-wrap items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin size={14} />\n                        <span data-testid=\"job-location\">{job.location}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Clock size={14} />\n                        <span>{job.createdAt}</span>\n                      </div>\n                      {job.budget && (\n                        <div className=\"text-primary font-semibold\" data-testid=\"job-budget\">\n                          {job.budget}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col items-end gap-2\">\n                    <Badge \n                      variant={job.status === \"open\" ? \"default\" : \"secondary\"}\n                      data-testid=\"job-status\"\n                    >\n                      {job.status === \"open\" ? \"Open\" : \"Closed\"}\n                    </Badge>\n                    <Badge variant=\"outline\" data-testid=\"job-category\">\n                      {job.category}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n\n            {/* Job Description */}\n            <Card data-testid=\"job-description\">\n              <CardHeader>\n                <CardTitle>Job Description</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  {job.description}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Customer Info */}\n            <Card data-testid=\"customer-info\">\n              <CardHeader>\n                <CardTitle>Posted by</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                    <User size={20} className=\"text-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\" data-testid=\"customer-name\">{job.customer.name}</h4>\n                    <div className=\"text-sm text-muted-foreground\">\n                      <span data-testid=\"customer-rating\">⭐ {job.customer.rating}</span>\n                      <span className=\"mx-2\">•</span>\n                      <span data-testid=\"customer-jobs\">{job.customer.totalJobs} jobs posted</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Action Card */}\n            <Card data-testid=\"action-card\">\n              <CardHeader>\n                <CardTitle>Apply for this Job</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!user ? (\n                  <div className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Login or register to apply for this job and contact the customer.\n                    </p>\n                    <div className=\"space-y-2\">\n                      <Button \n                        className=\"w-full\" \n                        onClick={() => setLocation(\"/auth/login\")}\n                        data-testid=\"login-button\"\n                      >\n                        <LogIn size={16} className=\"mr-2\" />\n                        Login to Apply\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full\"\n                        onClick={() => setLocation(\"/auth/register\")}\n                        data-testid=\"register-button\"\n                      >\n                        Register as Provider\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <Button className=\"w-full\" data-testid=\"submit-bid\">\n                      Submit Your Bid\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"unlock-contact\">\n                      Unlock Contact Details (₹100)\n                    </Button>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Only verified providers can unlock contact details\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Related Jobs */}\n            <Card data-testid=\"related-jobs\">\n              <CardHeader>\n                <CardTitle>Related Jobs</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {relatedJobs.map(relatedJob => (\n                    <div \n                      key={relatedJob.id}\n                      className=\"p-3 border rounded-lg hover:bg-accent cursor-pointer transition-colors\"\n                      onClick={() => setLocation(`/job/${relatedJob.id}`)}\n                      data-testid={`related-job-${relatedJob.id}`}\n                    >\n                      <h4 className=\"font-medium text-sm line-clamp-2\">{relatedJob.title}</h4>\n                      <div className=\"flex items-center gap-2 mt-1 text-xs text-muted-foreground\">\n                        <span>{relatedJob.location}</span>\n                        <span>•</span>\n                        <span>{relatedJob.createdAt}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <Button \n                  variant=\"link\" \n                  className=\"w-full mt-4 p-0\"\n                  onClick={() => setLocation(\"/jobs/list\")}\n                  data-testid=\"view-all-jobs\"\n                >\n                  View All Jobs\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9454},"client/src/pages/join-as-provider.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { CheckCircle, Star, TrendingUp, Shield, Users, CreditCard, Zap } from \"lucide-react\";\n\nexport default function JoinAsProvider() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null); // Would come from auth context\n\n  const benefits = [\n    {\n      icon: <Users className=\"text-primary\" size={24} />,\n      title: \"Access to Customers\",\n      description: \"Get connected with thousands of customers looking for your services\"\n    },\n    {\n      icon: <TrendingUp className=\"text-primary\" size={24} />,\n      title: \"Grow Your Business\",\n      description: \"Expand your client base and increase your income with regular job opportunities\"\n    },\n    {\n      icon: <Shield className=\"text-primary\" size={24} />,\n      title: \"Verified Platform\", \n      description: \"Work with verified customers in a trusted and secure environment\"\n    },\n    {\n      icon: <Zap className=\"text-primary\" size={24} />,\n      title: \"Quick Payments\",\n      description: \"Get paid directly by customers with transparent pricing\"\n    },\n    {\n      icon: <Star className=\"text-primary\" size={24} />,\n      title: \"Build Reputation\",\n      description: \"Earn ratings and reviews to establish your credibility and attract more jobs\"\n    },\n    {\n      icon: <CreditCard className=\"text-primary\" size={24} />,\n      title: \"Low Cost\",\n      description: \"Only ₹100 to unlock each job's contact details. No monthly fees!\"\n    }\n  ];\n\n  const categories = [\n    \"Home Cleaning\",\n    \"Plumbing\", \n    \"Electrical Work\",\n    \"Carpentry\",\n    \"Painting\",\n    \"HVAC\",\n    \"Appliance Repair\",\n    \"Gardening\",\n    \"Beauty & Spa\",\n    \"Auto Services\",\n    \"Tech Support\",\n    \"Tutoring\",\n    \"Pet Care\",\n    \"Moving Services\",\n    \"Photography\",\n    \"Catering\",\n    \"Event Planning\",\n    \"Interior Design\"\n  ];\n\n  const testimonials = [\n    {\n      name: \"Rajesh Kumar\",\n      service: \"Plumbing Services\",\n      rating: 5,\n      text: \"I've been using ServiceConnect for 6 months and have completed over 50 jobs. Great platform to find regular work!\",\n      earnings: \"₹45,000/month\"\n    },\n    {\n      name: \"Priya Sharma\", \n      service: \"Home Cleaning\",\n      rating: 5,\n      text: \"The customers are genuine and payments are always on time. Highly recommend for service providers.\",\n      earnings: \"₹30,000/month\"\n    },\n    {\n      name: \"Mohammed Ali\",\n      service: \"Electrical Work\", \n      rating: 5,\n      text: \"Easy to use platform with good job availability. I've grown my business significantly through this.\",\n      earnings: \"₹60,000/month\"\n    }\n  ];\n\n  const steps = [\n    \"Sign up with your phone number\",\n    \"Complete your business profile\",\n    \"Upload verification documents\", \n    \"Get approved by our team\",\n    \"Start browsing and applying to jobs\",\n    \"Unlock contact details for ₹100 per job\",\n    \"Complete jobs and earn money\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"join-provider-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"hero-title\">\n            Join as Service Provider\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto mb-6\" data-testid=\"hero-description\">\n            Turn your skills into income. Connect with customers who need your services and grow your business.\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={() => setLocation(\"/auth/register?type=provider\")}\n            data-testid=\"hero-cta\"\n          >\n            Start Earning Today\n          </Button>\n        </div>\n\n        {/* Benefits Grid */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\" data-testid=\"benefits-title\">\n            Why Service Providers Love Us\n          </h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {benefits.map((benefit, index) => (\n              <Card key={index} className=\"text-center\" data-testid={`benefit-${index}`}>\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    {benefit.icon}\n                  </div>\n                  <CardTitle className=\"text-lg\">{benefit.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground text-sm\">{benefit.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* Service Categories */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\" data-testid=\"categories-title\">\n            Service Categories Available\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-3\">\n            {categories.map((category, index) => (\n              <Badge \n                key={index} \n                variant=\"outline\" \n                className=\"justify-center p-3 text-center\"\n                data-testid={`category-${index}`}\n              >\n                {category}\n              </Badge>\n            ))}\n          </div>\n        </section>\n\n        {/* How It Works */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\" data-testid=\"steps-title\">\n            How It Works\n          </h2>\n          <Card className=\"max-w-2xl mx-auto\" data-testid=\"steps-card\">\n            <CardContent className=\"pt-6\">\n              <div className=\"space-y-4\">\n                {steps.map((step, index) => (\n                  <div key={index} className=\"flex items-center gap-4\" data-testid={`step-${index}`}>\n                    <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0\">\n                      {index + 1}\n                    </div>\n                    <p className=\"text-muted-foreground\">{step}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Testimonials */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\" data-testid=\"testimonials-title\">\n            Success Stories\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} data-testid={`testimonial-${index}`}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-semibold\">{testimonial.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{testimonial.service}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"flex items-center gap-1\">\n                        <Star size={16} className=\"text-yellow-500 fill-current\" />\n                        <span className=\"text-sm\">{testimonial.rating}</span>\n                      </div>\n                      <p className=\"text-sm font-semibold text-primary\">{testimonial.earnings}</p>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground text-sm italic\">\"{testimonial.text}\"</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* Pricing */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\" data-testid=\"pricing-title\">\n            Simple, Transparent Pricing\n          </h2>\n          <Card className=\"max-w-md mx-auto text-center\" data-testid=\"pricing-card\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">Pay Per Job</CardTitle>\n              <div className=\"text-4xl font-bold text-primary\">₹100</div>\n              <p className=\"text-muted-foreground\">per contact unlock</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 text-left\">\n                <div className=\"flex items-center gap-3\">\n                  <CheckCircle size={16} className=\"text-green-500\" />\n                  <span className=\"text-sm\">No monthly subscription fees</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <CheckCircle size={16} className=\"text-green-500\" />\n                  <span className=\"text-sm\">Only pay when you get a job</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <CheckCircle size={16} className=\"text-green-500\" />\n                  <span className=\"text-sm\">Free profile and job browsing</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <CheckCircle size={16} className=\"text-green-500\" />\n                  <span className=\"text-sm\">Direct customer contact</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Final CTA */}\n        <section className=\"bg-primary/5 rounded-lg p-8 text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\" data-testid=\"final-cta-title\">\n            Ready to Start Your Journey?\n          </h2>\n          <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\">\n            Join thousands of successful service providers already earning through our platform\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\"\n              onClick={() => setLocation(\"/auth/register?type=provider\")}\n              data-testid=\"register-provider-cta\"\n            >\n              Register as Provider\n            </Button>\n            <Button \n              size=\"lg\"\n              variant=\"outline\"\n              onClick={() => setLocation(\"/jobs/list\")}\n              data-testid=\"browse-jobs-cta\"\n            >\n              Browse Available Jobs\n            </Button>\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":10865},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/privacy.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { Shield, Eye, Lock, Users, Mail, Phone } from \"lucide-react\";\n\nexport default function Privacy() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null);\n\n  const sections = [\n    {\n      icon: <Shield className=\"text-primary\" size={24} />,\n      title: \"Information We Collect\",\n      content: [\n        \"Personal Information: Name, email address, phone number, and profile details you provide during registration.\",\n        \"Service Information: Details about services you offer or request, location data, and transaction history.\",\n        \"Usage Data: How you interact with our platform, including pages visited, features used, and time spent.\",\n        \"Device Information: Device type, browser information, IP address, and operating system.\",\n        \"Communication Data: Messages, reviews, and other communications between users on the platform.\"\n      ]\n    },\n    {\n      icon: <Eye className=\"text-primary\" size={24} />,\n      title: \"How We Use Your Information\",\n      content: [\n        \"Platform Services: Facilitate connections between customers and service providers.\",\n        \"Account Management: Create and maintain user accounts, verify identities, and process transactions.\",\n        \"Communication: Send notifications, updates, and respond to inquiries.\",\n        \"Safety & Security: Prevent fraud, ensure platform safety, and comply with legal requirements.\",\n        \"Improvement: Analyze usage patterns to improve our services and user experience.\",\n        \"Marketing: Send promotional content and updates about our services (with consent).\"\n      ]\n    },\n    {\n      icon: <Users className=\"text-primary\" size={24} />,\n      title: \"Information Sharing\",\n      content: [\n        \"Between Users: We share relevant profile information between customers and service providers to facilitate transactions.\",\n        \"Service Providers: Third-party services that help us operate our platform (payment processors, cloud storage).\",\n        \"Legal Requirements: When required by law, court order, or government regulations.\",\n        \"Business Transfers: In case of merger, acquisition, or sale of our business assets.\",\n        \"Consent: Any other sharing will be done only with your explicit consent.\"\n      ]\n    },\n    {\n      icon: <Lock className=\"text-primary\" size={24} />,\n      title: \"Data Security\",\n      content: [\n        \"Encryption: All sensitive data is encrypted both in transit and at rest.\",\n        \"Access Controls: Strict access controls ensure only authorized personnel can access user data.\",\n        \"Regular Audits: We conduct regular security audits and assessments.\",\n        \"Secure Infrastructure: Our platform is hosted on secure, industry-standard infrastructure.\",\n        \"Incident Response: We have procedures in place to respond to any security incidents promptly.\"\n      ]\n    }\n  ];\n\n  const rights = [\n    \"Access your personal data and understand how it's being used\",\n    \"Correct or update inaccurate or incomplete information\",\n    \"Delete your account and associated data (subject to legal requirements)\",\n    \"Object to or restrict certain processing of your data\",\n    \"Data portability - receive your data in a structured format\",\n    \"Withdraw consent for marketing communications at any time\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"privacy-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"page-title\">\n            Privacy Policy\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\" data-testid=\"page-description\">\n            At ServiceConnect, we're committed to protecting your privacy and being transparent about how we handle your personal information.\n          </p>\n          <p className=\"text-sm text-muted-foreground mt-4\">\n            Last updated: January 1, 2024\n          </p>\n        </div>\n\n        {/* Introduction */}\n        <Card className=\"mb-8\" data-testid=\"introduction\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-muted-foreground leading-relaxed\">\n              This Privacy Policy explains how ServiceConnect (\"we,\" \"our,\" or \"us\") collects, uses, shares, and protects \n              your personal information when you use our platform to connect customers with service providers. By using our \n              services, you agree to the collection and use of information in accordance with this policy.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Main Sections */}\n        <div className=\"space-y-8 mb-12\">\n          {sections.map((section, index) => (\n            <Card key={index} data-testid={`section-${index}`}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3\">\n                  {section.icon}\n                  {section.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {section.content.map((item, itemIndex) => (\n                    <li key={itemIndex} className=\"flex items-start gap-3\">\n                      <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                      <span className=\"text-muted-foreground\">{item}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Your Rights */}\n        <Card className=\"mb-8\" data-testid=\"user-rights\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3\">\n              <Users className=\"text-primary\" size={24} />\n              Your Privacy Rights\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              You have the following rights regarding your personal data:\n            </p>\n            <ul className=\"space-y-3\">\n              {rights.map((right, index) => (\n                <li key={index} className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <span className=\"text-muted-foreground\">{right}</span>\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n\n        {/* Data Retention */}\n        <Card className=\"mb-8\" data-testid=\"data-retention\">\n          <CardHeader>\n            <CardTitle>Data Retention</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose max-w-none text-muted-foreground\">\n              <p>\n                We retain your personal information only as long as necessary to provide our services and comply with legal obligations:\n              </p>\n              <ul className=\"mt-4 space-y-2\">\n                <li><strong>Active Accounts:</strong> Data is retained while your account is active and for up to 2 years after deactivation.</li>\n                <li><strong>Transaction Records:</strong> Financial and transaction data is retained for 7 years for tax and legal compliance.</li>\n                <li><strong>Communication Data:</strong> Messages and communications are retained for 3 years for dispute resolution.</li>\n                <li><strong>Usage Analytics:</strong> Anonymized usage data may be retained longer for service improvement.</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cookies and Tracking */}\n        <Card className=\"mb-8\" data-testid=\"cookies\">\n          <CardHeader>\n            <CardTitle>Cookies and Tracking Technologies</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose max-w-none text-muted-foreground\">\n              <p>\n                We use cookies and similar technologies to enhance your experience:\n              </p>\n              <ul className=\"mt-4 space-y-2\">\n                <li><strong>Essential Cookies:</strong> Required for platform functionality and security.</li>\n                <li><strong>Performance Cookies:</strong> Help us understand how users interact with our platform.</li>\n                <li><strong>Functional Cookies:</strong> Remember your preferences and settings.</li>\n                <li><strong>Marketing Cookies:</strong> Used to deliver relevant advertisements (with consent).</li>\n              </ul>\n              <p className=\"mt-4\">\n                You can control cookie preferences through your browser settings, but disabling certain cookies may affect platform functionality.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Children's Privacy */}\n        <Card className=\"mb-8\" data-testid=\"children-privacy\">\n          <CardHeader>\n            <CardTitle>Children's Privacy</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground\">\n              ServiceConnect is not intended for use by children under 18 years of age. We do not knowingly collect \n              personal information from children under 18. If we become aware that we have collected personal information \n              from a child under 18, we will take steps to delete such information promptly.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Changes to Policy */}\n        <Card className=\"mb-8\" data-testid=\"policy-changes\">\n          <CardHeader>\n            <CardTitle>Changes to This Privacy Policy</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground\">\n              We may update this Privacy Policy from time to time. We will notify you of any significant changes by \n              posting the new Privacy Policy on this page and updating the \"Last updated\" date. We encourage you to \n              review this Privacy Policy periodically for any changes.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card data-testid=\"contact-info\">\n          <CardHeader>\n            <CardTitle>Contact Us</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              If you have any questions about this Privacy Policy or our data practices, please contact us:\n            </p>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-3\">\n                <Mail className=\"text-primary\" size={16} />\n                <span className=\"text-muted-foreground\">privacy@serviceconnect.com</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"text-primary\" size={16} />\n                <span className=\"text-muted-foreground\">+91 80 1234 5678</span>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Shield className=\"text-primary\" size={16} />\n                <span className=\"text-muted-foreground\">\n                  Data Protection Officer<br />\n                  ServiceConnect<br />\n                  Koramangala, Bangalore, Karnataka 560095\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":11837},"client/src/pages/provider-profile-page.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { Star, MapPin, Calendar, CheckCircle, Phone, Mail, ArrowLeft } from \"lucide-react\";\n\ninterface ProviderProfile {\n  id: string;\n  name: string;\n  businessName: string;\n  businessDetails: string;\n  serviceCategories: string[];\n  location: string;\n  rating: number;\n  totalJobs: number;\n  yearsExperience: number;\n  verified: boolean;\n  profileImage?: string;\n  gallery: string[];\n  reviews: Review[];\n}\n\ninterface Review {\n  id: string;\n  customerName: string;\n  rating: number;\n  comment: string;\n  date: string;\n  jobTitle: string;\n}\n\nexport default function ProviderProfilePage() {\n  const { providerId } = useParams();\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null); // Would come from auth context\n\n  const { data: profileData, isLoading } = useQuery({\n    queryKey: [\"/api/provider\", providerId],\n    enabled: !!providerId,\n  });\n\n  // Mock data for demonstration\n  const profile: ProviderProfile = profileData?.profile || {\n    id: \"1\",\n    name: \"Rajesh Kumar\",\n    businessName: \"Kumar's Home Services\",\n    businessDetails: \"Professional plumbing and electrical services with over 8 years of experience. Specializing in residential repairs, installations, and maintenance. Available for emergency calls.\",\n    serviceCategories: [\"Plumbing\", \"Electrical Work\", \"Home Repair\"],\n    location: \"Koramangala, Bangalore\",\n    rating: 4.8,\n    totalJobs: 156,\n    yearsExperience: 8,\n    verified: true,\n    gallery: [\n      \"/api/placeholder/300/200\",\n      \"/api/placeholder/300/200\", \n      \"/api/placeholder/300/200\"\n    ],\n    reviews: [\n      {\n        id: \"1\",\n        customerName: \"Priya S.\",\n        rating: 5,\n        comment: \"Excellent work on fixing our kitchen plumbing. Very professional and cleaned up after the job. Highly recommended!\",\n        date: \"2 days ago\",\n        jobTitle: \"Kitchen Plumbing Repair\"\n      },\n      {\n        id: \"2\", \n        customerName: \"Amit R.\",\n        rating: 5,\n        comment: \"Quick response and fair pricing. Fixed our electrical issues efficiently. Will definitely call again.\",\n        date: \"1 week ago\",\n        jobTitle: \"Electrical Repair\"\n      },\n      {\n        id: \"3\",\n        customerName: \"Sunita M.\",\n        rating: 4,\n        comment: \"Good work overall. Arrived on time and completed the job as promised.\",\n        date: \"2 weeks ago\", \n        jobTitle: \"Home Maintenance\"\n      }\n    ]\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\" data-testid=\"loading-state\">\n        <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading provider profile...</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const averageRating = profile.reviews.reduce((acc, review) => acc + review.rating, 0) / profile.reviews.length;\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"provider-profile-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Back Button */}\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation(\"/jobs/list\")}\n          className=\"mb-6\"\n          data-testid=\"back-button\"\n        >\n          <ArrowLeft size={16} className=\"mr-2\" />\n          Back to Providers\n        </Button>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Profile */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Profile Header */}\n            <Card data-testid=\"profile-header\">\n              <CardHeader>\n                <div className=\"flex flex-col md:flex-row gap-6\">\n                  <Avatar className=\"w-24 h-24 mx-auto md:mx-0\">\n                    <AvatarFallback className=\"text-2xl\">\n                      {profile.name.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 text-center md:text-left\">\n                    <div className=\"flex flex-col md:flex-row md:items-center gap-2 mb-2\">\n                      <h1 className=\"text-2xl font-bold\" data-testid=\"provider-name\">\n                        {profile.name}\n                      </h1>\n                      {profile.verified && (\n                        <Badge className=\"bg-green-100 text-green-800 w-fit mx-auto md:mx-0\" data-testid=\"verified-badge\">\n                          <CheckCircle size={14} className=\"mr-1\" />\n                          Verified\n                        </Badge>\n                      )}\n                    </div>\n                    <h2 className=\"text-lg text-muted-foreground mb-2\" data-testid=\"business-name\">\n                      {profile.businessName}\n                    </h2>\n                    <div className=\"flex flex-col md:flex-row md:items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1 justify-center md:justify-start\">\n                        <MapPin size={14} />\n                        <span data-testid=\"provider-location\">{profile.location}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1 justify-center md:justify-start\">\n                        <Calendar size={14} />\n                        <span>{profile.yearsExperience} years experience</span>\n                      </div>\n                      <div className=\"flex items-center gap-1 justify-center md:justify-start\">\n                        <Star size={14} className=\"text-yellow-500 fill-current\" />\n                        <span data-testid=\"provider-rating\">{profile.rating} ({profile.totalJobs} jobs)</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n\n            {/* Service Categories */}\n            <Card data-testid=\"service-categories\">\n              <CardHeader>\n                <CardTitle>Services Offered</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  {profile.serviceCategories.map((category, index) => (\n                    <Badge key={index} variant=\"secondary\" data-testid={`category-${index}`}>\n                      {category}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* About */}\n            <Card data-testid=\"about-section\">\n              <CardHeader>\n                <CardTitle>About</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  {profile.businessDetails}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Reviews */}\n            <Card data-testid=\"reviews-section\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  Reviews ({profile.reviews.length})\n                  <div className=\"flex items-center gap-1\">\n                    <Star size={16} className=\"text-yellow-500 fill-current\" />\n                    <span className=\"text-sm\">{averageRating.toFixed(1)}</span>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {profile.reviews.map((review, index) => (\n                    <div key={review.id} className=\"border-b last:border-b-0 pb-4 last:pb-0\" data-testid={`review-${index}`}>\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div>\n                          <h4 className=\"font-semibold text-sm\">{review.customerName}</h4>\n                          <p className=\"text-xs text-muted-foreground\">{review.jobTitle}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center gap-1 mb-1\">\n                            <Star size={12} className=\"text-yellow-500 fill-current\" />\n                            <span className=\"text-xs\">{review.rating}</span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">{review.date}</p>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{review.comment}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Contact Card */}\n            <Card data-testid=\"contact-card\">\n              <CardHeader>\n                <CardTitle>Contact Provider</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!user ? (\n                  <div className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Login to contact this provider directly\n                    </p>\n                    <div className=\"space-y-2\">\n                      <Button \n                        className=\"w-full\"\n                        onClick={() => setLocation(\"/auth/login\")}\n                        data-testid=\"login-to-contact\"\n                      >\n                        Login to Contact\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full\"\n                        onClick={() => setLocation(\"/auth/register\")}\n                        data-testid=\"register-to-contact\"\n                      >\n                        Register\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <Button className=\"w-full\" data-testid=\"contact-phone\">\n                      <Phone size={16} className=\"mr-2\" />\n                      Call Now\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"contact-email\">\n                      <Mail size={16} className=\"mr-2\" />\n                      Send Message\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"hire-provider\">\n                      Hire This Provider\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Stats Card */}\n            <Card data-testid=\"stats-card\">\n              <CardHeader>\n                <CardTitle>Provider Stats</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Jobs Completed</span>\n                    <span className=\"font-semibold\">{profile.totalJobs}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Average Rating</span>\n                    <span className=\"font-semibold\">{profile.rating}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Years Experience</span>\n                    <span className=\"font-semibold\">{profile.yearsExperience}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Verification</span>\n                    <Badge className=\"bg-green-100 text-green-800 text-xs\">\n                      Verified\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Similar Providers */}\n            <Card data-testid=\"similar-providers\">\n              <CardHeader>\n                <CardTitle>Similar Providers</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {[1, 2, 3].map((i) => (\n                    <div \n                      key={i}\n                      className=\"flex items-center gap-3 p-2 border rounded-lg hover:bg-accent cursor-pointer transition-colors\"\n                      onClick={() => setLocation(`/provider/provider-${i + 1}`)}\n                      data-testid={`similar-provider-${i}`}\n                    >\n                      <Avatar className=\"w-10 h-10\">\n                        <AvatarFallback>P{i}</AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-sm\">Provider {i}</h4>\n                        <div className=\"flex items-center gap-1\">\n                          <Star size={12} className=\"text-yellow-500 fill-current\" />\n                          <span className=\"text-xs\">4.{i + 5}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":14235},"client/src/pages/terms.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { FileText, Users, Shield, CreditCard, AlertTriangle, Scale } from \"lucide-react\";\n\nexport default function Terms() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null);\n\n  const sections = [\n    {\n      icon: <FileText className=\"text-primary\" size={24} />,\n      title: \"Platform Overview\",\n      content: [\n        \"ServiceConnect is a digital platform that connects customers with local service providers.\",\n        \"We facilitate introductions and provide tools for communication, but we are not a party to any service agreements between users.\",\n        \"All services are provided directly between customers and service providers.\",\n        \"By using our platform, you agree to these terms and our Privacy Policy.\"\n      ]\n    },\n    {\n      icon: <Users className=\"text-primary\" size={24} />,\n      title: \"User Accounts and Registration\",\n      content: [\n        \"You must be at least 18 years old to create an account and use our services.\",\n        \"You are responsible for maintaining the confidentiality of your account credentials.\",\n        \"All information provided during registration must be accurate and up-to-date.\",\n        \"Each user may only maintain one account on the platform.\",\n        \"We reserve the right to suspend or terminate accounts that violate these terms.\"\n      ]\n    },\n    {\n      icon: <Shield className=\"text-primary\" size={24} />,\n      title: \"User Responsibilities and Conduct\",\n      content: [\n        \"Users must not post false, misleading, or fraudulent information.\",\n        \"Harassment, discrimination, or abusive behavior towards other users is strictly prohibited.\",\n        \"Users must respect intellectual property rights and not infringe on copyrights or trademarks.\",\n        \"Commercial activities outside the platform's intended use are not permitted.\",\n        \"Users must comply with all applicable local, state, and federal laws.\"\n      ]\n    },\n    {\n      icon: <CreditCard className=\"text-primary\" size={24} />,\n      title: \"Payments and Fees\",\n      content: [\n        \"Service providers pay ₹100 to unlock customer contact details for each job.\",\n        \"All payments for actual services are made directly between customers and service providers.\",\n        \"Unlock fees are non-refundable once contact details are accessed.\",\n        \"We use secure third-party payment processors to handle transactions.\",\n        \"Users are responsible for any taxes applicable to their transactions.\"\n      ]\n    }\n  ];\n\n  const prohibitedActivities = [\n    \"Creating fake profiles or impersonating others\",\n    \"Posting spam, unsolicited advertisements, or irrelevant content\",\n    \"Attempting to circumvent platform fees or policies\",\n    \"Using the platform for illegal activities or services\",\n    \"Sharing personal contact information in public listings to avoid fees\",\n    \"Manipulating ratings and reviews system\",\n    \"Accessing or attempting to access other users' accounts\",\n    \"Interfering with platform functionality or security measures\"\n  ];\n\n  const limitations = [\n    \"ServiceConnect acts as an intermediary and is not responsible for the quality of services provided.\",\n    \"We do not guarantee the availability, reliability, or performance of service providers.\",\n    \"Users assume all risks associated with in-person meetings and service provision.\",\n    \"We are not liable for disputes between customers and service providers.\",\n    \"Our liability is limited to the amount of fees paid to us in the 12 months prior to any claim.\",\n    \"We do not provide warranties of any kind, express or implied.\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"terms-page\">\n      <Navbar user={user} onSignIn={() => setLocation(\"/auth/login\")} onGetStarted={() => setLocation(\"/auth/register\")} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"page-title\">\n            Terms of Service\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\" data-testid=\"page-description\">\n            These terms govern your use of ServiceConnect and describe the rights and responsibilities of all users.\n          </p>\n          <p className=\"text-sm text-muted-foreground mt-4\">\n            Last updated: January 1, 2024\n          </p>\n        </div>\n\n        {/* Introduction */}\n        <Card className=\"mb-8\" data-testid=\"introduction\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-muted-foreground leading-relaxed\">\n              Welcome to ServiceConnect. These Terms of Service (\"Terms\") constitute a legally binding agreement between \n              you and ServiceConnect regarding your use of our platform. By accessing or using our services, you agree \n              to be bound by these Terms. If you do not agree to these Terms, please do not use our platform.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Main Sections */}\n        <div className=\"space-y-8 mb-12\">\n          {sections.map((section, index) => (\n            <Card key={index} data-testid={`section-${index}`}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3\">\n                  {section.icon}\n                  {section.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {section.content.map((item, itemIndex) => (\n                    <li key={itemIndex} className=\"flex items-start gap-3\">\n                      <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                      <span className=\"text-muted-foreground\">{item}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Prohibited Activities */}\n        <Card className=\"mb-8\" data-testid=\"prohibited-activities\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3\">\n              <AlertTriangle className=\"text-red-500\" size={24} />\n              Prohibited Activities\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              The following activities are strictly prohibited on our platform:\n            </p>\n            <ul className=\"space-y-3\">\n              {prohibitedActivities.map((activity, index) => (\n                <li key={index} className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-red-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <span className=\"text-muted-foreground\">{activity}</span>\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n\n        {/* Service Provider Terms */}\n        <Card className=\"mb-8\" data-testid=\"provider-terms\">\n          <CardHeader>\n            <CardTitle>Additional Terms for Service Providers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose max-w-none text-muted-foreground\">\n              <ul className=\"space-y-3\">\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <span>Providers must possess necessary licenses, insurance, and qualifications for their services.</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <span>All service delivery and quality is the sole responsibility of the service provider.</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <span>Providers must maintain professional conduct and deliver services as described.</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <span>False advertising or misrepresentation of services may result in account termination.</span>\n                </li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Customer Terms */}\n        <Card className=\"mb-8\" data-testid=\"customer-terms\">\n          <CardHeader>\n            <CardTitle>Additional Terms for Customers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose max-w-none text-muted-foreground\">\n              <ul className=\"space-y-3\">\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <span>Job postings must be accurate, legal, and comply with local regulations.</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <span>Customers are responsible for their own safety when meeting service providers.</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <span>Payment disputes should be resolved directly between customers and providers.</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <span>Honest and fair reviews help maintain platform quality for all users.</span>\n                </li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Intellectual Property */}\n        <Card className=\"mb-8\" data-testid=\"intellectual-property\">\n          <CardHeader>\n            <CardTitle>Intellectual Property Rights</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose max-w-none text-muted-foreground\">\n              <p className=\"mb-4\">\n                ServiceConnect and its content, features, and functionality are owned by us and are protected by copyright, \n                trademark, and other intellectual property laws. Users retain ownership of content they post but grant us \n                a license to use, display, and distribute such content on our platform.\n              </p>\n              <ul className=\"space-y-2\">\n                <li><strong>Platform Content:</strong> All text, graphics, logos, and software are our property.</li>\n                <li><strong>User Content:</strong> You retain ownership but grant us usage rights for platform operation.</li>\n                <li><strong>Third-Party Content:</strong> Respect copyright and intellectual property of others.</li>\n                <li><strong>Trademarks:</strong> Do not use our trademarks without prior written permission.</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Disclaimers and Limitations */}\n        <Card className=\"mb-8\" data-testid=\"limitations\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3\">\n              <Scale className=\"text-primary\" size={24} />\n              Disclaimers and Limitation of Liability\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-3\">\n              {limitations.map((limitation, index) => (\n                <li key={index} className=\"flex items-start gap-3\">\n                  <div className=\"w-1.5 h-1.5 bg-yellow-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <span className=\"text-muted-foreground\">{limitation}</span>\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n\n        {/* Termination */}\n        <Card className=\"mb-8\" data-testid=\"termination\">\n          <CardHeader>\n            <CardTitle>Account Termination</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              We reserve the right to suspend or terminate user accounts for violations of these Terms, illegal activities, \n              or behavior that harms the platform or other users. Upon termination:\n            </p>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>• Access to the platform will be immediately revoked</li>\n              <li>• Outstanding obligations remain in effect</li>\n              <li>• User data will be handled according to our Privacy Policy</li>\n              <li>• Users may appeal termination decisions through our support channels</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        {/* Governing Law */}\n        <Card className=\"mb-8\" data-testid=\"governing-law\">\n          <CardHeader>\n            <CardTitle>Governing Law and Dispute Resolution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground\">\n              These Terms are governed by the laws of India. Any disputes arising from these Terms or use of our platform \n              will be resolved through binding arbitration in accordance with the Arbitration and Conciliation Act, 2015. \n              The seat of arbitration shall be Bangalore, Karnataka.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Changes to Terms */}\n        <Card className=\"mb-8\" data-testid=\"terms-changes\">\n          <CardHeader>\n            <CardTitle>Changes to Terms</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground\">\n              We may update these Terms from time to time. When we make significant changes, we will notify users through \n              email or platform notifications. Continued use of our services after changes become effective constitutes \n              acceptance of the new Terms.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card data-testid=\"contact-info\">\n          <CardHeader>\n            <CardTitle>Contact Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              If you have questions about these Terms of Service, please contact us:\n            </p>\n            <div className=\"space-y-2 text-muted-foreground\">\n              <p><strong>Email:</strong> legal@serviceconnect.com</p>\n              <p><strong>Phone:</strong> +91 80 1234 5678</p>\n              <p><strong>Address:</strong><br />\n                ServiceConnect Legal Department<br />\n                Koramangala, Bangalore<br />\n                Karnataka 560095, India\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":15527},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Users, UserCheck, UserX, Clock, CheckCircle, XCircle, Eye, Shield, IndianRupee, TrendingUp, Briefcase, Bell, Settings, Search, Filter, AlertTriangle, Wallet } from \"lucide-react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from \"recharts\";\n\ninterface ProviderProfile {\n  id: string;\n  userId: string;\n  businessName: string;\n  businessDetails: string;\n  serviceCategories: string[];\n  location: string;\n  status: \"pending\" | \"approved\" | \"rejected\";\n  documentsUploaded: boolean;\n  user?: {\n    name?: string;\n    email?: string;\n    phoneNumber: string;\n  };\n}\n\nexport default function AdminDashboard() {\n  const [user] = useState({ id: \"admin-1\", name: \"Admin User\" }); // This would come from auth context\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const { toast } = useToast();\n\n  // Fetch comprehensive dashboard data\n  const { data: dashboardData } = useQuery({\n    queryKey: [\"/api/admin/dashboard\"],\n    enabled: !!user.id,\n  });\n\n  const { data: recentActions } = useQuery({\n    queryKey: [\"/api/admin/actions/recent\"],\n    enabled: !!user.id,\n  });\n\n  const { data: pendingUsersData } = useQuery({\n    queryKey: [\"/api/admin/users/pending\"],\n    enabled: !!user.id,\n  });\n\n  // Mock chart data (in production, this would come from API)\n  const jobsPerDayData = [\n    { date: \"Mon\", jobs: 12 },\n    { date: \"Tue\", jobs: 19 },\n    { date: \"Wed\", jobs: 15 },\n    { date: \"Thu\", jobs: 22 },\n    { date: \"Fri\", jobs: 28 },\n    { date: \"Sat\", jobs: 35 },\n    { date: \"Sun\", jobs: 18 }\n  ];\n\n  const revenueData = [\n    { month: \"Jan\", revenue: 15000 },\n    { month: \"Feb\", revenue: 23000 },\n    { month: \"Mar\", revenue: 31000 },\n    { month: \"Apr\", revenue: 28000 },\n    { month: \"May\", revenue: 42000 },\n    { month: \"Jun\", revenue: 38000 }\n  ];\n\n  const categoryData = [\n    { name: \"Home Cleaning\", value: 35, color: \"#8884d8\" },\n    { name: \"Plumbing\", value: 25, color: \"#82ca9d\" },\n    { name: \"Electrical\", value: 20, color: \"#ffc658\" },\n    { name: \"Beauty\", value: 12, color: \"#ff7300\" },\n    { name: \"Others\", value: 8, color: \"#0088fe\" }\n  ];\n\n  // Get pending providers\n  const { data: pendingData, isLoading } = useQuery({\n    queryKey: [\"/api/admin/providers/pending\"],\n    enabled: !!user.id,\n  });\n\n  const pendingProviders: ProviderProfile[] = (pendingData as any)?.providers || [];\n  const pendingUsers = (pendingUsersData as any)?.users || [];\n  \n  // Enhanced dashboard stats\n  const stats = (dashboardData as any)?.stats || {\n    totalUsers: 247,\n    activeProviders: 89,\n    totalJobs: 156,\n    monthlyRevenue: 45000,\n    pendingApprovals: pendingProviders.length + pendingUsers.length,\n    approvedToday: 3,\n    rejectedToday: 1\n  };\n\n  const approveMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/providers/${userId}/approve`);\n      return response.json();\n    },\n    onSuccess: (data, userId) => {\n      toast({\n        title: \"Provider Approved\",\n        description: \"The service provider has been approved and can now start receiving jobs.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/providers/pending\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Approval Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/providers/${userId}/reject`);\n      return response.json();\n    },\n    onSuccess: (data, userId) => {\n      toast({\n        title: \"Provider Rejected\",\n        description: \"The service provider application has been rejected.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/providers/pending\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Rejection Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const approveUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/users/${userId}/approve`);\n      return response.json();\n    },\n    onSuccess: (data, userId) => {\n      toast({\n        title: \"User Approved\",\n        description: \"The user has been approved and can now access the platform.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users/pending\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Approval Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/users/${userId}/reject`);\n      return response.json();\n    },\n    onSuccess: (data, userId) => {\n      toast({\n        title: \"User Rejected\",\n        description: \"The user registration has been rejected.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users/pending\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Rejection Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const blockUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/users/${userId}/block`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Blocked\",\n        description: \"The user has been blocked successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/providers/pending\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Block Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = (userId: string) => {\n    approveMutation.mutate(userId);\n  };\n\n  const handleReject = (userId: string) => {\n    rejectMutation.mutate(userId);\n  };\n\n  const handleApproveUser = (userId: string) => {\n    approveUserMutation.mutate(userId);\n  };\n\n  const handleRejectUser = (userId: string) => {\n    rejectUserMutation.mutate(userId);\n  };\n\n  const handleBlockUser = (userId: string) => {\n    blockUserMutation.mutate(userId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\" data-testid=\"loading-state\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"admin-dashboard\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\" data-testid=\"dashboard-header\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Shield className=\"text-primary\" size={24} />\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-welcome\">Admin Dashboard</h1>\n          </div>\n          <p className=\"text-muted-foreground\" data-testid=\"text-subtitle\">\n            Manage service providers, users, and platform operations\n          </p>\n        </div>\n\n        {/* Enhanced Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-8\" data-testid=\"stats-cards\">\n          <Card data-testid=\"stat-total-users\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.totalUsers}</div>\n              <p className=\"text-xs text-muted-foreground\">+12% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-active-providers\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Providers</CardTitle>\n              <Briefcase className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.activeProviders}</div>\n              <p className=\"text-xs text-muted-foreground\">+8% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-total-jobs\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Jobs</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.totalJobs}</div>\n              <p className=\"text-xs text-muted-foreground\">+25% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-monthly-revenue\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\n              <IndianRupee className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">₹{stats.monthlyRevenue.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">+18% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-pending-approvals\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Approvals</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-500\">{stats.pendingApprovals}</div>\n              <p className=\"text-xs text-muted-foreground\">Needs attention</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Comprehensive Management Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\" data-testid=\"admin-tabs\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"pending\">Approvals ({pendingProviders.length + pendingUsers.length})</TabsTrigger>\n            <TabsTrigger value=\"users\">Users</TabsTrigger>\n            <TabsTrigger value=\"jobs\">Jobs</TabsTrigger>\n            <TabsTrigger value=\"wallet\">Wallet & Pricing</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Jobs Per Day</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={jobsPerDayData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"jobs\" fill=\"#8884d8\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Monthly Revenue</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={revenueData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip formatter={(value) => [`₹${value}`, \"Revenue\"]} />\n                      <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"#82ca9d\" strokeWidth={2} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Service Categories Distribution</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={categoryData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {categoryData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Admin Actions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {(recentActions as any)?.actions?.map((action: any, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 border rounded\">\n                        <div>\n                          <p className=\"font-medium\">{action.action}</p>\n                          <p className=\"text-sm text-muted-foreground\">{action.target}</p>\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\">{action.time}</span>\n                      </div>\n                    )) || (\n                      <div className=\"text-center text-muted-foreground py-4\">\n                        No recent actions\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"pending\" data-testid=\"tab-content-pending\">\n            <div className=\"space-y-6\">\n              {/* Pending Users Section */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                  <Users size={20} />\n                  Pending User Registrations ({pendingUsers.length})\n                </h3>\n                {pendingUsers.length === 0 ? (\n                  <Card data-testid=\"empty-pending-users\">\n                    <CardContent className=\"text-center py-8\">\n                      <UserCheck className=\"mx-auto h-8 w-8 text-muted-foreground mb-2\" />\n                      <p className=\"text-muted-foreground\">No pending user registrations</p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {pendingUsers.map((user: any) => (\n                      <Card key={user.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-user-${user.id}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {user.userType === 'customer' ? 'Customer' : 'Provider'}\n                                </Badge>\n                                <span className=\"font-medium\">{user.phoneNumber}</span>\n                              </div>\n                              {user.name && <p className=\"text-sm text-muted-foreground\">{user.name}</p>}\n                              <p className=\"text-xs text-muted-foreground\">\n                                Registered: {new Date(user.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                size=\"sm\"\n                                onClick={() => handleApproveUser(user.id)}\n                                disabled={approveUserMutation.isPending}\n                                data-testid={`button-approve-user-${user.id}`}\n                              >\n                                <CheckCircle size={16} className=\"mr-1\" />\n                                Approve\n                              </Button>\n                              <Button\n                                variant=\"destructive\"\n                                size=\"sm\"\n                                onClick={() => handleRejectUser(user.id)}\n                                disabled={rejectUserMutation.isPending}\n                                data-testid={`button-reject-user-${user.id}`}\n                              >\n                                <XCircle size={16} className=\"mr-1\" />\n                                Reject\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Pending Providers Section */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                  <Briefcase size={20} />\n                  Pending Service Providers ({pendingProviders.length})\n                </h3>\n                {pendingProviders.length === 0 && pendingUsers.length === 0 ? (\n                <Card data-testid=\"empty-pending\">\n                  <CardContent className=\"text-center py-12\">\n                    <CheckCircle size={48} className=\"mx-auto mb-4 opacity-50 text-green-500\" />\n                    <h3 className=\"text-lg font-semibold\">All caught up!</h3>\n                    <p className=\"text-muted-foreground\">No pending applications to review</p>\n                  </CardContent>\n                </Card>\n                  ) : (\n                  <div className=\"space-y-3\">\n                    {pendingProviders.map((provider) => (\n                  <Card key={provider.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-provider-${provider.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <CardTitle className=\"text-lg\" data-testid={`text-business-name-${provider.id}`}>\n                            {provider.businessName}\n                          </CardTitle>\n                          <CardDescription data-testid={`text-provider-info-${provider.id}`}>\n                            <div className=\"space-y-1\">\n                              <p><strong>Owner:</strong> {provider.user?.name || \"N/A\"}</p>\n                              <p><strong>Phone:</strong> {provider.user?.phoneNumber}</p>\n                              <p><strong>Email:</strong> {provider.user?.email || \"N/A\"}</p>\n                              <p><strong>Location:</strong> {provider.location}</p>\n                            </div>\n                          </CardDescription>\n                        </div>\n                        <div className=\"flex flex-col items-end gap-2\">\n                          <Badge variant=\"outline\" data-testid={`badge-status-${provider.id}`}>\n                            <Clock size={14} className=\"mr-1\" />\n                            Pending Review\n                          </Badge>\n                          {provider.documentsUploaded && (\n                            <Badge variant=\"secondary\" data-testid={`badge-docs-${provider.id}`}>\n                              Documents Uploaded\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Business Details</h4>\n                          <p className=\"text-muted-foreground text-sm\" data-testid={`text-details-${provider.id}`}>\n                            {provider.businessDetails}\n                          </p>\n                        </div>\n                        \n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Service Categories</h4>\n                          <div className=\"flex flex-wrap gap-2\" data-testid={`categories-${provider.id}`}>\n                            {provider.serviceCategories.map((category, index) => (\n                              <Badge key={index} variant=\"outline\">{category}</Badge>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center justify-between pt-4 border-t\">\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              data-testid={`button-view-docs-${provider.id}`}\n                            >\n                              <Eye size={14} className=\"mr-1\" />\n                              View Documents\n                            </Button>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => handleReject(provider.userId)}\n                              disabled={rejectMutation.isPending}\n                              data-testid={`button-reject-${provider.id}`}\n                            >\n                              <XCircle size={14} className=\"mr-1\" />\n                              Reject\n                            </Button>\n                            <Button\n                              onClick={() => handleApprove(provider.userId)}\n                              disabled={approveMutation.isPending}\n                              size=\"sm\"\n                              data-testid={`button-approve-${provider.id}`}\n                            >\n                              <CheckCircle size={14} className=\"mr-1\" />\n                              Approve\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-xl font-semibold\">User Management</h3>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Search className=\"h-4 w-4 mr-2\" />\n                  Search Users\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Filter\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick User Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    View All Users\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Blocked Users\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Briefcase className=\"h-4 w-4 mr-2\" />\n                    Provider Profiles\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Wallet className=\"h-4 w-4 mr-2\" />\n                    Add Provider Balance\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>User Statistics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Customers:</span>\n                      <span className=\"font-medium\">158</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Providers:</span>\n                      <span className=\"font-medium\">89</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Blocked Users:</span>\n                      <span className=\"font-medium text-red-600\">3</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>New This Month:</span>\n                      <span className=\"font-medium text-green-600\">42</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Jobs Management Tab */}\n          <TabsContent value=\"jobs\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-xl font-semibold\">Job Management</h3>\n              <Button variant=\"outline\" size=\"sm\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                View All Jobs\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Job Statistics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-600\">89</div>\n                      <p className=\"text-sm text-muted-foreground\">Open Jobs</p>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-blue-600\">67</div>\n                      <p className=\"text-sm text-muted-foreground\">Closed Jobs</p>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-red-600\">3</div>\n                      <p className=\"text-sm text-muted-foreground\">Flagged Jobs</p>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-orange-600\">12</div>\n                      <p className=\"text-sm text-muted-foreground\">Under Review</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Job Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    Review Flagged Jobs\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <XCircle className=\"h-4 w-4 mr-2\" />\n                    Remove Spam Jobs\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Update Job Status\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Wallet & Pricing Tab */}\n          <TabsContent value=\"wallet\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-xl font-semibold\">Wallet & Pricing Management</h3>\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Global Unlock Fee</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-green-600 mb-2\">₹100</div>\n                  <p className=\"text-sm text-muted-foreground mb-4\">Current unlock fee per job</p>\n                  <Button size=\"sm\" data-testid=\"update-unlock-fee\">\n                    Update Pricing\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Provider Wallet Summary</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Total Balance:</span>\n                      <span className=\"font-medium\">₹25,400</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Active Providers:</span>\n                      <span className=\"font-medium\">89</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Avg. Balance:</span>\n                      <span className=\"font-medium\">₹285</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Transaction Overview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Today's Transactions:</span>\n                      <span className=\"font-medium\">24</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Revenue Today:</span>\n                      <span className=\"font-medium text-green-600\">₹2,400</span>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                      View Transaction Logs\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Pricing Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Home Cleaning:</span>\n                      <span className=\"font-medium\">₹100</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Plumbing:</span>\n                      <span className=\"font-medium\">₹150</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Electrical:</span>\n                      <span className=\"font-medium\">₹120</span>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    Update Category Pricing\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" data-testid=\"tab-content-settings\">\n            <Card data-testid=\"settings-card\">\n              <CardHeader>\n                <CardTitle data-testid=\"text-platform-settings\">Platform Settings</CardTitle>\n                <CardDescription data-testid=\"text-settings-description\">\n                  Configure platform-wide settings and pricing\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold mb-2\">Current Settings</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Job Unlock Price:</span>\n                        <span className=\"font-semibold\">₹100</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Max Unlocks per Job:</span>\n                        <span className=\"font-semibold\">3</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Default Service Radius:</span>\n                        <span className=\"font-semibold\">5 km</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Max Service Radius:</span>\n                        <span className=\"font-semibold\">20 km</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    <p>Advanced settings panel coming soon</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":35471},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authUtils } from \"@/lib/auth\";\nimport { ArrowLeft } from \"lucide-react\";\n\nconst phoneSchema = z.object({\n  phoneNumber: z.string().min(10, \"Phone number must be at least 10 digits\"),\n});\n\nconst otpSchema = z.object({\n  code: z.string().min(6, \"OTP must be 6 digits\"),\n});\n\ntype PhoneFormData = z.infer<typeof phoneSchema>;\ntype OTPFormData = z.infer<typeof otpSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState<\"phone\" | \"otp\">(\"phone\");\n  const [phoneData, setPhoneData] = useState<PhoneFormData | null>(null);\n  const { toast } = useToast();\n\n  const phoneForm = useForm<PhoneFormData>({\n    resolver: zodResolver(phoneSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n    },\n  });\n\n  const otpForm = useForm<OTPFormData>({\n    resolver: zodResolver(otpSchema),\n    defaultValues: {\n      code: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: PhoneFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      setPhoneData(variables);\n      setStep(\"otp\");\n      toast({\n        title: \"OTP Sent\",\n        description: \"Please check your phone for the verification code.\",\n      });\n      \n      // In development, show and auto-fill the OTP code\n      if (data.code) {\n        otpForm.setValue(\"code\", data.code);\n        toast({\n          title: \"Development Mode\",\n          description: `Your OTP code is: ${data.code} (Auto-filled)`,\n          variant: \"default\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Please check your phone number.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyMutation = useMutation({\n    mutationFn: async (data: OTPFormData) => {\n      if (!phoneData) throw new Error(\"Phone data not found\");\n      \n      const response = await apiRequest(\"POST\", \"/api/auth/login-verify\", {\n        ...phoneData,\n        code: data.code,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Save user to localStorage\n      authUtils.saveUser(data.user);\n      \n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome back!\",\n      });\n      \n      // Redirect based on user type\n      switch (data.user.userType) {\n        case \"customer\":\n          setLocation(\"/customer/dashboard\");\n          break;\n        case \"provider\":\n          setLocation(\"/provider/dashboard\");\n          break;\n        case \"admin\":\n          setLocation(\"/admin/dashboard\");\n          break;\n        default:\n          setLocation(\"/\");\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid OTP code.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onPhoneSubmit = (data: PhoneFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onOTPSubmit = (data: OTPFormData) => {\n    verifyMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"login-page\">\n      <Card className=\"w-full max-w-md\" data-testid=\"login-card\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2\">\n            {step === \"otp\" && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setStep(\"phone\")}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft size={16} />\n              </Button>\n            )}\n            <CardTitle className=\"text-2xl font-bold\" data-testid=\"text-login-title\">\n              {step === \"phone\" ? \"Welcome Back\" : \"Verify Phone\"}\n            </CardTitle>\n          </div>\n          <CardDescription data-testid=\"text-login-description\">\n            {step === \"phone\" \n              ? \"Enter your phone number to sign in\" \n              : \"Enter the 6-digit code sent to your phone\"\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {step === \"phone\" ? (\n            <Form {...phoneForm}>\n              <form onSubmit={phoneForm.handleSubmit(onPhoneSubmit)} className=\"space-y-4\" data-testid=\"form-phone\">\n                <FormField\n                  control={phoneForm.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"+1234567890\"\n                          type=\"tel\"\n                          {...field}\n                          data-testid=\"input-phone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-send-otp\"\n                >\n                  {loginMutation.isPending ? \"Sending...\" : \"Send OTP\"}\n                </Button>\n              </form>\n            </Form>\n          ) : (\n            <Form {...otpForm}>\n              <form onSubmit={otpForm.handleSubmit(onOTPSubmit)} className=\"space-y-4\" data-testid=\"form-otp\">\n                <FormField\n                  control={otpForm.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Verification Code</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter 6-digit OTP\"\n                          maxLength={6}\n                          className=\"text-center text-lg font-mono tracking-widest\"\n                          {...field}\n                          data-testid=\"input-otp\"\n                          autoComplete=\"one-time-code\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={verifyMutation.isPending}\n                  data-testid=\"button-verify-otp\"\n                >\n                  {verifyMutation.isPending ? \"Verifying...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n          )}\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Button variant=\"link\" className=\"p-0\" onClick={() => setLocation(\"/auth/register\")} data-testid=\"link-register\">\n                Sign Up\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7883},"client/src/pages/auth/register.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft } from \"lucide-react\";\n\nconst phoneSchema = z.object({\n  phoneNumber: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  userType: z.enum([\"customer\", \"provider\"]),\n});\n\nconst otpSchema = z.object({\n  code: z.string().min(6, \"OTP must be 6 digits\"),\n});\n\ntype PhoneFormData = z.infer<typeof phoneSchema>;\ntype OTPFormData = z.infer<typeof otpSchema>;\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState<\"phone\" | \"otp\">(\"phone\");\n  const [phoneData, setPhoneData] = useState<PhoneFormData | null>(null);\n  const { toast } = useToast();\n\n  const phoneForm = useForm<PhoneFormData>({\n    resolver: zodResolver(phoneSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      userType: \"customer\",\n    },\n  });\n\n  const otpForm = useForm<OTPFormData>({\n    resolver: zodResolver(otpSchema),\n    defaultValues: {\n      code: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: PhoneFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      setPhoneData(variables);\n      setStep(\"otp\");\n      toast({\n        title: \"OTP Sent\",\n        description: \"Please check your phone for the verification code.\",\n      });\n      \n      // In development, show and auto-fill the OTP code\n      if (data.code) {\n        otpForm.setValue(\"code\", data.code);\n        toast({\n          title: \"Development Mode\",\n          description: `Your OTP code is: ${data.code} (Auto-filled)`,\n          variant: \"default\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyMutation = useMutation({\n    mutationFn: async (data: OTPFormData) => {\n      if (!phoneData) throw new Error(\"Phone data not found\");\n      \n      const response = await apiRequest(\"POST\", \"/api/auth/verify-otp\", {\n        ...phoneData,\n        code: data.code,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Registration Successful\",\n        description: \"Your account has been created successfully.\",\n      });\n      \n      // Redirect to profile completion based on user type\n      if (phoneData?.userType === \"customer\") {\n        setLocation(`/profile/customer?userId=${data.user.id}`);\n      } else {\n        setLocation(`/profile/provider?userId=${data.user.id}`);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid OTP code.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onPhoneSubmit = (data: PhoneFormData) => {\n    registerMutation.mutate(data);\n  };\n\n  const onOTPSubmit = (data: OTPFormData) => {\n    verifyMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"register-page\">\n      <Card className=\"w-full max-w-md\" data-testid=\"register-card\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2\">\n            {step === \"otp\" && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setStep(\"phone\")}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft size={16} />\n              </Button>\n            )}\n            <CardTitle className=\"text-2xl font-bold\" data-testid=\"text-register-title\">\n              {step === \"phone\" ? \"Create Account\" : \"Verify Phone\"}\n            </CardTitle>\n          </div>\n          <CardDescription data-testid=\"text-register-description\">\n            {step === \"phone\" \n              ? \"Enter your phone number to get started\" \n              : \"Enter the 6-digit code sent to your phone\"\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {step === \"phone\" ? (\n            <Form {...phoneForm}>\n              <form onSubmit={phoneForm.handleSubmit(onPhoneSubmit)} className=\"space-y-4\" data-testid=\"form-phone\">\n                <FormField\n                  control={phoneForm.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"+1234567890\"\n                          type=\"tel\"\n                          {...field}\n                          data-testid=\"input-phone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={phoneForm.control}\n                  name=\"userType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>I am a</FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          value={field.value}\n                          onValueChange={field.onChange}\n                          data-testid=\"radio-user-type\"\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"customer\" id=\"customer\" data-testid=\"radio-customer\" />\n                            <Label htmlFor=\"customer\">Customer (Looking for services)</Label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"provider\" id=\"provider\" data-testid=\"radio-provider\" />\n                            <Label htmlFor=\"provider\">Service Provider (Offering services)</Label>\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-send-otp\"\n                >\n                  {registerMutation.isPending ? \"Sending...\" : \"Send OTP\"}\n                </Button>\n              </form>\n            </Form>\n          ) : (\n            <Form {...otpForm}>\n              <form onSubmit={otpForm.handleSubmit(onOTPSubmit)} className=\"space-y-4\" data-testid=\"form-otp\">\n                <FormField\n                  control={otpForm.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Verification Code</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter 6-digit OTP\"\n                          maxLength={6}\n                          className=\"text-center text-lg font-mono tracking-widest\"\n                          {...field}\n                          data-testid=\"input-otp\"\n                          autoComplete=\"one-time-code\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={verifyMutation.isPending}\n                  data-testid=\"button-verify-otp\"\n                >\n                  {verifyMutation.isPending ? \"Verifying...\" : \"Verify & Create Account\"}\n                </Button>\n              </form>\n            </Form>\n          )}\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Button variant=\"link\" className=\"p-0\" onClick={() => setLocation(\"/auth/login\")} data-testid=\"link-login\">\n                Sign In\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9204},"client/src/pages/customer/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authUtils, type User } from \"@/lib/auth\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { Plus, MapPin, Clock, CheckCircle, AlertCircle, Star, MessageSquare, RotateCcw, Eye, XCircle } from \"lucide-react\";\n\ninterface Job {\n  id: string;\n  title: string;\n  category: string;\n  description: string;\n  location: string;\n  status: \"open\" | \"closed\";\n  unlockCount: number;\n  maxUnlocks: number;\n  createdAt: string;\n  budget?: string;\n  rating?: number;\n  review?: string;\n  hasReview?: boolean;\n  isExpired?: boolean;\n}\n\ninterface UnlockedJob {\n  id: string;\n  jobId: string;\n  providerId: string;\n  providerName: string;\n  providerPhone: string;\n  providerRating: number;\n  unlockedAt: string;\n  whatsappLink?: string;\n}\n\nexport default function CustomerDashboard() {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n  const [reviewJobId, setReviewJobId] = useState<string | null>(null);\n  const [rating, setRating] = useState(5);\n  const [reviewComment, setReviewComment] = useState(\"\");\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check authentication\n  useEffect(() => {\n    const existingUser = authUtils.getUser();\n    if (!existingUser) {\n      setLocation(\"/\");\n      return;\n    }\n    setUser(existingUser);\n  }, [setLocation]);\n\n  const handleSignOut = () => {\n    authUtils.removeUser();\n    setUser(null);\n    setLocation(\"/\");\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out.\",\n    });\n  };\n\n  const { data: jobsData, isLoading } = useQuery({\n    queryKey: [\"/api/jobs/customer\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const { data: unlockedData } = useQuery({\n    queryKey: [\"/api/jobs/unlocked\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const jobs: Job[] = (jobsData as any)?.jobs || [];\n  const unlockedJobs: UnlockedJob[] = (unlockedData as any)?.unlockedJobs || [];\n  const activeJobs = jobs.filter(job => job.status === \"open\");\n  const completedJobs = jobs.filter(job => job.status === \"closed\");\n\n  // Job Management Mutations\n  const closeJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const response = await apiRequest(\"POST\", `/api/jobs/${jobId}/close`);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs/customer\", user?.id] });\n      toast({ title: \"Job closed successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to close job\", variant: \"destructive\" });\n    },\n  });\n\n  const reopenJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const response = await apiRequest(\"POST\", `/api/jobs/${jobId}/reopen`);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs/customer\", user?.id] });\n      toast({ title: \"Job reopened successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to reopen job\", variant: \"destructive\" });\n    },\n  });\n\n  const hireAgainMutation = useMutation({\n    mutationFn: async (job: Job) => {\n      const response = await apiRequest(\"POST\", \"/api/jobs/hire-again\", {\n        originalJobId: job.id,\n        title: job.title,\n        category: job.category,\n        description: job.description,\n        location: job.location,\n        budget: job.budget,\n        customerId: user?.id\n      });\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs/customer\", user?.id] });\n      toast({ title: \"Job reposted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to repost job\", variant: \"destructive\" });\n    },\n  });\n\n  const reviewMutation = useMutation({\n    mutationFn: async ({ jobId, providerId, rating, comment }: {\n      jobId: string;\n      providerId: string;\n      rating: number;\n      comment: string;\n    }) => {\n      const response = await apiRequest(\"POST\", `/api/reviews`, {\n        jobId,\n        customerId: user?.id,\n        providerId,\n        rating,\n        comment\n      });\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs/customer\", user?.id] });\n      setReviewJobId(null);\n      setRating(5);\n      setReviewComment(\"\");\n      toast({ title: \"Review submitted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to submit review\", variant: \"destructive\" });\n    },\n  });\n\n  const getStatusIcon = (job: Job) => {\n    if (job.status === \"closed\") return <CheckCircle className=\"text-green-500\" size={16} />;\n    if (job.isExpired) return <XCircle className=\"text-red-500\" size={16} />;\n    if (job.unlockCount >= job.maxUnlocks) return <AlertCircle className=\"text-yellow-500\" size={16} />;\n    return <Clock className=\"text-blue-500\" size={16} />;\n  };\n\n  const getStatusText = (job: Job) => {\n    if (job.status === \"closed\") return \"Completed\";\n    if (job.isExpired) return \"Expired\";\n    if (job.unlockCount >= job.maxUnlocks) return \"Providers found\";\n    return \"Waiting for providers\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\" data-testid=\"loading-state\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"customer-dashboard\">\n      <Navbar \n        user={user}\n        onSignIn={() => setShowAuthModal(true)}\n        onSignOut={handleSignOut}\n      />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\" data-testid=\"dashboard-header\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-welcome\">Welcome back, {user?.name}!</h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-subtitle\">Manage your service requests and find trusted providers</p>\n          </div>\n          <Button onClick={() => setLocation(\"/customer/post-job\")} data-testid=\"button-post-job\">\n            <Plus size={16} className=\"mr-2\" />\n            Post New Job\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\" data-testid=\"stats-cards\">\n          <Card data-testid=\"card-total-jobs\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Jobs</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-jobs\">{jobs.length}</div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"card-active-jobs\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Active Jobs</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-active-jobs\">{activeJobs.length}</div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"card-completed-jobs\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Completed Jobs</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-completed-jobs\">{completedJobs.length}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Enhanced Jobs Tabs */}\n        <Tabs defaultValue=\"active\" className=\"space-y-6\" data-testid=\"jobs-tabs\">\n          <TabsList data-testid=\"tabs-list\">\n            <TabsTrigger value=\"active\" data-testid=\"tab-active\">Active Jobs ({activeJobs.length})</TabsTrigger>\n            <TabsTrigger value=\"unlocked\" data-testid=\"tab-unlocked\">Unlocked ({unlockedJobs.length})</TabsTrigger>\n            <TabsTrigger value=\"completed\" data-testid=\"tab-completed\">Completed ({completedJobs.length})</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"active\" data-testid=\"tab-content-active\">\n            <div className=\"space-y-4\">\n              {activeJobs.length === 0 ? (\n                <Card data-testid=\"empty-state-active\">\n                  <CardContent className=\"text-center py-12\">\n                    <div className=\"text-muted-foreground mb-4\">\n                      <Plus size={48} className=\"mx-auto mb-4 opacity-50\" />\n                      <h3 className=\"text-lg font-semibold\">No active jobs</h3>\n                      <p>Post your first job to get started</p>\n                    </div>\n                    <Button onClick={() => setLocation(\"/customer/post-job\")} data-testid=\"button-post-first-job\">\n                      Post a Job\n                    </Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                activeJobs.map((job) => (\n                  <Card key={job.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-job-${job.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <CardTitle className=\"text-lg\" data-testid={`text-job-title-${job.id}`}>{job.title}</CardTitle>\n                          <CardDescription data-testid={`text-job-category-${job.id}`}>\n                            <Badge variant=\"secondary\" className=\"mr-2\">{job.category}</Badge>\n                            <span className=\"flex items-center gap-1 text-sm\">\n                              <MapPin size={14} />\n                              {job.location}\n                            </span>\n                          </CardDescription>\n                        </div>\n                        <div className=\"flex items-center gap-2\" data-testid={`status-${job.id}`}>\n                          {getStatusIcon(job)}\n                          <span className=\"text-sm text-muted-foreground\">{getStatusText(job)}</span>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-muted-foreground mb-4\" data-testid={`text-job-description-${job.id}`}>{job.description}</p>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <span className=\"text-sm text-muted-foreground\" data-testid={`text-providers-count-${job.id}`}>\n                          {job.unlockCount} of {job.maxUnlocks} providers found\n                        </span>\n                        <span className=\"text-sm text-muted-foreground\" data-testid={`text-job-date-${job.id}`}>\n                          Posted {new Date(job.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                      <div className=\"flex gap-2\" data-testid={`actions-${job.id}`}>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => closeJobMutation.mutate(job.id)}\n                          disabled={closeJobMutation.isPending}\n                          data-testid={`button-close-${job.id}`}\n                        >\n                          <XCircle size={14} className=\"mr-1\" />\n                          Close Job\n                        </Button>\n                        {job.unlockCount > 0 && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setLocation(`/jobs/${job.id}/unlocked`)}\n                            data-testid={`button-view-providers-${job.id}`}\n                          >\n                            <Eye size={14} className=\"mr-1\" />\n                            View Providers\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"completed\" data-testid=\"tab-content-completed\">\n            <div className=\"space-y-4\">\n              {completedJobs.length === 0 ? (\n                <Card data-testid=\"empty-state-completed\">\n                  <CardContent className=\"text-center py-12\">\n                    <div className=\"text-muted-foreground\">\n                      <CheckCircle size={48} className=\"mx-auto mb-4 opacity-50\" />\n                      <h3 className=\"text-lg font-semibold\">No completed jobs yet</h3>\n                      <p>Completed jobs will appear here</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                completedJobs.map((job) => (\n                  <Card key={job.id} className=\"opacity-75\" data-testid={`card-completed-job-${job.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <CardTitle className=\"text-lg\" data-testid={`text-completed-title-${job.id}`}>{job.title}</CardTitle>\n                          <CardDescription data-testid={`text-completed-category-${job.id}`}>\n                            <Badge variant=\"secondary\" className=\"mr-2\">{job.category}</Badge>\n                            <span className=\"flex items-center gap-1 text-sm\">\n                              <MapPin size={14} />\n                              {job.location}\n                            </span>\n                          </CardDescription>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-green-600\" data-testid={`badge-completed-${job.id}`}>\n                          <CheckCircle size={14} className=\"mr-1\" />\n                          Completed\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-muted-foreground mb-4\" data-testid={`text-completed-description-${job.id}`}>{job.description}</p>\n                      {job.hasReview ? (\n                        <div className=\"flex items-center gap-2 mb-4\">\n                          <div className=\"flex items-center\">\n                            {[...Array(5)].map((_, i) => (\n                              <Star\n                                key={i}\n                                size={14}\n                                className={i < (job.rating || 0) ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"}\n                              />\n                            ))}\n                          </div>\n                          <span className=\"text-sm text-muted-foreground\">Review submitted</span>\n                        </div>\n                      ) : (\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\" className=\"mb-4\" data-testid={`button-review-${job.id}`}>\n                              <Star size={14} className=\"mr-1\" />\n                              Rate & Review\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle>Rate & Review</DialogTitle>\n                              <DialogDescription>\n                                How was your experience with the service provider?\n                              </DialogDescription>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label>Rating</Label>\n                                <div className=\"flex items-center gap-1 mt-1\">\n                                  {[1, 2, 3, 4, 5].map((star) => (\n                                    <button\n                                      key={star}\n                                      type=\"button\"\n                                      onClick={() => setRating(star)}\n                                      className=\"text-2xl hover:scale-110 transition-transform\"\n                                    >\n                                      <Star\n                                        size={24}\n                                        className={star <= rating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"}\n                                      />\n                                    </button>\n                                  ))}\n                                </div>\n                              </div>\n                              <div>\n                                <Label htmlFor=\"review-comment\">Comment (Optional)</Label>\n                                <Textarea\n                                  id=\"review-comment\"\n                                  value={reviewComment}\n                                  onChange={(e) => setReviewComment(e.target.value)}\n                                  placeholder=\"Share your experience...\"\n                                  rows={3}\n                                />\n                              </div>\n                            </div>\n                            <DialogFooter>\n                              <Button\n                                onClick={() => reviewMutation.mutate({\n                                  jobId: job.id,\n                                  providerId: \"provider-1\", // This would come from job data\n                                  rating,\n                                  comment: reviewComment\n                                })}\n                                disabled={reviewMutation.isPending}\n                              >\n                                Submit Review\n                              </Button>\n                            </DialogFooter>\n                          </DialogContent>\n                        </Dialog>\n                      )}\n                      <div className=\"flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => reopenJobMutation.mutate(job.id)}\n                          disabled={reopenJobMutation.isPending}\n                          data-testid={`button-reopen-${job.id}`}\n                        >\n                          <RotateCcw size={14} className=\"mr-1\" />\n                          Reopen\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => hireAgainMutation.mutate(job)}\n                          disabled={hireAgainMutation.isPending}\n                          data-testid={`button-hire-again-${job.id}`}\n                        >\n                          <Plus size={14} className=\"mr-1\" />\n                          Hire Again\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          {/* New Unlocked Jobs Tab */}\n          <TabsContent value=\"unlocked\" data-testid=\"tab-content-unlocked\">\n            <div className=\"space-y-4\">\n              {unlockedJobs.length === 0 ? (\n                <Card data-testid=\"empty-state-unlocked\">\n                  <CardContent className=\"text-center py-12\">\n                    <div className=\"text-muted-foreground\">\n                      <Eye size={48} className=\"mx-auto mb-4 opacity-50\" />\n                      <h3 className=\"text-lg font-semibold\">No unlocked providers yet</h3>\n                      <p>Provider details will appear here when they show interest in your jobs</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                unlockedJobs.map((unlock) => (\n                  <Card key={unlock.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-unlocked-${unlock.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <CardTitle className=\"text-lg\" data-testid={`text-provider-name-${unlock.id}`}>\n                            {unlock.providerName}\n                          </CardTitle>\n                          <CardDescription>\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"flex items-center\">\n                                {[...Array(5)].map((_, i) => (\n                                  <Star\n                                    key={i}\n                                    size={14}\n                                    className={i < unlock.providerRating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"}\n                                  />\n                                ))}\n                                <span className=\"text-sm ml-1\">({unlock.providerRating}.0)</span>\n                              </div>\n                            </div>\n                          </CardDescription>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-green-600\">\n                          <CheckCircle size={14} className=\"mr-1\" />\n                          Available\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`text-unlocked-date-${unlock.id}`}>\n                            Unlocked on {new Date(unlock.unlockedAt).toLocaleDateString()}\n                          </p>\n                          <p className=\"text-sm font-medium\" data-testid={`text-provider-phone-${unlock.id}`}>\n                            📞 {unlock.providerPhone}\n                          </p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {unlock.whatsappLink && (\n                            <Button size=\"sm\" asChild data-testid={`button-whatsapp-${unlock.id}`}>\n                              <a href={unlock.whatsappLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                                <MessageSquare size={14} className=\"mr-1\" />\n                                WhatsApp\n                              </a>\n                            </Button>\n                          )}\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-call-${unlock.id}`}>\n                            📞 Call Now\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":24374},"client/src/pages/customer/post-job.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, MapPin, Briefcase, FileText } from \"lucide-react\";\n\nconst jobSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  category: z.string().min(1, \"Please select a category\"),\n  description: z.string().min(20, \"Description must be at least 20 characters\"),\n  location: z.string().min(5, \"Please enter the service location\"),\n  latitude: z.string().optional(),\n  longitude: z.string().optional(),\n});\n\ntype JobFormData = z.infer<typeof jobSchema>;\n\n// Categories will be fetched dynamically\n\nexport default function PostJob() {\n  const [, setLocation] = useLocation();\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const [user] = useState({ id: \"36e9478b-1381-4fd8-8342-0d1905343017\" }); // Using actual logged-in user ID\n  const { toast } = useToast();\n\n  const { data: categoriesData } = useQuery({\n    queryKey: [\"/api/categories\"],\n    enabled: true,\n  });\n\n  const serviceCategories = (categoriesData as any)?.categories || [];\n\n  const form = useForm<JobFormData>({\n    resolver: zodResolver(jobSchema),\n    defaultValues: {\n      title: \"\",\n      category: \"\",\n      description: \"\",\n      location: \"\",\n      latitude: \"\",\n      longitude: \"\",\n    },\n  });\n\n  const postJobMutation = useMutation({\n    mutationFn: async (data: JobFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/jobs\", {\n        customerId: user.id,\n        title: data.title,\n        category: data.category,\n        description: data.description,\n        location: data.location,\n        latitude: data.latitude || null,\n        longitude: data.longitude || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Job Posted Successfully\",\n        description: \"Your job has been posted and nearby service providers will be notified.\",\n      });\n      setLocation(\"/customer/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Post Job\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getCurrentLocation = () => {\n    setIsGettingLocation(true);\n    \n    if (!navigator.geolocation) {\n      toast({\n        title: \"Location not supported\",\n        description: \"Your browser doesn't support geolocation.\",\n        variant: \"destructive\",\n      });\n      setIsGettingLocation(false);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n        \n        try {\n          // Use reverse geocoding to get address\n          const response = await fetch(\n            `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`\n          );\n          const data = await response.json();\n          \n          form.setValue(\"location\", data.display_name || `${latitude}, ${longitude}`);\n          form.setValue(\"latitude\", latitude.toString());\n          form.setValue(\"longitude\", longitude.toString());\n          \n          toast({\n            title: \"Location detected\",\n            description: \"Your current location has been added.\",\n          });\n        } catch (error) {\n          form.setValue(\"location\", `${latitude}, ${longitude}`);\n          form.setValue(\"latitude\", latitude.toString());\n          form.setValue(\"longitude\", longitude.toString());\n        }\n        \n        setIsGettingLocation(false);\n      },\n      (error) => {\n        toast({\n          title: \"Location access denied\",\n          description: \"Please enter the location manually.\",\n          variant: \"destructive\",\n        });\n        setIsGettingLocation(false);\n      }\n    );\n  };\n\n  const onSubmit = (data: JobFormData) => {\n    postJobMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"post-job-page\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\" data-testid=\"page-header\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/customer/dashboard\")}\n            className=\"mb-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft size={16} className=\"mr-2\" />\n            Back to Dashboard\n          </Button>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Post a New Job</h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-page-description\">\n            Describe your service requirements to connect with qualified providers\n          </p>\n        </div>\n\n        <div className=\"max-w-2xl mx-auto\">\n          <Card data-testid=\"job-form-card\">\n            <CardHeader>\n              <CardTitle data-testid=\"text-form-title\">Job Details</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"form-job\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Briefcase size={16} />\n                          Job Title\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"e.g., House cleaning service needed\"\n                            {...field}\n                            data-testid=\"input-title\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Service Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Select a category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {serviceCategories.map((category: string) => (\n                              <SelectItem key={category} value={category} data-testid={`option-${category.toLowerCase().replace(/\\s+/g, '-')}`}>\n                                {category}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <FileText size={16} />\n                          Job Description\n                        </FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Describe your requirements in detail. Include any specific needs, preferences, or timing requirements.\"\n                            className=\"min-h-[120px]\"\n                            {...field}\n                            data-testid=\"textarea-description\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <MapPin size={16} />\n                          Service Location\n                        </FormLabel>\n                        <div className=\"flex gap-2\">\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter the address where service is needed\"\n                              {...field}\n                              data-testid=\"input-location\"\n                            />\n                          </FormControl>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={getCurrentLocation}\n                            disabled={isGettingLocation}\n                            data-testid=\"button-get-location\"\n                          >\n                            {isGettingLocation ? \"Getting...\" : \"Use Current\"}\n                          </Button>\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"bg-muted/50 p-4 rounded-lg\" data-testid=\"posting-info\">\n                    <h3 className=\"font-semibold mb-2\">What happens next?</h3>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• Nearby service providers will be notified instantly</li>\n                      <li>• Up to 3 providers can unlock your contact details</li>\n                      <li>• You'll receive direct contact from interested providers</li>\n                      <li>• Choose the best provider for your needs</li>\n                    </ul>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={postJobMutation.isPending}\n                    data-testid=\"button-post-job\"\n                  >\n                    {postJobMutation.isPending ? \"Posting Job...\" : \"Post Job\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11246},"client/src/pages/customer/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MapPin, User, Mail } from \"lucide-react\";\n\nconst profileSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  location: z.string().min(5, \"Please enter your complete address\"),\n  latitude: z.string().optional(),\n  longitude: z.string().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nexport default function CustomerProfile() {\n  const [, setLocation] = useLocation();\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const { toast } = useToast();\n\n  // Get userId from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const userId = urlParams.get('userId');\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      location: \"\",\n      latitude: \"\",\n      longitude: \"\",\n    },\n  });\n\n  const profileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      if (!userId) throw new Error(\"User ID not found\");\n      \n      const response = await apiRequest(\"POST\", \"/api/profiles/customer\", {\n        userId,\n        name: data.name,\n        email: data.email,\n        location: data.location,\n        latitude: data.latitude || null,\n        longitude: data.longitude || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Created\",\n        description: \"Your customer profile has been set up successfully.\",\n      });\n      setLocation(\"/customer/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Profile Setup Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getCurrentLocation = () => {\n    setIsGettingLocation(true);\n    \n    if (!navigator.geolocation) {\n      toast({\n        title: \"Location not supported\",\n        description: \"Your browser doesn't support geolocation.\",\n        variant: \"destructive\",\n      });\n      setIsGettingLocation(false);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n        \n        try {\n          // Use reverse geocoding to get address (in a real app, you'd use Google Maps API)\n          const response = await fetch(\n            `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`\n          );\n          const data = await response.json();\n          \n          form.setValue(\"location\", data.display_name || `${latitude}, ${longitude}`);\n          form.setValue(\"latitude\", latitude.toString());\n          form.setValue(\"longitude\", longitude.toString());\n          \n          toast({\n            title: \"Location detected\",\n            description: \"Your current location has been added to your profile.\",\n          });\n        } catch (error) {\n          form.setValue(\"location\", `${latitude}, ${longitude}`);\n          form.setValue(\"latitude\", latitude.toString());\n          form.setValue(\"longitude\", longitude.toString());\n        }\n        \n        setIsGettingLocation(false);\n      },\n      (error) => {\n        toast({\n          title: \"Location access denied\",\n          description: \"Please enter your location manually.\",\n          variant: \"destructive\",\n        });\n        setIsGettingLocation(false);\n      }\n    );\n  };\n\n  const onSubmit = (data: ProfileFormData) => {\n    profileMutation.mutate(data);\n  };\n\n  if (!userId) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"error-state\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <h2 className=\"text-lg font-semibold mb-2\">Invalid Access</h2>\n            <p className=\"text-muted-foreground mb-4\">User information not found.</p>\n            <Button onClick={() => setLocation(\"/auth/register\")} data-testid=\"button-register\">\n              Register Again\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"customer-profile-page\">\n      <Card className=\"w-full max-w-2xl\" data-testid=\"profile-card\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold\" data-testid=\"text-profile-title\">Complete Your Profile</CardTitle>\n          <p className=\"text-muted-foreground\" data-testid=\"text-profile-description\">\n            Let's set up your customer profile to get personalized service recommendations\n          </p>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"form-profile\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <User size={16} />\n                        Full Name\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter your full name\"\n                          {...field}\n                          data-testid=\"input-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <Mail size={16} />\n                        Email Address\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter your email\"\n                          type=\"email\"\n                          {...field}\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <MapPin size={16} />\n                      Your Location\n                    </FormLabel>\n                    <div className=\"flex gap-2\">\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter your complete address\"\n                          {...field}\n                          data-testid=\"input-location\"\n                        />\n                      </FormControl>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={getCurrentLocation}\n                        disabled={isGettingLocation}\n                        data-testid=\"button-get-location\"\n                      >\n                        {isGettingLocation ? \"Getting...\" : \"Use Current\"}\n                      </Button>\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"bg-muted/50 p-4 rounded-lg\" data-testid=\"location-note\">\n                <p className=\"text-sm text-muted-foreground\">\n                  <MapPin size={14} className=\"inline mr-1\" />\n                  Your location helps us recommend nearby service providers and show you relevant services in your area.\n                </p>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={profileMutation.isPending}\n                data-testid=\"button-complete-profile\"\n              >\n                {profileMutation.isPending ? \"Creating Profile...\" : \"Complete Profile\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9264},"client/src/pages/profile-completion/customer-profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { customerProfileCompletionSchema, type CustomerProfileCompletion } from \"@shared/schema\";\nimport { MapPin, User, Mail, Lock, Home } from \"lucide-react\";\n\nexport default function CustomerProfile() {\n  const [, setLocation] = useLocation();\n  \n  // Get userId from URL parameters\n  const userId = new URLSearchParams(window.location.search).get(\"userId\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<CustomerProfileCompletion>({\n    resolver: zodResolver(customerProfileCompletionSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      location: \"\",\n    },\n  });\n\n  const profileMutation = useMutation({\n    mutationFn: async (data: CustomerProfileCompletion) => {\n      const response = await apiRequest(\"POST\", \"/api/profile/customer/complete\", {\n        userId: userId,\n        ...data\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Completed!\",\n        description: \"Your profile has been set up successfully.\",\n      });\n      \n      // Redirect to dashboard\n      setLocation(\"/customer/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to complete profile.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CustomerProfileCompletion) => {\n    profileMutation.mutate(data);\n  };\n\n  // Mock Google Maps integration for now\n  const detectLocation = () => {\n    // In production, this would use Google Maps Geolocation API\n    navigator.geolocation?.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        \n        // Mock reverse geocoding - in production would call Google Maps API\n        const mockAddress = \"Koramangala, Bangalore, Karnataka 560095\";\n        \n        form.setValue(\"location\", mockAddress);\n        form.setValue(\"latitude\", latitude);\n        form.setValue(\"longitude\", longitude);\n        \n        toast({\n          title: \"Location Detected\",\n          description: \"Your location has been automatically filled.\",\n        });\n      },\n      () => {\n        toast({\n          title: \"Location Access Denied\",\n          description: \"Please enter your address manually.\",\n          variant: \"destructive\",\n        });\n      }\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"customer-profile-page\">\n      <Card className=\"w-full max-w-2xl\" data-testid=\"profile-form\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold flex items-center gap-2 justify-center\">\n            <User size={24} className=\"text-primary\" />\n            Complete Your Profile\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Please provide your details to start posting jobs\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"form-customer-profile\">\n              {/* Personal Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <User size={18} />\n                  Personal Information\n                </h3>\n                \n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Your full name\" {...field} data-testid=\"input-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"your@email.com\" type=\"email\" {...field} data-testid=\"input-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password (Optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Set a password for future logins\" \n                          type=\"password\" \n                          {...field} \n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Location */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Home size={18} />\n                  Address Information\n                </h3>\n                \n                <FormField\n                  control={form.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <div className=\"flex gap-2\">\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter your complete address\" \n                            {...field} \n                            data-testid=\"input-location\"\n                          />\n                        </FormControl>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={detectLocation}\n                          data-testid=\"button-detect-location\"\n                        >\n                          <MapPin size={16} className=\"mr-1\" />\n                          Detect\n                        </Button>\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-3\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setLocation(\"/\")}\n                  data-testid=\"button-skip\"\n                >\n                  Skip for Now\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={profileMutation.isPending}\n                  data-testid=\"button-complete\"\n                >\n                  {profileMutation.isPending ? \"Saving...\" : \"Complete Profile\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8112},"client/src/pages/profile-completion/provider-profile.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { providerProfileCompletionSchema, type ProviderProfileCompletion } from \"@shared/schema\";\nimport { MapPin, User, Briefcase, FileText, Settings, Upload } from \"lucide-react\";\n\nconst serviceCategories = [\n  \"Home Cleaning\",\n  \"Plumbing\", \n  \"Electrical Work\",\n  \"Carpentry\",\n  \"Painting\",\n  \"HVAC\",\n  \"Appliance Repair\",\n  \"Gardening\",\n  \"Beauty & Spa\",\n  \"Auto Services\",\n  \"Tech Support\",\n  \"Tutoring\",\n  \"Pet Care\",\n  \"Moving Services\",\n  \"Photography\",\n  \"Catering\"\n];\n\nexport default function ProviderProfile() {\n  const [, setLocation] = useLocation();\n  \n  // Get userId from URL parameters\n  const userId = new URLSearchParams(window.location.search).get(\"userId\");\n  const { toast } = useToast();\n  const [step, setStep] = useState(1);\n  const [documents, setDocuments] = useState<File[]>([]);\n  \n  const form = useForm<ProviderProfileCompletion>({\n    resolver: zodResolver(providerProfileCompletionSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      businessName: \"\",\n      businessDetails: \"\",\n      serviceCategories: [],\n      location: \"\",\n      serviceRadius: 5,\n    },\n  });\n\n  const profileMutation = useMutation({\n    mutationFn: async (data: ProviderProfileCompletion) => {\n      // Use JSON format since file upload isn't implemented yet\n      const response = await apiRequest(\"POST\", \"/api/profile/provider/complete\", {\n        userId: userId || '',\n        profileData: data\n      });\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Submitted!\",\n        description: \"Your profile has been submitted for admin approval. You'll be notified once approved.\",\n      });\n      \n      // Redirect to dashboard\n      setLocation(\"/provider/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit profile.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProviderProfileCompletion) => {\n    if (documents.length === 0) {\n      toast({\n        title: \"Documents Required\",\n        description: \"Please upload at least one verification document.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    profileMutation.mutate(data);\n  };\n\n  const detectLocation = () => {\n    navigator.geolocation?.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        const mockAddress = \"Koramangala, Bangalore, Karnataka 560095\";\n        \n        form.setValue(\"location\", mockAddress);\n        form.setValue(\"latitude\", latitude);\n        form.setValue(\"longitude\", longitude);\n        \n        toast({\n          title: \"Location Detected\",\n          description: \"Your business location has been automatically filled.\",\n        });\n      },\n      () => {\n        toast({\n          title: \"Location Access Denied\",\n          description: \"Please enter your business address manually.\",\n          variant: \"destructive\",\n        });\n      }\n    );\n  };\n\n  const handleDocumentUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    const validFiles = files.filter(file => {\n      const isValidType = file.type.startsWith('image/') || file.type === 'application/pdf';\n      const isValidSize = file.size <= 5 * 1024 * 1024; // 5MB limit\n      \n      if (!isValidType) {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Only images and PDF files are allowed.\",\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      \n      if (!isValidSize) {\n        toast({\n          title: \"File Too Large\",\n          description: \"File size must be less than 5MB.\",\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      \n      return true;\n    });\n    \n    setDocuments(prev => [...prev, ...validFiles]);\n  };\n\n  const removeDocument = (index: number) => {\n    setDocuments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const renderStep1 = () => (\n    <div className=\"space-y-6\">\n      {/* Personal Information */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n          <User size={18} />\n          Personal Information\n        </h3>\n        \n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Full Name</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Your full name\" {...field} data-testid=\"input-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email Address</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"your@email.com\" type=\"email\" {...field} data-testid=\"input-email\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password (Optional)</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Set a password for future logins\" \n                  type=\"password\" \n                  {...field} \n                  data-testid=\"input-password\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n    </div>\n  );\n\n  const renderStep2 = () => (\n    <div className=\"space-y-6\">\n      {/* Business Information */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n          <Briefcase size={18} />\n          Business Information\n        </h3>\n        \n        <FormField\n          control={form.control}\n          name=\"businessName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Business Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Your business or service name\" {...field} data-testid=\"input-business-name\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"businessDetails\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Business Details</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Describe your business, experience, and services you provide...\"\n                  className=\"min-h-[120px]\"\n                  {...field} \n                  data-testid=\"input-business-details\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"serviceCategories\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Service Categories</FormLabel>\n              <FormDescription>\n                Select the services you provide (at least one required)\n              </FormDescription>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                {serviceCategories.map((category) => (\n                  <FormItem key={category} className=\"flex items-center space-x-2\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value?.includes(category)}\n                        onCheckedChange={(checked) => {\n                          const updatedCategories = checked\n                            ? [...(field.value || []), category]\n                            : (field.value || []).filter((c) => c !== category);\n                          field.onChange(updatedCategories);\n                        }}\n                        data-testid={`checkbox-${category}`}\n                      />\n                    </FormControl>\n                    <FormLabel className=\"text-sm font-normal\">{category}</FormLabel>\n                  </FormItem>\n                ))}\n              </div>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n    </div>\n  );\n\n  const renderStep3 = () => (\n    <div className=\"space-y-6\">\n      {/* Location & Service Area */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n          <MapPin size={18} />\n          Location & Service Area\n        </h3>\n        \n        <FormField\n          control={form.control}\n          name=\"location\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Business Address</FormLabel>\n              <div className=\"flex gap-2\">\n                <FormControl>\n                  <Input \n                    placeholder=\"Enter your business address\" \n                    {...field} \n                    data-testid=\"input-location\"\n                  />\n                </FormControl>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={detectLocation}\n                  data-testid=\"button-detect-location\"\n                >\n                  <MapPin size={16} className=\"mr-1\" />\n                  Detect\n                </Button>\n              </div>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"serviceRadius\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Service Radius: {field.value} km</FormLabel>\n              <FormControl>\n                <Slider\n                  min={1}\n                  max={20}\n                  step={1}\n                  value={[field.value]}\n                  onValueChange={(value) => field.onChange(value[0])}\n                  data-testid=\"slider-service-radius\"\n                />\n              </FormControl>\n              <FormDescription>\n                How far are you willing to travel for jobs?\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      {/* Document Upload */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n          <FileText size={18} />\n          Verification Documents\n        </h3>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">\n              Upload Documents (ID Proof, GST Certificate, License, etc.)\n            </label>\n            <Input\n              type=\"file\"\n              multiple\n              accept=\"image/*,.pdf\"\n              onChange={handleDocumentUpload}\n              className=\"cursor-pointer\"\n              data-testid=\"input-documents\"\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Accepted formats: Images (JPG, PNG) and PDF. Max size: 5MB per file.\n            </p>\n          </div>\n          \n          {documents.length > 0 && (\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium\">Uploaded Documents:</p>\n              {documents.map((doc, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 border rounded\">\n                  <span className=\"text-sm truncate\">{doc.name}</span>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => removeDocument(index)}\n                    data-testid={`remove-document-${index}`}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"provider-profile-page\">\n      <Card className=\"w-full max-w-3xl\" data-testid=\"profile-form\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold flex items-center gap-2 justify-center\">\n            <Briefcase size={24} className=\"text-primary\" />\n            Complete Provider Profile\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Step {step} of 3 - Please provide your business details for verification\n          </p>\n          \n          {/* Progress Indicator */}\n          <div className=\"flex justify-center gap-2 mt-4\">\n            {[1, 2, 3].map((num) => (\n              <div\n                key={num}\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  step >= num ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n                }`}\n              >\n                {num}\n              </div>\n            ))}\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} data-testid=\"form-provider-profile\">\n              {step === 1 && renderStep1()}\n              {step === 2 && renderStep2()}\n              {step === 3 && renderStep3()}\n\n              <div className=\"flex justify-between pt-6\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => step > 1 ? setStep(step - 1) : setLocation(\"/\")}\n                  data-testid=\"button-back\"\n                >\n                  {step > 1 ? \"Previous\" : \"Skip for Now\"}\n                </Button>\n                \n                {step < 3 ? (\n                  <Button \n                    type=\"button\" \n                    onClick={() => setStep(step + 1)}\n                    data-testid=\"button-next\"\n                  >\n                    Next\n                  </Button>\n                ) : (\n                  <Button \n                    type=\"submit\" \n                    disabled={profileMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {profileMutation.isPending ? \"Submitting...\" : \"Submit for Approval\"}\n                  </Button>\n                )}\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15627},"client/src/pages/provider/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authUtils, type User } from \"@/lib/auth\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { MapPin, Clock, Wallet, Eye, Phone, User as UserIcon, AlertCircle, CheckCircle, Settings, Plus, IndianRupee } from \"lucide-react\";\nimport { AddBalanceModal } from \"@/components/wallet/add-balance-modal\";\n\ninterface Job {\n  id: string;\n  title: string;\n  category: string;\n  description: string;\n  location: string;\n  unlockCount: number;\n  maxUnlocks: number;\n  createdAt: string;\n}\n\ninterface ProviderProfile {\n  status: \"pending\" | \"approved\" | \"rejected\";\n  serviceRadius: number;\n  maxServiceRadius: number;\n}\n\nexport default function ProviderDashboard() {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n  const [radius, setRadius] = useState(5);\n  const [showAddBalanceModal, setShowAddBalanceModal] = useState(false);\n  const { toast } = useToast();\n\n  // Check authentication\n  useEffect(() => {\n    const existingUser = authUtils.getUser();\n    if (!existingUser) {\n      setLocation(\"/\");\n      return;\n    }\n    setUser(existingUser);\n  }, [setLocation]);\n\n  const handleSignOut = () => {\n    authUtils.removeUser();\n    setUser(null);\n    setLocation(\"/\");\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out.\",\n    });\n  };\n\n  // Get provider profile\n  const { data: profileData } = useQuery({\n    queryKey: [\"/api/profiles/provider\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const profile: ProviderProfile = (profileData as any)?.profile || { status: \"pending\", serviceRadius: 5, maxServiceRadius: 20 };\n\n  // Get wallet information\n  const { data: walletData, isLoading: walletLoading } = useQuery({\n    queryKey: [\"/api/wallet\", user?.id],\n    enabled: !!user?.id && profile.status === \"approved\",\n  });\n\n  // Get nearby jobs\n  const { data: jobsData, isLoading: jobsLoading } = useQuery({\n    queryKey: [\"/api/jobs/near\", { latitude: \"40.7128\", longitude: \"-74.0060\", radius }],\n    enabled: profile.status === \"approved\",\n  });\n\n  const jobs: Job[] = (jobsData as any)?.jobs || [];\n  const wallet = (walletData as any)?.wallet;\n  const balance = wallet ? parseFloat(wallet.balance) : 0;\n  const unlockPrice = 100; // ₹100 per unlock\n\n  const unlockJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const response = await apiRequest(\"POST\", `/api/jobs/${jobId}/unlock`, {\n        providerId: user?.id,\n      });\n      return response.json();\n    },\n    onSuccess: (data, jobId) => {\n      toast({\n        title: \"Job Unlocked Successfully\",\n        description: `Customer contact: ${data.customerContact.name} - ${data.customerContact.phoneNumber}`,\n      });\n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet\", user?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs/near\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Unlock Job\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUnlockJob = (jobId: string) => {\n    if (balance < unlockPrice) {\n      toast({\n        title: \"Insufficient Balance\",\n        description: \"Please recharge your wallet to unlock this job.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/provider/wallet\");\n      return;\n    }\n    unlockJobMutation.mutate(jobId);\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  if (profile.status === \"pending\") {\n    return (\n      <div className=\"min-h-screen bg-background\" data-testid=\"pending-approval\">\n        <Navbar \n          user={user}\n          onSignIn={() => {}}\n          onSignOut={handleSignOut}\n        />\n        <div className=\"container mx-auto px-4 py-8\">\n          <Card className=\"max-w-2xl mx-auto text-center\">\n            <CardHeader>\n              <AlertCircle className=\"mx-auto mb-4 text-yellow-500\" size={64} />\n              <CardTitle className=\"text-2xl\" data-testid=\"text-pending-title\">Profile Under Review</CardTitle>\n              <CardDescription data-testid=\"text-pending-description\">\n                Your provider profile and documents are being reviewed by our admin team.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <p className=\"text-muted-foreground\">\n                  We'll notify you once your profile is approved. This usually takes 24-48 hours.\n                </p>\n                <div className=\"bg-muted/50 p-4 rounded-lg text-left\">\n                  <h4 className=\"font-semibold mb-2\">What's being reviewed:</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Business license and registration documents</li>\n                    <li>• Identity verification</li>\n                    <li>• Service qualifications and certifications</li>\n                    <li>• Business address and contact information</li>\n                  </ul>\n                </div>\n                <Button onClick={() => setLocation(\"/\")} data-testid=\"button-home\">\n                  Return to Home\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (profile.status === \"rejected\") {\n    return (\n      <div className=\"min-h-screen bg-background\" data-testid=\"rejected-state\">\n        <Navbar \n          user={user}\n          onSignIn={() => {}}\n          onSignOut={handleSignOut}\n        />\n        <div className=\"container mx-auto px-4 py-8\">\n          <Card className=\"max-w-2xl mx-auto text-center\">\n            <CardHeader>\n              <AlertCircle className=\"mx-auto mb-4 text-red-500\" size={64} />\n              <CardTitle className=\"text-2xl\" data-testid=\"text-rejected-title\">Profile Rejected</CardTitle>\n              <CardDescription data-testid=\"text-rejected-description\">\n                Unfortunately, your provider profile application was not approved.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-4\">\n                Please contact our support team for more details about the rejection reasons.\n              </p>\n              <Button onClick={() => setLocation(\"/\")} data-testid=\"button-contact-support\">\n                Contact Support\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"provider-dashboard\">\n      <Navbar \n        user={user}\n        onSignIn={() => {}}\n        onSignOut={handleSignOut}\n      />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\" data-testid=\"dashboard-header\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-welcome\">Welcome, {user?.name}!</h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-subtitle\">Find jobs and manage your service business</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setLocation(\"/provider/wallet\")}\n              data-testid=\"button-wallet\"\n            >\n              <Wallet size={16} className=\"mr-2\" />\n              Wallet: ₹{balance.toFixed(2)}\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-settings\">\n              <Settings size={16} className=\"mr-2\" />\n              Settings\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\" data-testid=\"stats-cards\">\n          <Card className=\"bg-gradient-to-r from-green-50 to-emerald-50 border-green-200\" data-testid=\"card-wallet-balance\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-green-700 flex items-center gap-2\">\n                <Wallet size={16} />\n                Wallet Balance\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <IndianRupee size={20} className=\"text-green-600\" />\n                <span className=\"text-2xl font-bold text-green-600\" data-testid=\"text-balance\">\n                  {balance.toFixed(2)}\n                </span>\n              </div>\n              <Button \n                size=\"sm\" \n                onClick={() => setShowAddBalanceModal(true)}\n                className=\"w-full bg-green-600 hover:bg-green-700\"\n                data-testid=\"add-balance-card\"\n              >\n                <Plus size={14} className=\"mr-1\" />\n                Add Balance\n              </Button>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"card-available-jobs\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Available Jobs</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-available-jobs\">{jobs.length}</div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"card-service-radius\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Service Radius</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-radius\">{radius} km</div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-status\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Badge variant=\"outline\" className=\"text-green-600\" data-testid=\"badge-status\">\n                <CheckCircle size={14} className=\"mr-1\" />\n                Active\n              </Badge>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Radius Settings */}\n        <Card className=\"mb-8\" data-testid=\"radius-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-radius-title\">\n              <MapPin size={20} />\n              Service Radius Settings\n            </CardTitle>\n            <CardDescription data-testid=\"text-radius-description\">\n              Adjust your service radius to see more or fewer job opportunities\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"radius\">Radius: {radius} km</Label>\n                <Input\n                  id=\"radius\"\n                  type=\"range\"\n                  min=\"5\"\n                  max={profile.maxServiceRadius}\n                  value={radius}\n                  onChange={(e) => setRadius(Number(e.target.value))}\n                  className=\"w-full\"\n                  data-testid=\"slider-radius\"\n                />\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Max: {profile.maxServiceRadius} km\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Jobs */}\n        <Tabs defaultValue=\"available\" className=\"space-y-6\" data-testid=\"jobs-tabs\">\n          <TabsList data-testid=\"tabs-list\">\n            <TabsTrigger value=\"available\" data-testid=\"tab-available\">Available Jobs ({jobs.length})</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"available\" data-testid=\"tab-content-available\">\n            <div className=\"space-y-4\">\n              {jobsLoading ? (\n                <div className=\"text-center py-8\" data-testid=\"loading-jobs\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                  <p className=\"mt-2 text-muted-foreground\">Loading jobs...</p>\n                </div>\n              ) : jobs.length === 0 ? (\n                <Card data-testid=\"empty-state\">\n                  <CardContent className=\"text-center py-12\">\n                    <MapPin size={48} className=\"mx-auto mb-4 opacity-50\" />\n                    <h3 className=\"text-lg font-semibold\">No jobs available</h3>\n                    <p className=\"text-muted-foreground\">Try increasing your service radius to see more opportunities</p>\n                  </CardContent>\n                </Card>\n              ) : (\n                jobs.map((job) => {\n                  const canUnlock = job.unlockCount < job.maxUnlocks;\n                  const hasBalance = balance >= unlockPrice;\n                  \n                  return (\n                    <Card key={job.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-job-${job.id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <CardTitle className=\"text-lg\" data-testid={`text-job-title-${job.id}`}>{job.title}</CardTitle>\n                            <CardDescription data-testid={`text-job-details-${job.id}`}>\n                              <Badge variant=\"secondary\" className=\"mr-2\">{job.category}</Badge>\n                              <span className=\"flex items-center gap-1 text-sm mt-1\">\n                                <MapPin size={14} />\n                                {job.location}\n                              </span>\n                            </CardDescription>\n                          </div>\n                          <div className=\"flex flex-col items-end gap-2\">\n                            <span className=\"text-sm text-muted-foreground\" data-testid={`text-job-date-${job.id}`}>\n                              <Clock size={14} className=\"inline mr-1\" />\n                              {new Date(job.createdAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-muted-foreground mb-4\" data-testid={`text-job-description-${job.id}`}>\n                          {job.description}\n                        </p>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"text-sm text-muted-foreground\">\n                            <span data-testid={`text-unlocks-${job.id}`}>\n                              {job.unlockCount} of {job.maxUnlocks} providers found\n                            </span>\n                            {!canUnlock && (\n                              <Badge variant=\"outline\" className=\"ml-2\">Full</Badge>\n                            )}\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {!hasBalance && (\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                onClick={() => setLocation(\"/provider/wallet\")}\n                                data-testid={`button-recharge-${job.id}`}\n                              >\n                                <Wallet size={14} className=\"mr-1\" />\n                                Recharge\n                              </Button>\n                            )}\n                            <Button\n                              onClick={() => handleUnlockJob(job.id)}\n                              disabled={!canUnlock || !hasBalance || unlockJobMutation.isPending}\n                              data-testid={`button-unlock-${job.id}`}\n                            >\n                              <Eye size={14} className=\"mr-1\" />\n                              Unlock (₹{unlockPrice})\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n      \n      {/* Add Balance Modal */}\n      <AddBalanceModal\n        isOpen={showAddBalanceModal}\n        onClose={() => setShowAddBalanceModal(false)}\n        providerId={user?.id}\n        currentBalance={balance}\n      />\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17479},"client/src/pages/provider/enhanced-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  MapPin, \n  DollarSign, \n  Calendar, \n  Star, \n  Bell, \n  TrendingUp, \n  Users, \n  MessageSquare, \n  Eye, \n  Award, \n  Target,\n  Clock,\n  Wallet,\n  Settings,\n  CheckCircle,\n  AlertCircle,\n  Crown,\n  Zap\n} from \"lucide-react\";\n\ninterface Job {\n  id: string;\n  title: string;\n  category: string;\n  description: string;\n  location: string;\n  unlockCount: number;\n  maxUnlocks: number;\n  createdAt: string;\n  isAiDetected?: boolean;\n  priority?: 'low' | 'medium' | 'high';\n}\n\ninterface ProviderProfile {\n  status: \"pending\" | \"approved\" | \"rejected\";\n  serviceRadius: number;\n  maxServiceRadius: number;\n  rating: number;\n  reviewCount: number;\n  completedJobs: number;\n  responseTime: string;\n  isVerified: boolean;\n  subscriptionPlan?: 'basic' | 'premium' | 'pro';\n}\n\ninterface ProviderStats {\n  totalEarnings: number;\n  monthlyEarnings: number;\n  jobsCompleted: number;\n  averageRating: number;\n  responseRate: number;\n  subscriptionStatus: string;\n}\n\nexport default function EnhancedProviderDashboard() {\n  const [, setLocation] = useLocation();\n  const [user] = useState({ id: \"provider-1\", name: \"John Service Provider\" });\n  const [radius, setRadius] = useState(5);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Enhanced provider data\n  const { data: profileData } = useQuery({\n    queryKey: [\"/api/profiles/provider\", user.id],\n    enabled: !!user.id,\n  });\n\n  const { data: statsData } = useQuery({\n    queryKey: [\"/api/provider/stats\", user.id],\n    enabled: !!user.id,\n  });\n\n  const { data: subscriptionData } = useQuery({\n    queryKey: [\"/api/subscriptions\", user.id],\n    enabled: !!user.id,\n  });\n\n  const { data: reviewsData } = useQuery({\n    queryKey: [\"/api/reviews/provider\", user.id],\n    enabled: !!user.id,\n  });\n\n  const { data: walletData } = useQuery({\n    queryKey: [\"/api/wallet\", user.id],\n    enabled: !!user.id,\n  });\n\n  const { data: jobsData, isLoading: jobsLoading } = useQuery({\n    queryKey: [\"/api/jobs/near\", { latitude: \"40.7128\", longitude: \"-74.0060\", radius }],\n  });\n\n  const profile: ProviderProfile = profileData?.profile || { \n    status: \"approved\", \n    serviceRadius: 5, \n    maxServiceRadius: 20,\n    rating: 4.5,\n    reviewCount: 23,\n    completedJobs: 45,\n    responseTime: \"< 2 hours\",\n    isVerified: true,\n    subscriptionPlan: 'premium'\n  };\n\n  const stats: ProviderStats = statsData?.stats || {\n    totalEarnings: 25000,\n    monthlyEarnings: 8500,\n    jobsCompleted: 45,\n    averageRating: 4.5,\n    responseRate: 95,\n    subscriptionStatus: 'active'\n  };\n\n  const jobs: Job[] = jobsData?.jobs || [];\n  const wallet = walletData?.wallet;\n  const balance = wallet ? parseFloat(wallet.balance) : 1250;\n  const subscription = subscriptionData?.subscription;\n  const reviews = reviewsData?.reviews || [];\n\n  // Enhanced job unlock with AI insights\n  const unlockJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const response = await apiRequest(\"POST\", `/api/jobs/${jobId}/unlock`, {\n        providerId: user.id,\n      });\n      return response.json();\n    },\n    onSuccess: (data, jobId) => {\n      toast({\n        title: \"Job Unlocked Successfully\",\n        description: `Customer contact: ${data.customerContact.name} - ${data.customerContact.phoneNumber}`,\n      });\n      \n      // Log WhatsApp interaction if available\n      if (data.whatsappLink) {\n        apiRequest(\"POST\", \"/api/whatsapp/log\", {\n          providerId: user.id,\n          jobId,\n          action: \"contact_unlocked\",\n          customerPhone: data.customerContact.phoneNumber\n        });\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet\", user.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs/near\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Unlock Job\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUnlockJob = (jobId: string) => {\n    const unlockPrice = subscription?.plan === 'pro' ? 75 : subscription?.plan === 'premium' ? 85 : 100;\n    \n    if (balance < unlockPrice) {\n      toast({\n        title: \"Insufficient Balance\",\n        description: \"Please recharge your wallet to unlock this job.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/provider/wallet\");\n      return;\n    }\n    unlockJobMutation.mutate(jobId);\n  };\n\n  // Subscription plan benefits\n  const getPlanBenefits = () => {\n    switch (profile.subscriptionPlan) {\n      case 'pro':\n        return { unlockDiscount: 25, priority: 'high', aiInsights: true, color: 'text-purple-600' };\n      case 'premium':\n        return { unlockDiscount: 15, priority: 'medium', aiInsights: true, color: 'text-blue-600' };\n      default:\n        return { unlockDiscount: 0, priority: 'low', aiInsights: false, color: 'text-gray-600' };\n    }\n  };\n\n  const planBenefits = getPlanBenefits();\n  const unlockPrice = 100 - (100 * planBenefits.unlockDiscount / 100);\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"enhanced-provider-dashboard\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Enhanced Header with Profile */}\n        <div className=\"flex items-center justify-between mb-8\" data-testid=\"dashboard-header\">\n          <div className=\"flex items-center gap-4\">\n            <Avatar className=\"h-16 w-16\">\n              <AvatarImage src=\"/placeholder-avatar.jpg\" />\n              <AvatarFallback>{user.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"flex items-center gap-2\">\n                <h1 className=\"text-2xl font-bold\" data-testid=\"text-welcome\">{user.name}</h1>\n                {profile.isVerified && <Award className=\"text-blue-600\" size={20} />}\n                {profile.subscriptionPlan !== 'basic' && <Crown className={planBenefits.color} size={20} />}\n              </div>\n              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <Star size={16} className=\"fill-yellow-400 text-yellow-400\" />\n                  <span>{profile.rating.toFixed(1)} ({profile.reviewCount} reviews)</span>\n                </div>\n                <span>•</span>\n                <span>{profile.completedJobs} jobs completed</span>\n                <span>•</span>\n                <span>Responds in {profile.responseTime}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Badge variant={subscription?.status === 'active' ? 'default' : 'secondary'} className={planBenefits.color}>\n              {profile.subscriptionPlan?.toUpperCase() || 'BASIC'}\n            </Badge>\n            <Button variant=\"outline\" onClick={() => setLocation(\"/provider/wallet\")} data-testid=\"button-wallet\">\n              <Wallet size={16} className=\"mr-2\" />\n              ₹{balance.toFixed(2)}\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-settings\">\n              <Settings size={16} className=\"mr-2\" />\n              Settings\n            </Button>\n          </div>\n        </div>\n\n        {/* Enhanced Stats Grid */}\n        <div className=\"grid md:grid-cols-6 gap-4 mb-8\" data-testid=\"enhanced-stats\">\n          <Card data-testid=\"card-monthly-earnings\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-1\">\n                <TrendingUp size={16} />\n                This Month\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">₹{stats.monthlyEarnings.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">+12% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-response-rate\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-1\">\n                <Zap size={16} />\n                Response Rate\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">{stats.responseRate}%</div>\n              <Progress value={stats.responseRate} className=\"h-2 mt-1\" />\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-available-jobs\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-1\">\n                <Target size={16} />\n                Available Jobs\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-600\">{jobs.length}</div>\n              <p className=\"text-xs text-muted-foreground\">In {radius}km radius</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-wallet-balance\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-1\">\n                <Wallet size={16} />\n                Wallet Balance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">₹{balance.toFixed(2)}</div>\n              <p className=\"text-xs text-muted-foreground\">Ready to unlock</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-total-earnings\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-1\">\n                <DollarSign size={16} />\n                Total Earned\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-indigo-600\">₹{stats.totalEarnings.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">Lifetime earnings</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-rating\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-1\">\n                <Star size={16} />\n                Rating\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">{profile.rating.toFixed(1)}</div>\n              <p className=\"text-xs text-muted-foreground\">{profile.reviewCount} reviews</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Enhanced Tabs */}\n        <Tabs defaultValue=\"jobs\" className=\"space-y-6\" data-testid=\"enhanced-tabs\">\n          <TabsList data-testid=\"enhanced-tabs-list\">\n            <TabsTrigger value=\"jobs\" data-testid=\"tab-jobs\">\n              Available Jobs ({jobs.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"reviews\" data-testid=\"tab-reviews\">\n              Reviews ({reviews.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">\n              Analytics\n            </TabsTrigger>\n            <TabsTrigger value=\"subscription\" data-testid=\"tab-subscription\">\n              Subscription\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"jobs\" data-testid=\"tab-content-jobs\">\n            <div className=\"space-y-4\">\n              {/* Radius Control */}\n              <Card data-testid=\"radius-control\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <MapPin size={20} />\n                    Service Radius: {radius} km\n                    {planBenefits.aiInsights && <Badge variant=\"secondary\">AI Optimized</Badge>}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center gap-4\">\n                    <input\n                      type=\"range\"\n                      min=\"5\"\n                      max={profile.maxServiceRadius}\n                      value={radius}\n                      onChange={(e) => setRadius(Number(e.target.value))}\n                      className=\"flex-1\"\n                    />\n                    <span className=\"text-sm text-muted-foreground\">Max: {profile.maxServiceRadius} km</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Enhanced Job Cards */}\n              {jobs.length === 0 ? (\n                <Card data-testid=\"empty-jobs\">\n                  <CardContent className=\"text-center py-12\">\n                    <Target size={48} className=\"mx-auto mb-4 opacity-50\" />\n                    <h3 className=\"text-lg font-semibold\">No jobs available</h3>\n                    <p className=\"text-muted-foreground\">Try expanding your radius or check back later</p>\n                  </CardContent>\n                </Card>\n              ) : (\n                jobs.map((job) => {\n                  const canUnlock = job.unlockCount < job.maxUnlocks;\n                  const hasBalance = balance >= unlockPrice;\n                  \n                  return (\n                    <Card key={job.id} className=\"hover:shadow-lg transition-all duration-200\" data-testid={`enhanced-job-${job.id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <CardTitle className=\"text-lg\">{job.title}</CardTitle>\n                              {job.isAiDetected && <Badge variant=\"secondary\" className=\"text-xs\">AI Match</Badge>}\n                              {job.priority === 'high' && <Badge variant=\"destructive\" className=\"text-xs\">Hot</Badge>}\n                            </div>\n                            <CardDescription>\n                              <div className=\"flex items-center gap-4 text-sm\">\n                                <Badge variant=\"secondary\">{job.category}</Badge>\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin size={14} />\n                                  {job.location}\n                                </span>\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock size={14} />\n                                  {new Date(job.createdAt).toLocaleDateString()}\n                                </span>\n                              </div>\n                            </CardDescription>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-muted-foreground mb-4\">{job.description}</p>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                            <span>{job.unlockCount} of {job.maxUnlocks} providers</span>\n                            {!canUnlock && <Badge variant=\"outline\">Full</Badge>}\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {planBenefits.unlockDiscount > 0 && (\n                              <Badge variant=\"secondary\" className=\"text-green-600\">\n                                {planBenefits.unlockDiscount}% OFF\n                              </Badge>\n                            )}\n                            <Button\n                              onClick={() => handleUnlockJob(job.id)}\n                              disabled={!canUnlock || !hasBalance || unlockJobMutation.isPending}\n                              variant={job.priority === 'high' ? 'default' : 'outline'}\n                            >\n                              <Eye size={14} className=\"mr-1\" />\n                              Unlock (₹{unlockPrice.toFixed(0)})\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"reviews\" data-testid=\"tab-content-reviews\">\n            <div className=\"space-y-4\">\n              {reviews.length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-12\">\n                    <Star size={48} className=\"mx-auto mb-4 opacity-50\" />\n                    <h3 className=\"text-lg font-semibold\">No reviews yet</h3>\n                    <p className=\"text-muted-foreground\">Complete jobs to start receiving reviews</p>\n                  </CardContent>\n                </Card>\n              ) : (\n                reviews.map((review, index) => (\n                  <Card key={index}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"flex\">\n                            {[...Array(5)].map((_, i) => (\n                              <Star\n                                key={i}\n                                size={16}\n                                className={i < review.rating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"}\n                              />\n                            ))}\n                          </div>\n                          <span className=\"font-medium\">{review.customerName}</span>\n                        </div>\n                        <span className=\"text-sm text-muted-foreground\">{new Date(review.createdAt).toLocaleDateString()}</span>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-muted-foreground\">{review.comment}</p>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" data-testid=\"tab-content-analytics\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp size={20} />\n                    Performance Metrics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Response Rate</span>\n                      <span>{stats.responseRate}%</span>\n                    </div>\n                    <Progress value={stats.responseRate} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Job Completion</span>\n                      <span>94%</span>\n                    </div>\n                    <Progress value={94} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Customer Satisfaction</span>\n                      <span>{((profile.rating / 5) * 100).toFixed(0)}%</span>\n                    </div>\n                    <Progress value={(profile.rating / 5) * 100} className=\"h-2\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <DollarSign size={20} />\n                    Earnings Overview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span>This Month</span>\n                      <span className=\"font-semibold\">₹{stats.monthlyEarnings.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Total Lifetime</span>\n                      <span className=\"font-semibold\">₹{stats.totalEarnings.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Average per Job</span>\n                      <span className=\"font-semibold\">₹{Math.round(stats.totalEarnings / profile.completedJobs).toLocaleString()}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"subscription\" data-testid=\"tab-content-subscription\">\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <Card className={profile.subscriptionPlan === 'basic' ? 'border-2 border-primary' : ''}>\n                <CardHeader>\n                  <CardTitle>Basic</CardTitle>\n                  <CardDescription>₹0/month</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-sm\">\n                    <li>• Standard job visibility</li>\n                    <li>• ₹100 unlock fee</li>\n                    <li>• Basic support</li>\n                  </ul>\n                  <Button variant=\"outline\" className=\"w-full mt-4\" disabled={profile.subscriptionPlan === 'basic'}>\n                    {profile.subscriptionPlan === 'basic' ? 'Current Plan' : 'Downgrade'}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className={profile.subscriptionPlan === 'premium' ? 'border-2 border-primary' : ''}>\n                <CardHeader>\n                  <CardTitle>Premium</CardTitle>\n                  <CardDescription>₹499/month</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-sm\">\n                    <li>• Priority job visibility</li>\n                    <li>• ₹85 unlock fee (15% off)</li>\n                    <li>• AI job matching</li>\n                    <li>• Priority support</li>\n                  </ul>\n                  <Button className=\"w-full mt-4\" disabled={profile.subscriptionPlan === 'premium'}>\n                    {profile.subscriptionPlan === 'premium' ? 'Current Plan' : 'Upgrade'}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className={profile.subscriptionPlan === 'pro' ? 'border-2 border-primary' : ''}>\n                <CardHeader>\n                  <CardTitle>Pro</CardTitle>\n                  <CardDescription>₹999/month</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-sm\">\n                    <li>• Exclusive job access</li>\n                    <li>• ₹75 unlock fee (25% off)</li>\n                    <li>• Advanced AI insights</li>\n                    <li>• Dedicated support</li>\n                    <li>• Analytics dashboard</li>\n                  </ul>\n                  <Button className=\"w-full mt-4\" disabled={profile.subscriptionPlan === 'pro'}>\n                    {profile.subscriptionPlan === 'pro' ? 'Current Plan' : 'Upgrade'}\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":24572},"client/src/pages/provider/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MapPin, User, Mail, Briefcase, FileText, Upload, CheckCircle } from \"lucide-react\";\n\nconst profileSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  businessName: z.string().min(2, \"Business name must be at least 2 characters\"),\n  businessDetails: z.string().min(20, \"Business details must be at least 20 characters\"),\n  location: z.string().min(5, \"Please enter your complete address\"),\n  serviceCategories: z.array(z.string()).min(1, \"Please select at least one service category\"),\n  latitude: z.string().optional(),\n  longitude: z.string().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\n// Categories will be fetched dynamically\n\nexport default function ProviderProfile() {\n  const [, setLocation] = useLocation();\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const [documentsUploaded, setDocumentsUploaded] = useState(false);\n  const { toast } = useToast();\n\n  const { data: categoriesData } = useQuery({\n    queryKey: [\"/api/categories\"],\n    enabled: true,\n  });\n\n  const serviceCategories = (categoriesData as any)?.categories || [];\n\n  // Get userId from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const userId = urlParams.get('userId');\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      businessName: \"\",\n      businessDetails: \"\",\n      location: \"\",\n      serviceCategories: [],\n      latitude: \"\",\n      longitude: \"\",\n    },\n  });\n\n  const profileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      if (!userId) throw new Error(\"User ID not found\");\n      \n      const response = await apiRequest(\"POST\", \"/api/profiles/provider\", {\n        userId,\n        name: data.name,\n        email: data.email,\n        businessName: data.businessName,\n        businessDetails: data.businessDetails,\n        location: data.location,\n        serviceCategories: data.serviceCategories,\n        latitude: data.latitude || null,\n        longitude: data.longitude || null,\n        documentsUploaded,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Submitted\",\n        description: \"Your provider profile has been submitted for admin approval.\",\n      });\n      setLocation(\"/provider/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Profile Setup Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getCurrentLocation = () => {\n    setIsGettingLocation(true);\n    \n    if (!navigator.geolocation) {\n      toast({\n        title: \"Location not supported\",\n        description: \"Your browser doesn't support geolocation.\",\n        variant: \"destructive\",\n      });\n      setIsGettingLocation(false);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n        \n        try {\n          const response = await fetch(\n            `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`\n          );\n          const data = await response.json();\n          \n          form.setValue(\"location\", data.display_name || `${latitude}, ${longitude}`);\n          form.setValue(\"latitude\", latitude.toString());\n          form.setValue(\"longitude\", longitude.toString());\n          \n          toast({\n            title: \"Location detected\",\n            description: \"Your current location has been added to your profile.\",\n          });\n        } catch (error) {\n          form.setValue(\"location\", `${latitude}, ${longitude}`);\n          form.setValue(\"latitude\", latitude.toString());\n          form.setValue(\"longitude\", longitude.toString());\n        }\n        \n        setIsGettingLocation(false);\n      },\n      (error) => {\n        toast({\n          title: \"Location access denied\",\n          description: \"Please enter your location manually.\",\n          variant: \"destructive\",\n        });\n        setIsGettingLocation(false);\n      }\n    );\n  };\n\n  const handleDocumentUpload = () => {\n    // In a real app, this would handle file upload to cloud storage\n    setDocumentsUploaded(true);\n    toast({\n      title: \"Documents uploaded\",\n      description: \"Your business documents have been uploaded successfully.\",\n    });\n  };\n\n  const onSubmit = (data: ProfileFormData) => {\n    if (!documentsUploaded) {\n      toast({\n        title: \"Documents Required\",\n        description: \"Please upload your business documents before submitting.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    profileMutation.mutate(data);\n  };\n\n  if (!userId) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"error-state\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <h2 className=\"text-lg font-semibold mb-2\">Invalid Access</h2>\n            <p className=\"text-muted-foreground mb-4\">User information not found.</p>\n            <Button onClick={() => setLocation(\"/auth/register\")} data-testid=\"button-register\">\n              Register Again\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\" data-testid=\"provider-profile-page\">\n      <div className=\"max-w-4xl mx-auto\">\n        <Card data-testid=\"profile-card\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-bold\" data-testid=\"text-profile-title\">Complete Your Provider Profile</CardTitle>\n            <p className=\"text-muted-foreground\" data-testid=\"text-profile-description\">\n              Set up your business profile to start receiving service requests from customers\n            </p>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"form-profile\">\n                {/* Personal Information */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\" data-testid=\"text-personal-info\">Personal Information</h3>\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <User size={16} />\n                            Full Name\n                          </FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter your full name\"\n                              {...field}\n                              data-testid=\"input-name\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <Mail size={16} />\n                            Email Address\n                          </FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter your email\"\n                              type=\"email\"\n                              {...field}\n                              data-testid=\"input-email\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* Business Information */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\" data-testid=\"text-business-info\">Business Information</h3>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"businessName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Briefcase size={16} />\n                          Business Name\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter your business name\"\n                            {...field}\n                            data-testid=\"input-business-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"businessDetails\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <FileText size={16} />\n                          Business Details\n                        </FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Describe your business, experience, and services in detail\"\n                            className=\"min-h-[100px]\"\n                            {...field}\n                            data-testid=\"textarea-business-details\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <MapPin size={16} />\n                          Service Location\n                        </FormLabel>\n                        <div className=\"flex gap-2\">\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter your business address or service area\"\n                              {...field}\n                              data-testid=\"input-location\"\n                            />\n                          </FormControl>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={getCurrentLocation}\n                            disabled={isGettingLocation}\n                            data-testid=\"button-get-location\"\n                          >\n                            {isGettingLocation ? \"Getting...\" : \"Use Current\"}\n                          </Button>\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Service Categories */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\" data-testid=\"text-service-categories\">Service Categories</h3>\n                  <FormField\n                    control={form.control}\n                    name=\"serviceCategories\"\n                    render={() => (\n                      <FormItem>\n                        <div className=\"grid md:grid-cols-3 gap-4\">\n                          {serviceCategories.map((category) => (\n                            <FormField\n                              key={category}\n                              control={form.control}\n                              name=\"serviceCategories\"\n                              render={({ field }) => {\n                                return (\n                                  <FormItem\n                                    key={category}\n                                    className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                  >\n                                    <FormControl>\n                                      <Checkbox\n                                        checked={field.value?.includes(category)}\n                                        onCheckedChange={(checked) => {\n                                          return checked\n                                            ? field.onChange([...field.value, category])\n                                            : field.onChange(\n                                                field.value?.filter(\n                                                  (value) => value !== category\n                                                )\n                                              )\n                                        }}\n                                        data-testid={`checkbox-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n                                      />\n                                    </FormControl>\n                                    <FormLabel className=\"text-sm font-normal\">\n                                      {category}\n                                    </FormLabel>\n                                  </FormItem>\n                                )\n                              }}\n                            />\n                          ))}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Document Upload */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\" data-testid=\"text-documents\">Business Documents</h3>\n                  <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                    {documentsUploaded ? (\n                      <div className=\"text-green-600\" data-testid=\"documents-uploaded\">\n                        <CheckCircle size={48} className=\"mx-auto mb-4\" />\n                        <p className=\"font-semibold\">Documents Uploaded Successfully</p>\n                        <p className=\"text-sm text-muted-foreground\">Your documents have been uploaded and will be reviewed by our admin team.</p>\n                      </div>\n                    ) : (\n                      <div data-testid=\"documents-upload\">\n                        <Upload size={48} className=\"mx-auto mb-4 text-muted-foreground\" />\n                        <p className=\"font-semibold mb-2\">Upload Business Documents</p>\n                        <p className=\"text-sm text-muted-foreground mb-4\">\n                          Upload your business license, ID proof, GST certificate (if applicable), and any other relevant documents\n                        </p>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={handleDocumentUpload}\n                          data-testid=\"button-upload-documents\"\n                        >\n                          <Upload size={16} className=\"mr-2\" />\n                          Choose Files\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"bg-muted/50 p-4 rounded-lg\" data-testid=\"approval-info\">\n                  <h4 className=\"font-semibold mb-2\">What happens next?</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Your profile and documents will be reviewed by our admin team</li>\n                    <li>• You'll receive an approval notification within 24-48 hours</li>\n                    <li>• Once approved, you can start receiving job notifications</li>\n                    <li>• You'll need to maintain wallet balance to unlock customer contacts</li>\n                  </ul>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={profileMutation.isPending}\n                  data-testid=\"button-submit-profile\"\n                >\n                  {profileMutation.isPending ? \"Submitting...\" : \"Submit for Approval\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17749},"client/src/pages/provider/wallet.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Wallet, Plus, Minus, CreditCard, History, AlertCircle } from \"lucide-react\";\n\nconst rechargeSchema = z.object({\n  amount: z.number().min(100, \"Minimum recharge amount is ₹100\").max(10000, \"Maximum recharge amount is ₹10,000\"),\n});\n\ntype RechargeFormData = z.infer<typeof rechargeSchema>;\n\ninterface Transaction {\n  id: string;\n  type: \"recharge\" | \"unlock\";\n  amount: string;\n  description: string;\n  createdAt: string;\n}\n\nconst quickAmounts = [500, 1000, 2000, 5000];\n\nexport default function ProviderWallet() {\n  const [, setLocation] = useLocation();\n  const [user] = useState({ id: \"provider-1\", name: \"John Provider\" }); // This would come from auth context\n  const { toast } = useToast();\n\n  const form = useForm<RechargeFormData>({\n    resolver: zodResolver(rechargeSchema),\n    defaultValues: {\n      amount: 500,\n    },\n  });\n\n  // Get wallet information\n  const { data: walletData, isLoading } = useQuery({\n    queryKey: [\"/api/wallet\", user.id],\n    enabled: !!user.id,\n  });\n\n  const wallet = walletData?.wallet;\n  const transactions: Transaction[] = walletData?.transactions || [];\n  const balance = wallet ? parseFloat(wallet.balance) : 0;\n\n  const rechargeMutation = useMutation({\n    mutationFn: async (data: RechargeFormData) => {\n      const response = await apiRequest(\"POST\", `/api/wallet/${user.id}/recharge`, {\n        amount: data.amount,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Wallet Recharged\",\n        description: `₹${form.getValues().amount} has been added to your wallet.`,\n      });\n      // Invalidate and refetch wallet data\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet\", user.id] });\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Recharge Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RechargeFormData) => {\n    rechargeMutation.mutate(data);\n  };\n\n  const getTransactionIcon = (type: string) => {\n    return type === \"recharge\" ? (\n      <Plus className=\"text-green-500\" size={16} />\n    ) : (\n      <Minus className=\"text-red-500\" size={16} />\n    );\n  };\n\n  const getTransactionAmount = (transaction: Transaction) => {\n    const amount = parseFloat(transaction.amount);\n    return transaction.type === \"recharge\" ? `+₹${amount}` : `-₹${amount}`;\n  };\n\n  const getTransactionAmountClass = (type: string) => {\n    return type === \"recharge\" ? \"text-green-600\" : \"text-red-600\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\" data-testid=\"loading-state\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Loading wallet...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"wallet-page\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\" data-testid=\"page-header\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/provider/dashboard\")}\n            className=\"mb-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft size={16} className=\"mr-2\" />\n            Back to Dashboard\n          </Button>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Wallet Management</h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-page-description\">\n            Manage your wallet balance and view transaction history\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Wallet Balance Card */}\n          <div className=\"lg:col-span-1\">\n            <Card data-testid=\"balance-card\">\n              <CardHeader className=\"text-center\">\n                <Wallet className=\"mx-auto mb-4 text-primary\" size={48} />\n                <CardTitle className=\"text-2xl\" data-testid=\"text-balance-title\">Wallet Balance</CardTitle>\n                <div className=\"text-4xl font-bold text-primary\" data-testid=\"text-current-balance\">\n                  ₹{balance.toFixed(2)}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold mb-2\" data-testid=\"text-unlock-info\">Job Unlock Price</h4>\n                    <p className=\"text-2xl font-bold\">₹100</p>\n                    <p className=\"text-sm text-muted-foreground\">per customer contact</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-muted-foreground\" data-testid=\"text-unlocks-available\">\n                      You can unlock {Math.floor(balance / 100)} customer contacts\n                    </p>\n                  </div>\n\n                  {balance < 500 && (\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\" data-testid=\"low-balance-warning\">\n                      <div className=\"flex items-center gap-2 text-yellow-700\">\n                        <AlertCircle size={16} />\n                        <span className=\"font-semibold\">Low Balance</span>\n                      </div>\n                      <p className=\"text-sm text-yellow-600 mt-1\">\n                        Consider recharging to avoid missing job opportunities\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recharge and Transactions */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"recharge\" className=\"space-y-6\" data-testid=\"wallet-tabs\">\n              <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"tabs-list\">\n                <TabsTrigger value=\"recharge\" data-testid=\"tab-recharge\">Recharge Wallet</TabsTrigger>\n                <TabsTrigger value=\"history\" data-testid=\"tab-history\">Transaction History</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"recharge\" data-testid=\"tab-content-recharge\">\n                <Card data-testid=\"recharge-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-recharge-title\">\n                      <CreditCard size={20} />\n                      Recharge Wallet\n                    </CardTitle>\n                    <CardDescription data-testid=\"text-recharge-description\">\n                      Add money to your wallet to unlock customer contacts\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"form-recharge\">\n                        {/* Quick Amount Buttons */}\n                        <div className=\"space-y-3\">\n                          <label className=\"text-sm font-medium\">Quick Select</label>\n                          <div className=\"grid grid-cols-4 gap-3\">\n                            {quickAmounts.map((amount) => (\n                              <Button\n                                key={amount}\n                                type=\"button\"\n                                variant=\"outline\"\n                                onClick={() => form.setValue(\"amount\", amount)}\n                                data-testid={`button-quick-${amount}`}\n                              >\n                                ₹{amount}\n                              </Button>\n                            ))}\n                          </div>\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"amount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Recharge Amount</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  placeholder=\"Enter amount\"\n                                  {...field}\n                                  onChange={(e) => field.onChange(Number(e.target.value))}\n                                  data-testid=\"input-amount\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"bg-muted/50 p-4 rounded-lg\">\n                          <h4 className=\"font-semibold mb-2\">Payment Information</h4>\n                          <ul className=\"text-sm text-muted-foreground space-y-1\">\n                            <li>• Secure payment processing via Razorpay</li>\n                            <li>• All major credit/debit cards accepted</li>\n                            <li>• UPI and net banking available</li>\n                            <li>• Instant balance update after payment</li>\n                          </ul>\n                        </div>\n\n                        <Button\n                          type=\"submit\"\n                          className=\"w-full\"\n                          disabled={rechargeMutation.isPending}\n                          data-testid=\"button-recharge\"\n                        >\n                          {rechargeMutation.isPending ? \"Processing...\" : `Recharge ₹${form.watch(\"amount\") || 0}`}\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"history\" data-testid=\"tab-content-history\">\n                <Card data-testid=\"history-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-history-title\">\n                      <History size={20} />\n                      Transaction History\n                    </CardTitle>\n                    <CardDescription data-testid=\"text-history-description\">\n                      View all your wallet transactions\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\" data-testid=\"transactions-list\">\n                      {transactions.length === 0 ? (\n                        <div className=\"text-center py-8\" data-testid=\"empty-transactions\">\n                          <History size={48} className=\"mx-auto mb-4 opacity-50\" />\n                          <h3 className=\"text-lg font-semibold\">No transactions yet</h3>\n                          <p className=\"text-muted-foreground\">Your transaction history will appear here</p>\n                        </div>\n                      ) : (\n                        transactions.map((transaction) => (\n                          <div\n                            key={transaction.id}\n                            className=\"flex items-center justify-between p-4 border rounded-lg\"\n                            data-testid={`transaction-${transaction.id}`}\n                          >\n                            <div className=\"flex items-center gap-3\">\n                              {getTransactionIcon(transaction.type)}\n                              <div>\n                                <p className=\"font-semibold\" data-testid={`text-description-${transaction.id}`}>\n                                  {transaction.description}\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`text-date-${transaction.id}`}>\n                                  {new Date(transaction.createdAt).toLocaleString()}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p\n                                className={`font-semibold ${getTransactionAmountClass(transaction.type)}`}\n                                data-testid={`text-amount-${transaction.id}`}\n                              >\n                                {getTransactionAmount(transaction)}\n                              </p>\n                              <Badge\n                                variant={transaction.type === \"recharge\" ? \"default\" : \"secondary\"}\n                                data-testid={`badge-type-${transaction.id}`}\n                              >\n                                {transaction.type === \"recharge\" ? \"Credit\" : \"Debit\"}\n                              </Badge>\n                            </div>\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14159},"client/src/components/category-specific-sections.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Scissors, Home, Wrench, Settings, Users } from \"lucide-react\";\n\nconst salonServices = [\n  {\n    id: \"waxing\",\n    title: \"Waxing\",\n    icon: \"🧴\",\n  },\n  {\n    id: \"manicure\", \n    title: \"Manicure\",\n    icon: \"💅\",\n  },\n  {\n    id: \"cleanup\",\n    title: \"Cleanup\",\n    icon: \"✨\",\n  },\n  {\n    id: \"hair-care\",\n    title: \"Hair care\", \n    icon: \"💇‍♀️\",\n  }\n];\n\nconst cleaningServices = [\n  {\n    id: \"bathroom-kitchen\",\n    title: \"Bathroom & kitchen cleaning\",\n    icon: Home,\n  },\n  {\n    id: \"sofa-carpet\",\n    title: \"Sofa & Carpet Cleaning\", \n    icon: Home,\n  }\n];\n\nconst applianceServices = [\n  {\n    id: \"ac-repair\",\n    title: \"AC Repair & Service\",\n    icon: Settings,\n  },\n  {\n    id: \"water-purifier\",\n    title: \"Water Purifier\",\n    icon: Settings,\n  },\n  {\n    id: \"washing-machine\", \n    title: \"Washing Machine\",\n    icon: Settings,\n  },\n  {\n    id: \"refrigerator\",\n    title: \"Refrigerator\",\n    icon: Settings,\n  },\n  {\n    id: \"microwave\",\n    title: \"Microwave\", \n    icon: Settings,\n  },\n  {\n    id: \"television\",\n    title: \"Television\",\n    icon: Settings,\n  }\n];\n\nconst massageServices = [\n  {\n    id: \"pain-relief\",\n    title: \"Pain relief\",\n    icon: \"💪\",\n  },\n  {\n    id: \"post-workout\",\n    title: \"Post workout\", \n    icon: \"🏃‍♂️\",\n  },\n  {\n    id: \"stress-relief\",\n    title: \"Stress relief\",\n    icon: \"🧘‍♂️\",\n  }\n];\n\nexport function CategorySpecificSections() {\n  return (\n    <div className=\"bg-gray-50\" data-testid=\"category-sections\">\n      {/* Salon for Women */}\n      <section className=\"py-12\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-8\" data-testid=\"text-salon-title\">\n            Salon for Women\n          </h2>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\" data-testid=\"salon-services-grid\">\n            {salonServices.map((service) => (\n              <Card key={service.id} className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-0\">\n                  <div className=\"aspect-square bg-gradient-to-br from-pink-50 to-pink-100 flex items-center justify-center\">\n                    <span className=\"text-4xl\">{service.icon}</span>\n                  </div>\n                  <div className=\"p-3\">\n                    <h3 className=\"font-medium text-gray-900 text-sm\">{service.title}</h3>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Cleaning & pest control */}\n      <section className=\"py-12\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-8\" data-testid=\"text-cleaning-title\">\n            Cleaning & pest control\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\" data-testid=\"cleaning-services-grid\">\n            {cleaningServices.map((service) => {\n              const IconComponent = service.icon;\n              return (\n                <Card key={service.id} className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer\">\n                  <CardContent className=\"p-0\">\n                    <div className=\"aspect-[2/1] bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center\">\n                      <div className=\"w-12 h-12 bg-white rounded-full flex items-center justify-center\">\n                        <IconComponent className=\"w-6 h-6 text-blue-600\" />\n                      </div>\n                    </div>\n                    <div className=\"p-4\">\n                      <h3 className=\"font-medium text-gray-900\">{service.title}</h3>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Appliance repair & service */}\n      <section className=\"py-12\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-appliance-title\">\n              Appliance repair & service\n            </h2>\n            <span className=\"text-primary font-medium text-sm cursor-pointer hover:underline\">\n              See all\n            </span>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\" data-testid=\"appliance-services-grid\">\n            {applianceServices.map((service) => {\n              const IconComponent = service.icon;\n              return (\n                <Card key={service.id} className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer\">\n                  <CardContent className=\"p-0\">\n                    <div className=\"aspect-square bg-gradient-to-br from-green-50 to-green-100 flex items-center justify-center\">\n                      <div className=\"w-10 h-10 bg-white rounded-full flex items-center justify-center\">\n                        <IconComponent className=\"w-5 h-5 text-green-600\" />\n                      </div>\n                    </div>\n                    <div className=\"p-3\">\n                      <h3 className=\"font-medium text-gray-900 text-sm leading-tight\">{service.title}</h3>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Massage for Men */}\n      <section className=\"py-12\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-8\" data-testid=\"text-massage-title\">\n            Massage for Men\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\" data-testid=\"massage-services-grid\">\n            {massageServices.map((service) => (\n              <Card key={service.id} className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-0\">\n                  <div className=\"aspect-[3/2] bg-gradient-to-br from-purple-50 to-purple-100 flex items-center justify-center\">\n                    <span className=\"text-5xl\">{service.icon}</span>\n                  </div>\n                  <div className=\"p-4\">\n                    <h3 className=\"font-medium text-gray-900\">{service.title}</h3>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":6769},"client/src/components/featured-services.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Clock, MapPin } from \"lucide-react\";\n\ninterface Service {\n  id: string;\n  title: string;\n  category: string;\n  description: string;\n  price: string;\n  rating: number;\n  reviewCount: number;\n  duration: string;\n  discount?: string;\n  image?: string;\n}\n\n// Mock featured services data (in real app, this would come from API)\nconst featuredServices: Service[] = [\n  {\n    id: \"1\",\n    title: \"Deep house cleaning\",\n    category: \"Home Cleaning\",\n    description: \"Complete deep cleaning of your entire home including all rooms, kitchen, and bathrooms\",\n    price: \"₹899\",\n    rating: 4.8,\n    reviewCount: 2500,\n    duration: \"3-4 hours\",\n  },\n  {\n    id: \"2\", \n    title: \"AC service & repair\",\n    category: \"AC & Appliance Repair\",\n    description: \"Professional AC cleaning, gas filling, and repair services by certified technicians\",\n    price: \"₹449\",\n    rating: 4.7,\n    reviewCount: 1800,\n    duration: \"1-2 hours\",\n    discount: \"20% off\",\n  },\n  {\n    id: \"3\",\n    title: \"Women's salon at home\",\n    category: \"Beauty & Spa\", \n    description: \"Professional salon services including facial, waxing, manicure, and pedicure at home\",\n    price: \"₹699\",\n    rating: 4.9,\n    reviewCount: 950,\n    duration: \"2-3 hours\",\n  },\n  {\n    id: \"4\",\n    title: \"Plumbing repair\",\n    category: \"Plumbing\",\n    description: \"Expert plumber for tap repair, leak fixing, pipe installation, and bathroom fittings\",\n    price: \"₹199\",\n    rating: 4.6,\n    reviewCount: 3200,\n    duration: \"1 hour\",\n  },\n  {\n    id: \"5\",\n    title: \"Electrical work\",\n    category: \"Electrical Work\",\n    description: \"Licensed electrician for wiring, switch repair, fan installation, and electrical troubleshooting\", \n    price: \"₹249\",\n    rating: 4.8,\n    reviewCount: 1200,\n    duration: \"1-2 hours\",\n  },\n  {\n    id: \"6\",\n    title: \"Massage for men\",\n    category: \"Beauty & Spa\",\n    description: \"Relaxing full body massage therapy for stress relief and muscle relaxation at home\",\n    price: \"₹1299\",\n    rating: 4.7,\n    reviewCount: 800,\n    duration: \"60 minutes\",\n  }\n];\n\nexport function FeaturedServices() {\n  return (\n    <section className=\"py-12 bg-gray-50\" data-testid=\"featured-services-section\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"text-featured-title\">\n            Most booked services\n          </h2>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"featured-services-grid\">\n          {featuredServices.map((service) => (\n            <Card \n              key={service.id} \n              className=\"overflow-hidden hover:shadow-lg transition-shadow cursor-pointer group\"\n              data-testid={`service-${service.id}`}\n            >\n              <div className=\"aspect-video bg-gradient-to-br from-primary/10 to-primary/5 relative\">\n                {service.discount && (\n                  <Badge className=\"absolute top-2 left-2 bg-red-500 hover:bg-red-600\">\n                    {service.discount}\n                  </Badge>\n                )}\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center shadow-md\">\n                    <div className=\"w-8 h-8 bg-primary/20 rounded\"></div>\n                  </div>\n                </div>\n              </div>\n              \n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <h3 className=\"font-semibold text-gray-900 group-hover:text-primary transition-colors line-clamp-1\">\n                    {service.title}\n                  </h3>\n                  <div className=\"flex items-center gap-1 ml-2\">\n                    <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    <span className=\"text-sm font-medium text-gray-700\">\n                      {service.rating}\n                    </span>\n                  </div>\n                </div>\n                \n                <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                  {service.description}\n                </p>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-lg font-bold text-gray-900\">\n                      {service.price}\n                    </span>\n                    <span className=\"text-sm text-gray-500\">\n                      ({service.reviewCount.toLocaleString()})\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-1 text-sm text-gray-500\">\n                    <Clock className=\"w-4 h-4\" />\n                    {service.duration}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5260},"client/src/components/new-noteworthy.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Home, Wrench, Scissors, Laptop, Paintbrush, Zap } from \"lucide-react\";\n\nconst newServices = [\n  {\n    id: \"1\",\n    title: \"Smart Home Installation\",\n    category: \"Tech Support\",\n    icon: Laptop,\n    isNew: true,\n  },\n  {\n    id: \"2\", \n    title: \"Bathroom & kitchen cleaning\",\n    category: \"Home Cleaning\",\n    icon: Home,\n    isNew: false,\n  },\n  {\n    id: \"3\",\n    title: \"Painting & Waterproofing\", \n    category: \"Painting\",\n    icon: Paintbrush,\n    isNew: false,\n  },\n  {\n    id: \"4\",\n    title: \"Laptop repair & service\",\n    category: \"Tech Support\", \n    icon: Laptop,\n    isNew: false,\n  },\n  {\n    id: \"5\",\n    title: \"Hair Studio for Women\",\n    category: \"Beauty & Spa\",\n    icon: Scissors,\n    isNew: false,\n  },\n  {\n    id: \"6\", \n    title: \"Electrical work & repair\",\n    category: \"Electrical Work\",\n    icon: Zap,\n    isNew: false,\n  }\n];\n\nexport function NewNoteworthy() {\n  return (\n    <section className=\"py-12 bg-white\" data-testid=\"new-noteworthy-section\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-new-noteworthy-title\">\n            New and noteworthy\n          </h2>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\" data-testid=\"new-noteworthy-grid\">\n          {newServices.map((service) => {\n            const IconComponent = service.icon;\n            \n            return (\n              <Card \n                key={service.id} \n                className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer group\"\n                data-testid={`new-service-${service.id}`}\n              >\n                <CardContent className=\"p-0\">\n                  <div className=\"aspect-square bg-gradient-to-br from-gray-50 to-gray-100 relative flex items-center justify-center\">\n                    {service.isNew && (\n                      <Badge className=\"absolute top-2 left-2 bg-green-500 hover:bg-green-600 text-xs\">\n                        NEW\n                      </Badge>\n                    )}\n                    <div className=\"w-12 h-12 bg-white rounded-full flex items-center justify-center shadow-sm\">\n                      <IconComponent className=\"w-6 h-6 text-primary\" />\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-3\">\n                    <h3 className=\"font-medium text-gray-900 text-sm leading-tight group-hover:text-primary transition-colors\">\n                      {service.title}\n                    </h3>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2872},"client/src/pages/about-us.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { Users, Award, Target, Heart } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function AboutUs() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null);\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"about-us-page\">\n      <Navbar \n        user={user} \n        onSignIn={() => setLocation(\"/auth/login\")} \n        onGetStarted={() => setLocation(\"/auth/register\")} \n      />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\" data-testid=\"page-title\">\n            About ServiceConnect\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Connecting communities through trusted local services, making it easier than ever \n            to find skilled professionals and grow your service business.\n          </p>\n        </div>\n\n        {/* Mission Section */}\n        <div className=\"grid md:grid-cols-2 gap-8 mb-16\">\n          <Card data-testid=\"mission-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-6 h-6 text-primary\" />\n                Our Mission\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                To bridge the gap between service seekers and providers by creating a \n                reliable, user-friendly platform that fosters trust, quality, and \n                community growth. We believe everyone deserves access to quality services \n                and fair opportunities to build their business.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"values-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Heart className=\"w-6 h-6 text-primary\" />\n                Our Values\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>• <strong>Trust:</strong> Building reliable connections through verified profiles</li>\n                <li>• <strong>Quality:</strong> Maintaining high standards for all services</li>\n                <li>• <strong>Community:</strong> Supporting local businesses and neighborhoods</li>\n                <li>• <strong>Innovation:</strong> Continuously improving our platform</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Stats Section */}\n        <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"text-center\" data-testid=\"stats-users\">\n            <CardContent className=\"pt-6\">\n              <Users className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-3xl font-bold text-foreground mb-2\">10,000+</h3>\n              <p className=\"text-muted-foreground\">Active Users</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\" data-testid=\"stats-services\">\n            <CardContent className=\"pt-6\">\n              <Award className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-3xl font-bold text-foreground mb-2\">500+</h3>\n              <p className=\"text-muted-foreground\">Service Providers</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\" data-testid=\"stats-completed\">\n            <CardContent className=\"pt-6\">\n              <Target className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-3xl font-bold text-foreground mb-2\">25,000+</h3>\n              <p className=\"text-muted-foreground\">Jobs Completed</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Story Section */}\n        <Card className=\"mb-16\" data-testid=\"story-card\">\n          <CardHeader>\n            <CardTitle>Our Story</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              ServiceConnect was born from a simple idea: connecting people who need services \n              with skilled professionals in their local community. Founded in 2024, we recognized \n              the challenges both customers and service providers face in finding each other.\n            </p>\n            <p className=\"text-muted-foreground mb-4\">\n              Customers often struggle to find reliable, trustworthy service providers, while \n              talented professionals find it difficult to reach potential clients. Our platform \n              solves both problems by creating a secure, transparent marketplace that benefits everyone.\n            </p>\n            <p className=\"text-muted-foreground\">\n              Today, ServiceConnect serves thousands of users across multiple cities, facilitating \n              meaningful connections that strengthen local communities and support small businesses.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Team Section */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-8\">Meet Our Team</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card data-testid=\"team-member-1\">\n              <CardContent className=\"pt-6 text-center\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-primary to-primary/70 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <span className=\"text-2xl font-bold text-white\">RK</span>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Raj Kumar</h3>\n                <p className=\"text-muted-foreground text-sm\">Founder & CEO</p>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Passionate about connecting communities through technology\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"team-member-2\">\n              <CardContent className=\"pt-6 text-center\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-primary to-primary/70 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <span className=\"text-2xl font-bold text-white\">PS</span>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Priya Sharma</h3>\n                <p className=\"text-muted-foreground text-sm\">Head of Operations</p>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Ensuring smooth operations and exceptional user experience\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"team-member-3\">\n              <CardContent className=\"pt-6 text-center\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-primary to-primary/70 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <span className=\"text-2xl font-bold text-white\">AM</span>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Arjun Mehta</h3>\n                <p className=\"text-muted-foreground text-sm\">Lead Developer</p>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Building innovative solutions for the service marketplace\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">Ready to Get Started?</h2>\n          <p className=\"text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join thousands of satisfied customers and service providers who trust ServiceConnect \n            for their service needs. Start your journey today.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              onClick={() => setLocation(\"/auth/register\")} \n              size=\"lg\"\n              data-testid=\"button-get-started\"\n            >\n              Get Started Today\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={() => setLocation(\"/how-it-works\")} \n              size=\"lg\"\n              data-testid=\"button-learn-more\"\n            >\n              Learn How It Works\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":8912},"client/src/pages/how-it-works.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { Search, UserCheck, MessageSquare, CheckCircle, Plus, Star, CreditCard } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function HowItWorks() {\n  const [, setLocation] = useLocation();\n  const [user] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState<\"customer\" | \"provider\">(\"customer\");\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"how-it-works-page\">\n      <Navbar \n        user={user} \n        onSignIn={() => setLocation(\"/auth/login\")} \n        onGetStarted={() => setLocation(\"/auth/register\")} \n      />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\" data-testid=\"page-title\">\n            How ServiceConnect Works\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Simple, secure, and efficient. Connect with local service providers or grow your \n            business by offering your services to the community.\n          </p>\n        </div>\n\n        {/* Tab Selection */}\n        <div className=\"flex justify-center mb-12\">\n          <div className=\"bg-muted p-1 rounded-lg\">\n            <Button\n              variant={activeTab === \"customer\" ? \"default\" : \"ghost\"}\n              onClick={() => setActiveTab(\"customer\")}\n              data-testid=\"tab-customer\"\n            >\n              For Customers\n            </Button>\n            <Button\n              variant={activeTab === \"provider\" ? \"default\" : \"ghost\"}\n              onClick={() => setActiveTab(\"provider\")}\n              data-testid=\"tab-provider\"\n            >\n              For Service Providers\n            </Button>\n          </div>\n        </div>\n\n        {/* Customer Flow */}\n        {activeTab === \"customer\" && (\n          <div className=\"space-y-12\">\n            <div className=\"grid md:grid-cols-4 gap-8\">\n              <Card className=\"text-center\" data-testid=\"customer-step-1\">\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n                    <Search className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <CardTitle>1. Search Services</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Browse our wide range of services or post your specific requirements. \n                    Filter by location, category, and budget to find the perfect match.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\" data-testid=\"customer-step-2\">\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n                    <UserCheck className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <CardTitle>2. Choose Provider</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Review verified profiles, ratings, and previous work samples. \n                    Select the service provider that best fits your needs and budget.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\" data-testid=\"customer-step-3\">\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n                    <MessageSquare className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <CardTitle>3. Connect & Discuss</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Chat directly with providers to discuss details, timeline, and pricing. \n                    Our platform keeps all communications secure and organized.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\" data-testid=\"customer-step-4\">\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n                    <CheckCircle className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <CardTitle>4. Get Service Done</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Work with your chosen provider to complete the job. Rate and review \n                    the service to help others in the community make informed decisions.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Customer Benefits */}\n            <Card data-testid=\"customer-benefits\">\n              <CardHeader>\n                <CardTitle>Why Customers Choose ServiceConnect</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">✓ Verified Professionals</h4>\n                    <p className=\"text-muted-foreground text-sm\">All service providers undergo background verification</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">✓ Transparent Pricing</h4>\n                    <p className=\"text-muted-foreground text-sm\">Compare quotes and choose what works for your budget</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">✓ Quality Guarantee</h4>\n                    <p className=\"text-muted-foreground text-sm\">Our rating system ensures consistent quality service</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">✓ 24/7 Support</h4>\n                    <p className=\"text-muted-foreground text-sm\">Get help whenever you need it throughout your service journey</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Provider Flow */}\n        {activeTab === \"provider\" && (\n          <div className=\"space-y-12\">\n            <div className=\"grid md:grid-cols-4 gap-8\">\n              <Card className=\"text-center\" data-testid=\"provider-step-1\">\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n                    <Plus className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <CardTitle>1. Create Profile</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Sign up and create your professional profile. Upload your credentials, \n                    portfolio, and set your service areas and pricing.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\" data-testid=\"provider-step-2\">\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n                    <UserCheck className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <CardTitle>2. Get Verified</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Complete our verification process to build trust with customers. \n                    Verified providers get priority visibility in search results.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\" data-testid=\"provider-step-3\">\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n                    <Search className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <CardTitle>3. Find Customers</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Browse posted jobs that match your skills or wait for customers \n                    to discover your services. Respond to inquiries quickly to win jobs.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\" data-testid=\"provider-step-4\">\n                <CardHeader>\n                  <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n                    <CreditCard className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <CardTitle>4. Grow Business</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Complete jobs, collect payments securely, and build your reputation \n                    through customer reviews. Grow your business with our marketing tools.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Provider Benefits */}\n            <Card data-testid=\"provider-benefits\">\n              <CardHeader>\n                <CardTitle>Why Service Providers Choose ServiceConnect</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">✓ Steady Work Flow</h4>\n                    <p className=\"text-muted-foreground text-sm\">Access to a large pool of customers seeking your services</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">✓ Secure Payments</h4>\n                    <p className=\"text-muted-foreground text-sm\">Get paid quickly and securely through our payment system</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">✓ Marketing Support</h4>\n                    <p className=\"text-muted-foreground text-sm\">We help promote your services to the right customers</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">✓ Business Tools</h4>\n                    <p className=\"text-muted-foreground text-sm\">Manage jobs, track earnings, and grow your business efficiently</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* FAQ Section */}\n        <Card className=\"mt-16\" data-testid=\"faq-section\">\n          <CardHeader>\n            <CardTitle>Frequently Asked Questions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">Is ServiceConnect free to use?</h4>\n                <p className=\"text-muted-foreground text-sm\">\n                  ServiceConnect is free for customers to browse and post jobs. Service providers \n                  pay a small commission only when they successfully complete a job through our platform.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-2\">How are service providers verified?</h4>\n                <p className=\"text-muted-foreground text-sm\">\n                  We verify identity documents, professional licenses, insurance certificates, \n                  and conduct background checks to ensure all providers meet our quality standards.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-2\">What if I'm not satisfied with the service?</h4>\n                <p className=\"text-muted-foreground text-sm\">\n                  We have a comprehensive dispute resolution process and quality guarantee. \n                  If you're not satisfied, we'll work with both parties to find a fair solution.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-2\">How quickly can I find a service provider?</h4>\n                <p className=\"text-muted-foreground text-sm\">\n                  Most customers receive responses within 24 hours of posting a job. For urgent \n                  services, many providers respond within a few hours.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-16\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">Ready to Get Started?</h2>\n          <p className=\"text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join thousands of customers and service providers who trust ServiceConnect \n            for reliable, quality services. Start your journey today.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              onClick={() => setLocation(\"/auth/register\")} \n              size=\"lg\"\n              data-testid=\"button-get-started\"\n            >\n              Get Started Now\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={() => setLocation(\"/about-us\")} \n              size=\"lg\"\n              data-testid=\"button-about-us\"\n            >\n              Learn About Us\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":14221},"client/src/components/auth/login-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft } from \"lucide-react\";\n\nconst phoneSchema = z.object({\n  phoneNumber: z.string().min(10, \"Phone number must be at least 10 digits\"),\n});\n\nconst otpSchema = z.object({\n  code: z.string().min(6, \"OTP must be 6 digits\"),\n});\n\ntype PhoneFormData = z.infer<typeof phoneSchema>;\ntype OTPFormData = z.infer<typeof otpSchema>;\n\ninterface LoginModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSwitchToRegister?: () => void;\n}\n\nexport default function LoginModal({ isOpen, onClose, onSwitchToRegister }: LoginModalProps) {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState<\"phone\" | \"otp\">(\"phone\");\n  const [phoneData, setPhoneData] = useState<PhoneFormData | null>(null);\n  const { toast } = useToast();\n\n  const phoneForm = useForm<PhoneFormData>({\n    resolver: zodResolver(phoneSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n    },\n  });\n\n  const otpForm = useForm<OTPFormData>({\n    resolver: zodResolver(otpSchema),\n    defaultValues: {\n      code: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: PhoneFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      setPhoneData(variables);\n      setStep(\"otp\");\n      toast({\n        title: \"OTP Sent\",\n        description: \"Please check your phone for the verification code.\",\n      });\n      \n      // In development, show and auto-fill the OTP code\n      if (data.code) {\n        otpForm.setValue(\"code\", data.code);\n        toast({\n          title: \"Development Mode\",\n          description: `Your OTP code is: ${data.code} (Auto-filled)`,\n          variant: \"default\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Please check your phone number.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyMutation = useMutation({\n    mutationFn: async (data: OTPFormData) => {\n      if (!phoneData) throw new Error(\"Phone data not available\");\n      \n      const response = await apiRequest(\"POST\", \"/api/auth/login-verify\", {\n        phoneNumber: phoneData.phoneNumber,\n        code: data.code,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (!data.user.isApproved) {\n        toast({\n          title: \"Account Pending Approval\",\n          description: \"Your account is pending admin approval. Please wait for approval to access the platform.\",\n          variant: \"destructive\",\n        });\n        onClose();\n        return;\n      }\n\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back!`,\n      });\n\n      onClose();\n      \n      // Redirect based on user type\n      if (data.user.userType === \"customer\") {\n        setLocation(\"/customer/dashboard\");\n      } else if (data.user.userType === \"provider\") {\n        setLocation(\"/provider/dashboard\");\n      } else if (data.user.userType === \"admin\") {\n        setLocation(\"/admin/dashboard\");\n      }\n      \n      // Refresh page to update auth state\n      window.location.reload();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid OTP code.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onPhoneSubmit = (data: PhoneFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onOtpSubmit = (data: OTPFormData) => {\n    verifyMutation.mutate(data);\n  };\n\n  const handleBack = () => {\n    setStep(\"phone\");\n    setPhoneData(null);\n    otpForm.reset();\n  };\n\n  const handleClose = () => {\n    setStep(\"phone\");\n    setPhoneData(null);\n    phoneForm.reset();\n    otpForm.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"login-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-2xl font-bold\">\n            {step === \"phone\" ? \"Sign In\" : \"Verify OTP\"}\n          </DialogTitle>\n          <DialogDescription className=\"text-center\">\n            {step === \"phone\" \n              ? \"Enter your phone number to sign in\" \n              : \"Enter the 6-digit code sent to your phone\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {step === \"phone\" && (\n            <Form {...phoneForm}>\n              <form onSubmit={phoneForm.handleSubmit(onPhoneSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={phoneForm.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter your phone number\" \n                          {...field} \n                          data-testid=\"input-phone-number\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-send-otp\"\n                >\n                  {loginMutation.isPending ? \"Sending OTP...\" : \"Send OTP\"}\n                </Button>\n              </form>\n            </Form>\n          )}\n\n          {step === \"otp\" && (\n            <Form {...otpForm}>\n              <form onSubmit={otpForm.handleSubmit(onOtpSubmit)} className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleBack}\n                    data-testid=\"button-back\"\n                  >\n                    <ArrowLeft size={16} />\n                    Back\n                  </Button>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Code sent to {phoneData?.phoneNumber}\n                  </span>\n                </div>\n\n                <FormField\n                  control={otpForm.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>OTP Code</FormLabel>\n                      <FormControl>\n                        <div className=\"flex justify-center\">\n                          <InputOTP maxLength={6} {...field} data-testid=\"input-otp\">\n                            <InputOTPGroup>\n                              <InputOTPSlot index={0} />\n                              <InputOTPSlot index={1} />\n                              <InputOTPSlot index={2} />\n                              <InputOTPSlot index={3} />\n                              <InputOTPSlot index={4} />\n                              <InputOTPSlot index={5} />\n                            </InputOTPGroup>\n                          </InputOTP>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={verifyMutation.isPending}\n                  data-testid=\"button-verify-otp\"\n                >\n                  {verifyMutation.isPending ? \"Verifying...\" : \"Verify & Sign In\"}\n                </Button>\n              </form>\n            </Form>\n          )}\n\n          {step === \"phone\" && (\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Don't have an account?{\" \"}\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto font-semibold\"\n                  onClick={onSwitchToRegister}\n                  data-testid=\"button-switch-to-register\"\n                >\n                  Sign up\n                </Button>\n              </p>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9055},"client/src/components/auth/register-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft } from \"lucide-react\";\n\nconst phoneSchema = z.object({\n  phoneNumber: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  userType: z.enum([\"customer\", \"provider\"]),\n});\n\nconst otpSchema = z.object({\n  code: z.string().min(6, \"OTP must be 6 digits\"),\n});\n\ntype PhoneFormData = z.infer<typeof phoneSchema>;\ntype OTPFormData = z.infer<typeof otpSchema>;\n\ninterface RegisterModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSwitchToLogin?: () => void;\n  defaultUserType?: \"customer\" | \"provider\";\n}\n\nexport default function RegisterModal({ isOpen, onClose, onSwitchToLogin, defaultUserType }: RegisterModalProps) {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState<\"phone\" | \"otp\">(\"phone\");\n  const [phoneData, setPhoneData] = useState<PhoneFormData | null>(null);\n  const { toast } = useToast();\n\n  const phoneForm = useForm<PhoneFormData>({\n    resolver: zodResolver(phoneSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      userType: defaultUserType || \"customer\",\n    },\n  });\n\n  const otpForm = useForm<OTPFormData>({\n    resolver: zodResolver(otpSchema),\n    defaultValues: {\n      code: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: PhoneFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      setPhoneData(variables);\n      setStep(\"otp\");\n      toast({\n        title: \"OTP Sent\",\n        description: \"Please check your phone for the verification code.\",\n      });\n      \n      // In development, show and auto-fill the OTP code\n      if (data.code) {\n        otpForm.setValue(\"code\", data.code);\n        toast({\n          title: \"Development Mode\",\n          description: `Your OTP code is: ${data.code} (Auto-filled)`,\n          variant: \"default\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please check your phone number.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyMutation = useMutation({\n    mutationFn: async (data: OTPFormData) => {\n      if (!phoneData) throw new Error(\"Phone data not available\");\n      \n      const response = await apiRequest(\"POST\", \"/api/auth/verify-otp\", {\n        phoneNumber: phoneData.phoneNumber,\n        code: data.code,\n        userType: phoneData.userType,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Registration Successful!\",\n        description: \"Your account has been created. Please complete your profile.\",\n      });\n\n      onClose();\n\n      // Redirect to profile completion\n      if (phoneData?.userType === \"customer\") {\n        setLocation(`/profile/customer?userId=${data.user.id}`);\n      } else {\n        setLocation(`/profile/provider?userId=${data.user.id}`);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid OTP code.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onPhoneSubmit = (data: PhoneFormData) => {\n    registerMutation.mutate(data);\n  };\n\n  const onOtpSubmit = (data: OTPFormData) => {\n    verifyMutation.mutate(data);\n  };\n\n  const handleBack = () => {\n    setStep(\"phone\");\n    setPhoneData(null);\n    otpForm.reset();\n  };\n\n  const handleClose = () => {\n    setStep(\"phone\");\n    setPhoneData(null);\n    phoneForm.reset();\n    otpForm.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"register-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-2xl font-bold\">\n            {step === \"phone\" ? \"Create Account\" : \"Verify OTP\"}\n          </DialogTitle>\n          <DialogDescription className=\"text-center\">\n            {step === \"phone\" \n              ? \"Join ServiceConnect to get started\" \n              : \"Enter the 6-digit code sent to your phone\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {step === \"phone\" && (\n            <Form {...phoneForm}>\n              <form onSubmit={phoneForm.handleSubmit(onPhoneSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={phoneForm.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter your phone number\" \n                          {...field} \n                          data-testid=\"input-phone-number\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={phoneForm.control}\n                  name=\"userType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>I want to</FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          value={field.value}\n                          className=\"grid grid-cols-1 gap-4\"\n                          data-testid=\"radio-user-type\"\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"customer\" id=\"customer\" />\n                            <Label htmlFor=\"customer\" className=\"cursor-pointer\">\n                              <div>\n                                <div className=\"font-medium\">Find Services</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  Book services from local providers\n                                </div>\n                              </div>\n                            </Label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"provider\" id=\"provider\" />\n                            <Label htmlFor=\"provider\" className=\"cursor-pointer\">\n                              <div>\n                                <div className=\"font-medium\">Provide Services</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  Offer your services to customers\n                                </div>\n                              </div>\n                            </Label>\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-send-otp\"\n                >\n                  {registerMutation.isPending ? \"Sending OTP...\" : \"Send OTP\"}\n                </Button>\n              </form>\n            </Form>\n          )}\n\n          {step === \"otp\" && (\n            <Form {...otpForm}>\n              <form onSubmit={otpForm.handleSubmit(onOtpSubmit)} className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleBack}\n                    data-testid=\"button-back\"\n                  >\n                    <ArrowLeft size={16} />\n                    Back\n                  </Button>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Code sent to {phoneData?.phoneNumber}\n                  </span>\n                </div>\n\n                <FormField\n                  control={otpForm.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>OTP Code</FormLabel>\n                      <FormControl>\n                        <div className=\"flex justify-center\">\n                          <InputOTP maxLength={6} {...field} data-testid=\"input-otp\">\n                            <InputOTPGroup>\n                              <InputOTPSlot index={0} />\n                              <InputOTPSlot index={1} />\n                              <InputOTPSlot index={2} />\n                              <InputOTPSlot index={3} />\n                              <InputOTPSlot index={4} />\n                              <InputOTPSlot index={5} />\n                            </InputOTPGroup>\n                          </InputOTP>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={verifyMutation.isPending}\n                  data-testid=\"button-verify-otp\"\n                >\n                  {verifyMutation.isPending ? \"Verifying...\" : \"Create Account\"}\n                </Button>\n              </form>\n            </Form>\n          )}\n\n          {step === \"phone\" && (\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Already have an account?{\" \"}\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto font-semibold\"\n                  onClick={onSwitchToLogin}\n                  data-testid=\"button-switch-to-login\"\n                >\n                  Sign in\n                </Button>\n              </p>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11023},"client/src/components/auth/unified-auth-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authUtils } from \"@/lib/auth\";\nimport { ArrowLeft } from \"lucide-react\";\nimport PhoneInput from \"react-phone-number-input\";\nimport { isValidPhoneNumber, parsePhoneNumber } from \"libphonenumber-js\";\nimport \"react-phone-number-input/style.css\";\n\nconst phoneSchema = z.object({\n  phoneNumber: z.string().refine((phone) => {\n    if (!phone) return false;\n    return isValidPhoneNumber(phone);\n  }, \"Please enter a valid phone number\"),\n});\n\nconst otpSchema = z.object({\n  code: z.string().min(6, \"OTP must be 6 digits\"),\n});\n\ntype PhoneFormData = z.infer<typeof phoneSchema>;\ntype OTPFormData = z.infer<typeof otpSchema>;\n\ninterface UnifiedAuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function UnifiedAuthModal({ isOpen, onClose }: UnifiedAuthModalProps) {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState<\"phone\" | \"otp\">(\"phone\");\n  const [phoneData, setPhoneData] = useState<PhoneFormData | null>(null);\n  const [isLogin, setIsLogin] = useState(true);\n  const [defaultCountry, setDefaultCountry] = useState<string>(\"IN\");\n  const { toast } = useToast();\n\n  // Auto-detect user's country based on location\n  useEffect(() => {\n    const detectCountry = async () => {\n      try {\n        // Try to get user's location from IP\n        const response = await fetch('https://ipapi.co/json/');\n        const data = await response.json();\n        if (data.country_code) {\n          setDefaultCountry(data.country_code);\n        }\n      } catch (error) {\n        // Fallback to India if detection fails\n        console.log('Could not detect location, defaulting to IN');\n        setDefaultCountry(\"IN\");\n      }\n    };\n    \n    detectCountry();\n  }, []);\n\n  const phoneForm = useForm<PhoneFormData>({\n    resolver: zodResolver(phoneSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n    },\n  });\n\n  const otpForm = useForm<OTPFormData>({\n    resolver: zodResolver(otpSchema),\n    defaultValues: {\n      code: \"\",\n    },\n  });\n\n  const checkUserMutation = useMutation({\n    mutationFn: async (phoneNumber: string) => {\n      // Parse phone number to get national format for backend\n      const parsedPhone = parsePhoneNumber(phoneNumber);\n      const nationalNumber = parsedPhone?.number || phoneNumber;\n      \n      // Check if user exists by attempting login\n      try {\n        const response = await apiRequest(\"POST\", \"/api/auth/login\", { phoneNumber: nationalNumber });\n        return { exists: true, data: await response.json() };\n      } catch (error: any) {\n        // If user not found, this is a new user\n        if (error.message?.includes(\"User not found\") || error.message?.includes(\"404\")) {\n          return { exists: false };\n        }\n        throw error;\n      }\n    },\n    onSuccess: (result, phoneNumber) => {\n      if (result.exists) {\n        // User exists, proceed with login\n        setIsLogin(true);\n        const parsedPhone = parsePhoneNumber(phoneNumber);\n        const nationalNumber = parsedPhone?.number || phoneNumber;\n        setPhoneData({ phoneNumber: nationalNumber });\n        setStep(\"otp\");\n        toast({\n          title: \"OTP Sent\",\n          description: \"Please check your phone for the verification code.\",\n        });\n        \n        // In development, show and auto-fill the OTP code\n        if (result.data.code) {\n          otpForm.setValue(\"code\", result.data.code);\n          toast({\n            title: \"Development Mode\",\n            description: `Your OTP code is: ${result.data.code} (Auto-filled)`,\n            variant: \"default\",\n          });\n        }\n      } else {\n        // User doesn't exist, proceed with registration\n        setIsLogin(false);\n        toast({\n          title: \"New User Detected\",\n          description: \"Creating a new account for this phone number.\",\n        });\n        // Start registration process\n        const parsedPhone = parsePhoneNumber(phoneNumber);\n        const nationalNumber = parsedPhone?.number || phoneNumber;\n        registerMutation.mutate({ phoneNumber: nationalNumber });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Please check your phone number.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: PhoneFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", {\n        ...data,\n        userType: 'customer'\n      });\n      return await response.json();\n    },\n    onSuccess: (data, variables) => {\n      setPhoneData(variables);\n      setStep(\"otp\");\n      toast({\n        title: \"OTP Sent\",\n        description: \"Please check your phone for the verification code.\",\n      });\n      \n      // In development, show and auto-fill the OTP code\n      if (data.code) {\n        otpForm.setValue(\"code\", data.code);\n        toast({\n          title: \"Development Mode\",\n          description: `Your OTP code is: ${data.code} (Auto-filled)`,\n          variant: \"default\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyMutation = useMutation({\n    mutationFn: async (data: OTPFormData) => {\n      if (!phoneData) throw new Error(\"Phone data not available\");\n      \n      if (isLogin) {\n        const response = await apiRequest(\"POST\", \"/api/auth/login-verify\", {\n          phoneNumber: phoneData.phoneNumber,\n          code: data.code,\n        });\n        return { type: 'login', data: await response.json() };\n      } else {\n        const response = await apiRequest(\"POST\", \"/api/auth/verify-otp\", {\n          phoneNumber: phoneData.phoneNumber,\n          code: data.code,\n          userType: 'customer'\n        });\n        return { type: 'register', data: await response.json() };\n      }\n    },\n    onSuccess: (result) => {\n      const { type, data } = result;\n      \n      if (type === 'login') {\n        if (!data.user.isApproved && data.user.userType === 'provider') {\n          toast({\n            title: \"Account Pending Approval\",\n            description: \"Your provider account is pending admin approval. Please wait for approval to access the platform.\",\n            variant: \"destructive\",\n          });\n          onClose();\n          return;\n        }\n\n        // Save user to localStorage\n        authUtils.saveUser(data.user);\n\n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome back!\",\n        });\n\n        onClose();\n        \n        // Check if user needs to complete profile\n        if (!data.user.name || !data.user.email) {\n          // User needs to complete profile\n          if (data.user.userType === \"customer\") {\n            setLocation(`/profile/customer?userId=${data.user.id}`);\n          } else if (data.user.userType === \"provider\") {\n            setLocation(`/profile/provider?userId=${data.user.id}`);\n          }\n        } else {\n          // Redirect to dashboard\n          if (data.user.userType === \"customer\") {\n            setLocation(\"/customer/dashboard\");\n          } else if (data.user.userType === \"provider\") {\n            setLocation(\"/provider/dashboard\");\n          } else if (data.user.userType === \"admin\") {\n            setLocation(\"/admin/dashboard\");\n          }\n        }\n        \n        // Refresh page to update auth state\n        window.location.reload();\n      } else {\n        // Registration success - redirect to profile selection\n        toast({\n          title: \"Account Created!\",\n          description: \"Please complete your profile to get started.\",\n        });\n\n        onClose();\n        \n        // Redirect to profile selection page where user can choose their role\n        setLocation(`/profile/select?userId=${data.user.id}`);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid OTP code.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onPhoneSubmit = (data: PhoneFormData) => {\n    checkUserMutation.mutate(data.phoneNumber);\n  };\n\n  const onOtpSubmit = (data: OTPFormData) => {\n    verifyMutation.mutate(data);\n  };\n\n  const handleBack = () => {\n    setStep(\"phone\");\n    setPhoneData(null);\n    setIsLogin(true);\n    otpForm.reset();\n  };\n\n  const handleClose = () => {\n    setStep(\"phone\");\n    setPhoneData(null);\n    setIsLogin(true);\n    phoneForm.reset();\n    otpForm.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"auth-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-2xl font-bold\">\n            {step === \"phone\" ? \"Welcome to ServiceConnect\" : \"Verify OTP\"}\n          </DialogTitle>\n          <DialogDescription className=\"text-center\">\n            {step === \"phone\" \n              ? \"Enter your phone number to continue\" \n              : \"Enter the 6-digit code sent to your phone\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {step === \"phone\" && (\n            <Form {...phoneForm}>\n              <form onSubmit={phoneForm.handleSubmit(onPhoneSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={phoneForm.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <PhoneInput\n                          placeholder=\"Enter phone number\"\n                          value={field.value}\n                          onChange={field.onChange}\n                          defaultCountry={defaultCountry as any}\n                          international\n                          countryCallingCodeEditable={false}\n                          className=\"w-full\"\n                          data-testid=\"input-phone-number\"\n                          style={{\n                            '--PhoneInputCountryFlag-aspectRatio': '1.333',\n                            '--PhoneInputCountryFlag-height': '1em',\n                            '--PhoneInputCountrySelectArrow-width': '0.3em',\n                            '--PhoneInputCountrySelectArrow-color': '#6b7280',\n                          } as any}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={checkUserMutation.isPending || registerMutation.isPending}\n                  data-testid=\"button-continue\"\n                >\n                  {(checkUserMutation.isPending || registerMutation.isPending) ? \"Processing...\" : \"Continue\"}\n                </Button>\n              </form>\n            </Form>\n          )}\n\n          {step === \"otp\" && (\n            <Form {...otpForm}>\n              <form onSubmit={otpForm.handleSubmit(onOtpSubmit)} className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleBack}\n                    data-testid=\"button-back\"\n                  >\n                    <ArrowLeft size={16} />\n                    Back\n                  </Button>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Code sent to {phoneData?.phoneNumber}\n                  </span>\n                </div>\n\n                <FormField\n                  control={otpForm.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>OTP Code</FormLabel>\n                      <FormControl>\n                        <div className=\"flex justify-center\">\n                          <InputOTP maxLength={6} {...field} data-testid=\"input-otp\">\n                            <InputOTPGroup>\n                              <InputOTPSlot index={0} />\n                              <InputOTPSlot index={1} />\n                              <InputOTPSlot index={2} />\n                              <InputOTPSlot index={3} />\n                              <InputOTPSlot index={4} />\n                              <InputOTPSlot index={5} />\n                            </InputOTPGroup>\n                          </InputOTP>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={verifyMutation.isPending}\n                  data-testid=\"button-verify\"\n                >\n                  {verifyMutation.isPending ? \"Verifying...\" : \"Verify & Continue\"}\n                </Button>\n              </form>\n            </Form>\n          )}\n\n          {step === \"phone\" && (\n            <div className=\"text-center text-sm text-muted-foreground\">\n              <p>\n                By continuing, you agree to our{\" \"}\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm\">Terms of Service</Button>\n                {\" \"}and{\" \"}\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm\">Privacy Policy</Button>\n              </p>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14506},"client/src/pages/admin/sidebar-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  LayoutDashboard, \n  Users, \n  Briefcase, \n  CheckCircle, \n  XCircle,\n  UserPlus,\n  UserCheck,\n  UserX,\n  Activity,\n  Settings,\n  FileText,\n  BarChart3,\n  MessageSquare,\n  LogOut,\n  Menu,\n  X,\n  Plus,\n  Eye,\n  Wallet,\n  IndianRupee\n} from \"lucide-react\";\n\nexport default function AdminSidebarDashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n\n  // Dashboard stats query\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/admin/dashboard'],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/admin/dashboard\");\n      return response.json();\n    },\n  });\n\n  // Total wallets query\n  const { data: walletsData } = useQuery({\n    queryKey: ['/api/admin/wallets/total'],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/admin/wallets/total\");\n      return response.json();\n    },\n  });\n\n  // Pending providers query\n  const { data: pendingProviders, isLoading: providersLoading } = useQuery({\n    queryKey: ['/api/admin/providers/pending'],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/admin/providers/pending\");\n      return response.json();\n    },\n  });\n\n  // Pending users query\n  const { data: pendingUsers, isLoading: pendingUsersLoading } = useQuery({\n    queryKey: ['/api/admin/users/pending'],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/admin/users/pending\");\n      return response.json();\n    },\n  });\n\n  // Recent actions query\n  const { data: recentActions } = useQuery({\n    queryKey: ['/api/admin/actions/recent'],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/admin/actions/recent\");\n      return response.json();\n    },\n  });\n\n  // Approve provider mutation\n  const approveProviderMutation = useMutation({\n    mutationFn: async (providerId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/providers/${providerId}/approve`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/providers/pending'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/dashboard'] });\n      toast({\n        title: \"Provider Approved\",\n        description: \"Provider has been approved successfully.\",\n      });\n    },\n  });\n\n  // Reject provider mutation\n  const rejectProviderMutation = useMutation({\n    mutationFn: async (providerId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/providers/${providerId}/reject`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/providers/pending'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/dashboard'] });\n      toast({\n        title: \"Provider Rejected\",\n        description: \"Provider has been rejected.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Approve user mutation\n  const approveUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/users/${userId}/approve`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users/pending'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/dashboard'] });\n      toast({\n        title: \"User Approved\",\n        description: \"User has been approved successfully.\",\n      });\n    },\n  });\n\n  // Reject user mutation\n  const rejectUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/users/${userId}/reject`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users/pending'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/dashboard'] });\n      toast({\n        title: \"User Rejected\",\n        description: \"User has been rejected.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sidebarItems = [\n    { id: \"overview\", label: \"Overview\", icon: LayoutDashboard },\n    { id: \"approvals\", label: \"Approvals\", icon: UserCheck, badge: (pendingProviders?.providers?.length || 0) + (pendingUsers?.users?.length || 0) },\n    { id: \"users\", label: \"Users\", icon: Users },\n    { id: \"providers\", label: \"Providers\", icon: Briefcase },\n    { id: \"jobs\", label: \"Jobs\", icon: FileText },\n    { id: \"transactions\", label: \"Transactions\", icon: Activity },\n    { id: \"analytics\", label: \"Analytics\", icon: BarChart3 },\n    { id: \"reports\", label: \"Reports\", icon: Activity },\n    { id: \"messages\", label: \"Messages\", icon: MessageSquare },\n    { id: \"settings\", label: \"Settings\", icon: Settings },\n  ];\n\n  const handleLogout = () => {\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been logged out successfully.\",\n    });\n    setLocation(\"/\");\n  };\n\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold mb-4\">Dashboard Overview</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats?.stats?.totalUsers || \"0\"}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Providers</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats?.stats?.activeProviders || \"0\"}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Jobs</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats?.stats?.totalJobs || \"0\"}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Approvals</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {(pendingProviders?.providers?.length || 0) + (pendingUsers?.users?.length || 0)}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Wallet Balance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                ₹{walletsData?.totalBalance || \"0.00\"}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Across {walletsData?.walletCount || 0} wallets\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <Button \n              variant=\"outline\" \n              className=\"w-full justify-start\"\n              onClick={() => setSelectedTab(\"approvals\")}\n            >\n              <UserCheck size={16} className=\"mr-2\" />\n              Review Pending Approvals\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"w-full justify-start\"\n              onClick={() => setSelectedTab(\"users\")}\n            >\n              <Users size={16} className=\"mr-2\" />\n              Manage Users\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"w-full justify-start\"\n              onClick={() => setSelectedTab(\"providers\")}\n            >\n              <Briefcase size={16} className=\"mr-2\" />\n              Manage Providers\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {recentActions?.actions?.length > 0 ? (\n              <div className=\"space-y-2\">\n                {recentActions.actions.slice(0, 5).map((action: any, index: number) => (\n                  <div key={index} className=\"flex items-center gap-3 text-sm\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                    <span>{action.description}</span>\n                    <span className=\"text-muted-foreground ml-auto\">{action.timestamp}</span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-muted-foreground text-sm\">No recent activity</p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const renderApprovals = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold\">Pending Approvals</h2>\n      \n      <Tabs defaultValue=\"providers\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"providers\">\n            Provider Approvals ({pendingProviders?.providers?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"users\">\n            User Approvals ({pendingUsers?.users?.length || 0})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"providers\" className=\"space-y-4\">\n          {providersLoading ? (\n            <div>Loading...</div>\n          ) : pendingProviders?.providers?.length > 0 ? (\n            <div className=\"grid gap-4\">\n              {pendingProviders.providers.map((provider: any) => (\n                <Card key={provider.id}>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"text-lg\">{provider.businessName}</CardTitle>\n                        <CardDescription>\n                          Phone: {provider.phoneNumber} | Services: {provider.serviceCategories?.join(\", \")}\n                        </CardDescription>\n                      </div>\n                      <Badge variant=\"outline\">Pending</Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      {provider.businessDetails}\n                    </p>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => approveProviderMutation.mutate(provider.id)}\n                        disabled={approveProviderMutation.isPending}\n                      >\n                        <CheckCircle size={16} className=\"mr-1\" />\n                        Approve\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => rejectProviderMutation.mutate(provider.id)}\n                        disabled={rejectProviderMutation.isPending}\n                      >\n                        <XCircle size={16} className=\"mr-1\" />\n                        Reject\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No pending provider approvals</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          {pendingUsersLoading ? (\n            <div>Loading...</div>\n          ) : pendingUsers?.users?.length > 0 ? (\n            <div className=\"grid gap-4\">\n              {pendingUsers.users.map((user: any) => (\n                <Card key={user.id}>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"text-lg\">{user.name || user.phoneNumber}</CardTitle>\n                        <CardDescription>\n                          Type: {user.userType} | Phone: {user.phoneNumber}\n                        </CardDescription>\n                      </div>\n                      <Badge variant=\"outline\">Pending</Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => approveUserMutation.mutate(user.id)}\n                        disabled={approveUserMutation.isPending}\n                      >\n                        <CheckCircle size={16} className=\"mr-1\" />\n                        Approve\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => rejectUserMutation.mutate(user.id)}\n                        disabled={rejectUserMutation.isPending}\n                      >\n                        <XCircle size={16} className=\"mr-1\" />\n                        Reject\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No pending user approvals</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n\n  // All users query\n  const { data: allUsersData } = useQuery({\n    queryKey: ['/api/admin/users'],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/admin/users\");\n      return response.json();\n    },\n  });\n\n  // Add balance modal state\n  const [addBalanceModal, setAddBalanceModal] = useState({\n    isOpen: false,\n    providerId: '',\n    currentBalance: 0,\n    amount: ''\n  });\n\n  const addBalanceMutation = useMutation({\n    mutationFn: async ({ providerId, amount }: { providerId: string, amount: number }) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/wallet/add-balance\", {\n        providerId,\n        amount,\n        adminId: \"admin-1\" // This would come from auth context\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Balance Added Successfully\",\n        description: `₹${addBalanceModal.amount} has been added to provider wallet`,\n      });\n      setAddBalanceModal({ isOpen: false, providerId: '', currentBalance: 0, amount: '' });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/wallets/total'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add balance\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddBalance = (providerId: string, currentBalance: number) => {\n    setAddBalanceModal({\n      isOpen: true,\n      providerId,\n      currentBalance,\n      amount: ''\n    });\n  };\n\n  const submitAddBalance = () => {\n    const amount = parseFloat(addBalanceModal.amount);\n    if (!amount || amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addBalanceMutation.mutate({ providerId: addBalanceModal.providerId, amount });\n  };\n\n  // Users management state\n  const [usersFilters, setUsersFilters] = useState({\n    search: '',\n    userType: 'all',\n    status: 'all',\n    page: 1,\n    limit: 10\n  });\n\n  // Users query with pagination and filters\n  const { data: usersData, isLoading: usersLoading } = useQuery({\n    queryKey: ['/api/admin/users/paginated', usersFilters],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        search: usersFilters.search,\n        userType: usersFilters.userType,\n        status: usersFilters.status,\n        page: usersFilters.page.toString(),\n        limit: usersFilters.limit.toString()\n      });\n      const response = await apiRequest(\"GET\", `/api/admin/users/paginated?${params}`);\n      return response.json();\n    },\n  });\n\n  const renderUsers = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">User Management</h2>\n        <div className=\"flex items-center gap-3\">\n          <Badge variant=\"outline\">\n            Total: {usersData?.total || 0} users\n          </Badge>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"user-search\">Search Users</Label>\n              <Input\n                id=\"user-search\"\n                placeholder=\"Name or phone...\"\n                value={usersFilters.search}\n                onChange={(e) => setUsersFilters(prev => ({ ...prev, search: e.target.value, page: 1 }))}\n              />\n            </div>\n            <div>\n              <Label>User Type</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={usersFilters.userType}\n                onChange={(e) => setUsersFilters(prev => ({ ...prev, userType: e.target.value, page: 1 }))}\n              >\n                <option value=\"all\">All Types</option>\n                <option value=\"customer\">Customer</option>\n                <option value=\"provider\">Provider</option>\n              </select>\n            </div>\n            <div>\n              <Label>Status</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={usersFilters.status}\n                onChange={(e) => setUsersFilters(prev => ({ ...prev, status: e.target.value, page: 1 }))}\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"approved\">Approved</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"blocked\">Blocked</option>\n              </select>\n            </div>\n            <div>\n              <Label>Per Page</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={usersFilters.limit}\n                onChange={(e) => setUsersFilters(prev => ({ ...prev, limit: parseInt(e.target.value), page: 1 }))}\n              >\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n                <option value=\"100\">100</option>\n              </select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users List */}\n      {usersLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      ) : usersData?.users?.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Users className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Users Found</h3>\n            <p className=\"text-gray-600\">No users match your current filters.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {usersData?.users?.map((user: any) => (\n            <Card key={user.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant={user.userType === 'provider' ? 'default' : 'secondary'}>\n                        {user.userType}\n                      </Badge>\n                      <span className=\"font-medium\">{user.name || user.phoneNumber}</span>\n                      {user.userType === 'provider' && (\n                        <Badge variant=\"outline\" className=\"text-green-600\">\n                          <Wallet size={12} className=\"mr-1\" />\n                          ₹{user.walletBalance || '0.00'}\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Phone: {user.phoneNumber} | Joined: {new Date(user.createdAt).toLocaleDateString()}\n                    </p>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant={user.isApproved ? 'default' : 'destructive'}>\n                        {user.isApproved ? 'Approved' : 'Pending'}\n                      </Badge>\n                      <Badge variant={user.isBlocked ? 'destructive' : 'default'}>\n                        {user.isBlocked ? 'Blocked' : 'Active'}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {user.userType === 'provider' && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleAddBalance(user.id, parseFloat(user.walletBalance || '0'))}\n                        className=\"text-green-600 hover:text-green-700\"\n                      >\n                        <Plus size={14} className=\"mr-1\" />\n                        Add Balance\n                      </Button>\n                    )}\n                    <Button size=\"sm\" variant=\"outline\">\n                      <Eye size={14} className=\"mr-1\" />\n                      View\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n\n          {/* Pagination */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {((usersFilters.page - 1) * usersFilters.limit) + 1} to{' '}\n                  {Math.min(usersFilters.page * usersFilters.limit, usersData?.total || 0)} of{' '}\n                  {usersData?.total || 0} users\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={usersFilters.page <= 1}\n                    onClick={() => setUsersFilters(prev => ({ ...prev, page: prev.page - 1 }))}\n                  >\n                    Previous\n                  </Button>\n                  <span className=\"text-sm\">\n                    Page {usersFilters.page} of {usersData?.totalPages || 1}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={usersFilters.page >= (usersData?.totalPages || 1)}\n                    onClick={() => setUsersFilters(prev => ({ ...prev, page: prev.page + 1 }))}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n\n  // Jobs management state\n  const [jobsFilters, setJobsFilters] = useState({\n    search: '',\n    category: 'all',\n    status: 'all',\n    page: 1,\n    limit: 10\n  });\n\n  // Jobs query\n  const { data: jobsData, isLoading: jobsLoading } = useQuery({\n    queryKey: ['/api/admin/jobs/paginated', jobsFilters],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        search: jobsFilters.search,\n        category: jobsFilters.category,\n        status: jobsFilters.status,\n        page: jobsFilters.page.toString(),\n        limit: jobsFilters.limit.toString()\n      });\n      const response = await apiRequest(\"GET\", `/api/admin/jobs/paginated?${params}`);\n      return response.json();\n    },\n  });\n\n  // Transactions management state\n  const [transactionsFilters, setTransactionsFilters] = useState({\n    search: '',\n    type: 'all',\n    page: 1,\n    limit: 10\n  });\n\n  // Transactions query\n  const { data: transactionsData, isLoading: transactionsLoading } = useQuery({\n    queryKey: ['/api/admin/transactions/paginated', transactionsFilters],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        search: transactionsFilters.search,\n        type: transactionsFilters.type,\n        page: transactionsFilters.page.toString(),\n        limit: transactionsFilters.limit.toString()\n      });\n      const response = await apiRequest(\"GET\", `/api/admin/transactions/paginated?${params}`);\n      return response.json();\n    },\n  });\n\n  const renderProviders = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Provider Management</h2>\n        <div className=\"flex items-center gap-3\">\n          <Badge variant=\"outline\">\n            Total: {usersData?.users?.filter((u: any) => u.userType === 'provider').length || 0} providers\n          </Badge>\n        </div>\n      </div>\n\n      {/* Use same filters as users but only show providers */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"provider-search\">Search Providers</Label>\n              <Input\n                id=\"provider-search\"\n                placeholder=\"Business name or phone...\"\n                value={usersFilters.search}\n                onChange={(e) => setUsersFilters(prev => ({ ...prev, search: e.target.value, page: 1 }))}\n              />\n            </div>\n            <div>\n              <Label>Status</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={usersFilters.status}\n                onChange={(e) => setUsersFilters(prev => ({ ...prev, status: e.target.value, page: 1 }))}\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"approved\">Approved</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"blocked\">Blocked</option>\n              </select>\n            </div>\n            <div>\n              <Label>Per Page</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={usersFilters.limit}\n                onChange={(e) => setUsersFilters(prev => ({ ...prev, limit: parseInt(e.target.value), page: 1 }))}\n              >\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n              </select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Providers List */}\n      {usersLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      ) : usersData?.users?.filter((user: any) => user.userType === 'provider').length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Briefcase className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Providers Found</h3>\n            <p className=\"text-gray-600\">No providers match your current filters.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {usersData?.users?.filter((user: any) => user.userType === 'provider').map((provider: any) => (\n            <Card key={provider.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg\">{provider.businessName || provider.name || provider.phoneNumber}</CardTitle>\n                    <CardDescription>\n                      {provider.serviceCategories?.join(\", \") || \"No categories set\"}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\" className=\"text-green-600\">\n                      <Wallet size={12} className=\"mr-1\" />\n                      ₹{provider.walletBalance || '0.00'}\n                    </Badge>\n                    <Badge variant={provider.isApproved ? 'default' : 'destructive'}>\n                      {provider.isApproved ? 'Approved' : 'Pending'}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    {provider.businessDetails || \"No business details provided\"}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Location: {provider.location || \"Not specified\"} | \n                      Rating: {provider.rating ? `${provider.rating}⭐` : \"No ratings\"}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleAddBalance(provider.id, parseFloat(provider.walletBalance || '0'))}\n                        className=\"text-green-600 hover:text-green-700\"\n                      >\n                        <Plus size={14} className=\"mr-1\" />\n                        Add Balance\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Eye size={14} className=\"mr-1\" />\n                        View Profile\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderJobs = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Job Management</h2>\n        <div className=\"flex items-center gap-3\">\n          <Badge variant=\"outline\">\n            Total: {jobsData?.total || 0} jobs\n          </Badge>\n        </div>\n      </div>\n\n      {/* Job Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"job-search\">Search Jobs</Label>\n              <Input\n                id=\"job-search\"\n                placeholder=\"Title or description...\"\n                value={jobsFilters.search}\n                onChange={(e) => setJobsFilters(prev => ({ ...prev, search: e.target.value, page: 1 }))}\n              />\n            </div>\n            <div>\n              <Label>Category</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={jobsFilters.category}\n                onChange={(e) => setJobsFilters(prev => ({ ...prev, category: e.target.value, page: 1 }))}\n              >\n                <option value=\"all\">All Categories</option>\n                <option value=\"Home Cleaning\">Home Cleaning</option>\n                <option value=\"Plumbing\">Plumbing</option>\n                <option value=\"Electrical Work\">Electrical Work</option>\n                <option value=\"Carpentry\">Carpentry</option>\n                <option value=\"Painting\">Painting</option>\n                <option value=\"Gardening\">Gardening</option>\n              </select>\n            </div>\n            <div>\n              <Label>Status</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={jobsFilters.status}\n                onChange={(e) => setJobsFilters(prev => ({ ...prev, status: e.target.value, page: 1 }))}\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"open\">Open</option>\n                <option value=\"assigned\">Assigned</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"cancelled\">Cancelled</option>\n              </select>\n            </div>\n            <div>\n              <Label>Per Page</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={jobsFilters.limit}\n                onChange={(e) => setJobsFilters(prev => ({ ...prev, limit: parseInt(e.target.value), page: 1 }))}\n              >\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n              </select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Jobs List */}\n      {jobsLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      ) : jobsData?.jobs?.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Jobs Found</h3>\n            <p className=\"text-gray-600\">No jobs match your current filters.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {jobsData?.jobs?.map((job: any) => (\n            <Card key={job.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-1\">\n                      <h3 className=\"font-semibold\">{job.title}</h3>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\">{job.category}</Badge>\n                        <Badge variant={job.urgency === 'urgent' ? 'destructive' : job.urgency === 'asap' ? 'default' : 'secondary'}>\n                          {job.urgency}\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-bold text-green-600\">₹{job.budget}</div>\n                      <div className=\"text-sm text-muted-foreground\">{job.location}</div>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">{job.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Posted: {new Date(job.createdAt).toLocaleDateString()} | \n                      Proposals: {job.proposals || 0}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Eye size={14} className=\"mr-1\" />\n                        View\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n\n          {/* Pagination */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {((jobsFilters.page - 1) * jobsFilters.limit) + 1} to{' '}\n                  {Math.min(jobsFilters.page * jobsFilters.limit, jobsData?.total || 0)} of{' '}\n                  {jobsData?.total || 0} jobs\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={jobsFilters.page <= 1}\n                    onClick={() => setJobsFilters(prev => ({ ...prev, page: prev.page - 1 }))}\n                  >\n                    Previous\n                  </Button>\n                  <span className=\"text-sm\">\n                    Page {jobsFilters.page} of {jobsData?.totalPages || 1}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={jobsFilters.page >= (jobsData?.totalPages || 1)}\n                    onClick={() => setJobsFilters(prev => ({ ...prev, page: prev.page + 1 }))}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderTransactions = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Transaction Management</h2>\n        <div className=\"flex items-center gap-3\">\n          <Badge variant=\"outline\">\n            Total: {transactionsData?.total || 0} transactions\n          </Badge>\n        </div>\n      </div>\n\n      {/* Transaction Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"transaction-search\">Search Transactions</Label>\n              <Input\n                id=\"transaction-search\"\n                placeholder=\"Transaction ID or description...\"\n                value={transactionsFilters.search}\n                onChange={(e) => setTransactionsFilters(prev => ({ ...prev, search: e.target.value, page: 1 }))}\n              />\n            </div>\n            <div>\n              <Label>Type</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={transactionsFilters.type}\n                onChange={(e) => setTransactionsFilters(prev => ({ ...prev, type: e.target.value, page: 1 }))}\n              >\n                <option value=\"all\">All Types</option>\n                <option value=\"recharge\">Recharge</option>\n                <option value=\"unlock\">Unlock</option>\n                <option value=\"refund\">Refund</option>\n              </select>\n            </div>\n            <div>\n              <Label>Per Page</Label>\n              <select\n                className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                value={transactionsFilters.limit}\n                onChange={(e) => setTransactionsFilters(prev => ({ ...prev, limit: parseInt(e.target.value), page: 1 }))}\n              >\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n              </select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transactions List */}\n      {transactionsLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      ) : transactionsData?.transactions?.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Activity className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Transactions Found</h3>\n            <p className=\"text-gray-600\">No transactions match your current filters.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {transactionsData?.transactions?.map((transaction: any) => (\n            <Card key={transaction.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant={transaction.type === 'recharge' ? 'default' : transaction.type === 'unlock' ? 'secondary' : 'destructive'}>\n                        {transaction.type}\n                      </Badge>\n                      <span className=\"font-medium\">₹{transaction.amount}</span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{transaction.description}</p>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {new Date(transaction.createdAt).toLocaleString()}\n                    </div>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\">\n                    <Eye size={14} className=\"mr-1\" />\n                    Details\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n\n          {/* Pagination */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {((transactionsFilters.page - 1) * transactionsFilters.limit) + 1} to{' '}\n                  {Math.min(transactionsFilters.page * transactionsFilters.limit, transactionsData?.total || 0)} of{' '}\n                  {transactionsData?.total || 0} transactions\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={transactionsFilters.page <= 1}\n                    onClick={() => setTransactionsFilters(prev => ({ ...prev, page: prev.page - 1 }))}\n                  >\n                    Previous\n                  </Button>\n                  <span className=\"text-sm\">\n                    Page {transactionsFilters.page} of {transactionsData?.totalPages || 1}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={transactionsFilters.page >= (transactionsData?.totalPages || 1)}\n                    onClick={() => setTransactionsFilters(prev => ({ ...prev, page: prev.page + 1 }))}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderContent = () => {\n    switch (selectedTab) {\n      case \"overview\":\n        return renderOverview();\n      case \"approvals\":\n        return renderApprovals();\n      case \"users\":\n        return renderUsers();\n      case \"providers\":\n        return renderProviders();\n      // Handled above with providers case\n      case \"jobs\":\n        return renderJobs();\n      case \"transactions\":\n        return renderTransactions();\n      case \"analytics\":\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Analytics</h2>\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">Analytics dashboard coming soon</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      case \"reports\":\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Reports</h2>\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">Report generation coming soon</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      case \"messages\":\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Messages</h2>\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">Message management coming soon</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      case \"settings\":\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Settings</h2>\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">Settings panel coming soon</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      default:\n        return renderOverview();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\" data-testid=\"admin-dashboard\">\n      {/* Sidebar */}\n      <div className={`bg-white border-r transition-all duration-300 ${isSidebarOpen ? 'w-64' : 'w-16'} flex flex-col`}>\n        {/* Header */}\n        <div className=\"p-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            {isSidebarOpen && (\n              <h1 className=\"text-xl font-bold text-primary\">Admin Panel</h1>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n            >\n              {isSidebarOpen ? <X size={20} /> : <Menu size={20} />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 p-4 space-y-2\">\n          {sidebarItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <button\n                key={item.id}\n                onClick={() => setSelectedTab(item.id)}\n                className={`w-full flex items-center gap-3 p-3 rounded-lg text-left transition-colors ${\n                  selectedTab === item.id\n                    ? 'bg-primary/10 text-primary font-medium'\n                    : 'hover:bg-gray-100 text-gray-700'\n                }`}\n              >\n                <Icon size={20} />\n                {isSidebarOpen && (\n                  <>\n                    <span className=\"flex-1\">{item.label}</span>\n                    {item.badge > 0 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {item.badge}\n                      </Badge>\n                    )}\n                  </>\n                )}\n              </button>\n            );\n          })}\n        </nav>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50\"\n            onClick={handleLogout}\n          >\n            <LogOut size={20} />\n            {isSidebarOpen && <span className=\"ml-3\">Logout</span>}\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"p-6\">\n          {statsLoading ? (\n            <div className=\"flex items-center justify-center h-64\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : (\n            renderContent()\n          )}\n        </div>\n      </div>\n\n      {/* Add Balance Modal */}\n      <Dialog open={addBalanceModal.isOpen} onOpenChange={(open) => \n        setAddBalanceModal(prev => ({ ...prev, isOpen: open }))\n      }>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Wallet size={20} />\n              Add Balance to Provider Wallet\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-2\">Current Balance</p>\n              <div className=\"flex items-center justify-center gap-1 text-xl font-bold text-green-600\">\n                <IndianRupee size={18} />\n                <span>{addBalanceModal.currentBalance.toFixed(2)}</span>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"admin-amount\">Amount to Add</Label>\n              <div className=\"relative mt-1\">\n                <IndianRupee size={16} className=\"absolute left-3 top-3 text-gray-400\" />\n                <Input\n                  id=\"admin-amount\"\n                  type=\"number\"\n                  placeholder=\"Enter amount\"\n                  value={addBalanceModal.amount}\n                  onChange={(e) => setAddBalanceModal(prev => ({ ...prev, amount: e.target.value }))}\n                  className=\"pl-10\"\n                  min=\"1\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setAddBalanceModal({ isOpen: false, providerId: '', currentBalance: 0, amount: '' })}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={submitAddBalance}\n                disabled={addBalanceMutation.isPending}\n                className=\"flex-1\"\n              >\n                {addBalanceMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                    Adding...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <Plus size={16} />\n                    Add Balance\n                  </div>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":51739},"client/src/pages/profile/select.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, Briefcase, ArrowRight } from \"lucide-react\";\n\nexport default function ProfileSelect() {\n  const [, setLocation] = useLocation();\n  const userId = new URLSearchParams(window.location.search).get(\"userId\");\n\n  if (!userId) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <h2 className=\"text-lg font-semibold mb-2\">Invalid Access</h2>\n            <p className=\"text-muted-foreground mb-4\">User information not found.</p>\n            <Button onClick={() => setLocation(\"/\")} data-testid=\"button-home\">\n              Go Home\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleCustomerSelect = () => {\n    setLocation(`/profile/customer?userId=${userId}`);\n  };\n\n  const handleProviderSelect = () => {\n    setLocation(`/profile/provider?userId=${userId}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\" data-testid=\"profile-select-page\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-profile-select-title\">\n            Choose Your Role\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-profile-select-description\">\n            How would you like to use ServiceConnect?\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Customer Option */}\n          <Card \n            className=\"cursor-pointer hover:shadow-lg transition-shadow border-2 hover:border-primary\"\n            onClick={handleCustomerSelect}\n            data-testid=\"card-customer\"\n          >\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center\">\n                <Users className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <CardTitle className=\"text-xl\">I'm a Customer</CardTitle>\n              <CardDescription>\n                I want to find and book services from local providers\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  <span>Browse and book services</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  <span>Post job requirements</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  <span>Rate and review providers</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  <span>Manage bookings and payments</span>\n                </div>\n              </div>\n              <Button className=\"w-full\" data-testid=\"button-select-customer\">\n                Continue as Customer\n                <ArrowRight size={16} className=\"ml-2\" />\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Provider Option */}\n          <Card \n            className=\"cursor-pointer hover:shadow-lg transition-shadow border-2 hover:border-primary\"\n            onClick={handleProviderSelect}\n            data-testid=\"card-provider\"\n          >\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center\">\n                <Briefcase className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-xl\">I'm a Service Provider</CardTitle>\n              <CardDescription>\n                I want to offer my services and grow my business\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  <span>List your services and skills</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  <span>Receive job requests</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  <span>Build your reputation</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  <span>Manage earnings and wallet</span>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Button className=\"w-full\" data-testid=\"button-select-provider\">\n                  Continue as Provider\n                  <ArrowRight size={16} className=\"ml-2\" />\n                </Button>\n                <p className=\"text-xs text-center text-muted-foreground\">\n                  ⚠️ Provider accounts require admin approval\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center mt-8\">\n          <p className=\"text-sm text-muted-foreground\">\n            You can always switch your role later in your profile settings\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6088},"client/src/components/layout/mobile-app-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  Search, \n  Briefcase, \n  User, \n  Plus,\n  MessageCircle,\n  Bell\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface MobileAppLayoutProps {\n  children: React.ReactNode;\n  user?: any;\n  onAuthRequired?: () => void;\n}\n\nexport function MobileAppLayout({ children, user, onAuthRequired }: MobileAppLayoutProps) {\n  const [location] = useLocation();\n  \n  const bottomNavItems = [\n    { href: \"/\", label: \"Home\", icon: Home },\n    { href: \"/jobs/list\", label: \"Search\", icon: Search },\n    { href: \"/post-job\", label: \"Post\", icon: Plus, authRequired: true },\n    { href: \"/messages\", label: \"Messages\", icon: MessageCircle, authRequired: true, badge: 0 },\n    { href: user ? (user.userType === 'customer' ? '/customer/dashboard' : user.userType === 'provider' ? '/provider/dashboard' : '/admin/dashboard') : '/profile', label: \"Profile\", icon: User },\n  ];\n\n  const handleNavClick = (item: any) => {\n    if (item.authRequired && !user) {\n      onAuthRequired?.();\n      return;\n    }\n    // Navigation will be handled by Link component\n  };\n\n  const isActive = (href: string) => {\n    if (href === \"/\") return location === \"/\";\n    return location.startsWith(href);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {/* App Header - Mobile Sticky */}\n      <header className=\"sticky top-0 z-50 bg-white border-b border-gray-200 lg:hidden\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">JC</span>\n            </div>\n            <span className=\"font-bold text-lg text-primary\">JC Bid</span>\n          </Link>\n\n          {/* Right Actions */}\n          <div className=\"flex items-center gap-2\">\n            {user ? (\n              <>\n                <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                  <Bell size={20} />\n                  <Badge className=\"absolute -top-1 -right-1 w-5 h-5 text-xs bg-red-500 border-white\">\n                    3\n                  </Badge>\n                </Button>\n                <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\">\n                  <User size={16} />\n                </div>\n              </>\n            ) : (\n              <Button size=\"sm\" onClick={onAuthRequired}>\n                Sign In\n              </Button>\n            )}\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 pb-20 lg:pb-0\">\n        {children}\n      </main>\n\n      {/* Bottom Navigation - Mobile Only */}\n      <nav className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-50 lg:hidden\">\n        <div className=\"grid grid-cols-5 h-16\">\n          {bottomNavItems.map((item, index) => {\n            const Icon = item.icon;\n            const active = isActive(item.href);\n            \n            return (\n              <Link\n                key={index}\n                href={item.href}\n                className=\"flex\"\n                onClick={() => handleNavClick(item)}\n              >\n                <button\n                  className={`flex-1 flex flex-col items-center justify-center space-y-1 transition-colors ${\n                    active \n                      ? 'text-primary' \n                      : 'text-gray-500 hover:text-gray-700'\n                  }`}\n                  data-testid={`bottom-nav-${item.label.toLowerCase()}`}\n                >\n                  <div className=\"relative\">\n                    <Icon size={20} />\n                    {item.badge !== undefined && item.badge > 0 && (\n                      <Badge className=\"absolute -top-2 -right-2 w-4 h-4 text-xs bg-red-500 border-white p-0\">\n                        {item.badge}\n                      </Badge>\n                    )}\n                  </div>\n                  <span className=\"text-xs font-medium\">{item.label}</span>\n                </button>\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n    </div>\n  );\n}","size_bytes":4362},"client/src/components/search/search-autocomplete.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Search, MapPin, Clock, TrendingUp } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface SearchAutocompleteProps {\n  placeholder?: string;\n  onSearch?: (query: string, location: string) => void;\n  className?: string;\n}\n\nexport function SearchAutocomplete({ \n  placeholder = \"Search for services...\", \n  onSearch,\n  className = \"\"\n}: SearchAutocompleteProps) {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [locationQuery, setLocationQuery] = useState(\"Bangalore\");\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [suggestions, setSuggestions] = useState<any[]>([]);\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const searchRef = useRef<HTMLDivElement>(null);\n  \n  const serviceCategories = [\n    \"Home Cleaning\",\n    \"Plumbing\", \n    \"Electrical Work\",\n    \"Carpentry\",\n    \"Painting\",\n    \"HVAC\",\n    \"Appliance Repair\",\n    \"Gardening\",\n    \"Beauty & Spa\",\n    \"Auto Services\",\n    \"Tech Support\",\n    \"Tutoring\",\n    \"Pet Care\",\n    \"Moving Services\",\n    \"Photography\",\n    \"Catering\"\n  ];\n\n  const trendingSearches = [\n    \"Home Cleaning Service\",\n    \"AC Repair\",\n    \"Plumber Near Me\",\n    \"House Painting\",\n    \"Laptop Repair\",\n    \"Pet Grooming\",\n  ];\n\n  const locations = [\n    \"Bangalore\", \"Mumbai\", \"Delhi\", \"Chennai\", \"Hyderabad\", \"Pune\", \n    \"Kolkata\", \"Jaipur\", \"Ahmedabad\", \"Surat\"\n  ];\n\n  // Load recent searches from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('recentSearches');\n    if (saved) {\n      setRecentSearches(JSON.parse(saved));\n    }\n  }, []);\n\n  // Generate suggestions based on search query\n  useEffect(() => {\n    if (searchQuery.trim().length === 0) {\n      setSuggestions([]);\n      return;\n    }\n\n    setIsLoading(true);\n    \n    // Simulate API delay\n    const timer = setTimeout(() => {\n      const query = searchQuery.toLowerCase();\n      const matchedServices = serviceCategories\n        .filter(service => service.toLowerCase().includes(query))\n        .slice(0, 5);\n      \n      const matchedRecent = recentSearches\n        .filter(search => search.toLowerCase().includes(query))\n        .slice(0, 3);\n\n      const combined = [\n        ...matchedRecent.map(search => ({ text: search, type: 'recent' })),\n        ...matchedServices.map(service => ({ text: service, type: 'service' })),\n      ].slice(0, 8);\n\n      setSuggestions(combined);\n      setIsLoading(false);\n    }, 200);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery, recentSearches]);\n\n  // Close suggestions when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setIsSearchOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const handleSearch = (query?: string) => {\n    const searchTerm = query || searchQuery;\n    \n    if (searchTerm.trim()) {\n      // Add to recent searches\n      const updatedRecent = [searchTerm, ...recentSearches.filter(s => s !== searchTerm)].slice(0, 5);\n      setRecentSearches(updatedRecent);\n      localStorage.setItem('recentSearches', JSON.stringify(updatedRecent));\n      \n      // Perform search\n      if (onSearch) {\n        onSearch(searchTerm, locationQuery);\n      } else {\n        // Default navigation to browse jobs with search\n        setLocation(`/jobs/list?search=${encodeURIComponent(searchTerm)}&location=${encodeURIComponent(locationQuery)}`);\n      }\n      \n      setIsSearchOpen(false);\n      setSearchQuery(\"\");\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setSearchQuery(suggestion);\n    handleSearch(suggestion);\n  };\n\n  const clearRecentSearches = () => {\n    setRecentSearches([]);\n    localStorage.removeItem('recentSearches');\n  };\n\n  return (\n    <div ref={searchRef} className={`relative ${className}`}>\n      {/* Search Input */}\n      <div className=\"flex gap-2\">\n        <div className=\"flex-1 relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n          <Input \n            type=\"text\"\n            placeholder={placeholder}\n            value={searchQuery}\n            onChange={(e) => {\n              setSearchQuery(e.target.value);\n              setIsSearchOpen(true);\n            }}\n            onFocus={() => setIsSearchOpen(true)}\n            className=\"pl-10 py-3 rounded-lg border-2 border-gray-200 focus:border-primary\"\n            data-testid=\"search-input\"\n          />\n        </div>\n        \n        <div className=\"hidden sm:block relative\">\n          <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n          <Input \n            type=\"text\"\n            value={locationQuery}\n            onChange={(e) => setLocationQuery(e.target.value)}\n            className=\"pl-10 py-3 w-36 rounded-lg border-2 border-gray-200 focus:border-primary\"\n            data-testid=\"location-input\"\n          />\n        </div>\n        \n        <Button \n          onClick={() => handleSearch()}\n          className=\"px-6 py-3 bg-primary hover:bg-primary/90 rounded-lg\"\n          data-testid=\"search-button\"\n        >\n          <Search size={16} className=\"sm:mr-2\" />\n          <span className=\"hidden sm:inline\">Search</span>\n        </Button>\n      </div>\n\n      {/* Suggestions Dropdown */}\n      {isSearchOpen && (\n        <Card className=\"absolute top-full left-0 right-0 mt-2 z-50 max-h-96 overflow-y-auto shadow-lg\">\n          <CardContent className=\"p-0\">\n            {isLoading ? (\n              <div className=\"p-4 text-center text-sm text-gray-500\">\n                Searching...\n              </div>\n            ) : (\n              <>\n                {/* Current Search Results */}\n                {suggestions.length > 0 && (\n                  <div className=\"border-b\">\n                    <div className=\"px-4 py-2 text-xs font-semibold text-gray-500 uppercase\">\n                      Suggestions\n                    </div>\n                    {suggestions.map((suggestion, index) => (\n                      <button\n                        key={index}\n                        onClick={() => handleSuggestionClick(suggestion.text)}\n                        className=\"w-full flex items-center gap-3 px-4 py-2 hover:bg-gray-50 text-left\"\n                        data-testid={`suggestion-${index}`}\n                      >\n                        {suggestion.type === 'recent' ? (\n                          <Clock size={16} className=\"text-gray-400\" />\n                        ) : (\n                          <Search size={16} className=\"text-gray-400\" />\n                        )}\n                        <span className=\"flex-1\">{suggestion.text}</span>\n                        {suggestion.type === 'recent' && (\n                          <Badge variant=\"outline\" className=\"text-xs\">Recent</Badge>\n                        )}\n                      </button>\n                    ))}\n                  </div>\n                )}\n\n                {/* Recent Searches */}\n                {recentSearches.length > 0 && searchQuery.length === 0 && (\n                  <div className=\"border-b\">\n                    <div className=\"flex items-center justify-between px-4 py-2\">\n                      <div className=\"text-xs font-semibold text-gray-500 uppercase\">\n                        Recent Searches\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={clearRecentSearches}\n                        className=\"text-xs h-auto p-1\"\n                      >\n                        Clear\n                      </Button>\n                    </div>\n                    {recentSearches.slice(0, 3).map((search, index) => (\n                      <button\n                        key={index}\n                        onClick={() => handleSuggestionClick(search)}\n                        className=\"w-full flex items-center gap-3 px-4 py-2 hover:bg-gray-50 text-left\"\n                      >\n                        <Clock size={16} className=\"text-gray-400\" />\n                        <span>{search}</span>\n                      </button>\n                    ))}\n                  </div>\n                )}\n\n                {/* Trending Searches */}\n                {searchQuery.length === 0 && (\n                  <div>\n                    <div className=\"px-4 py-2 text-xs font-semibold text-gray-500 uppercase flex items-center gap-2\">\n                      <TrendingUp size={12} />\n                      Trending\n                    </div>\n                    {trendingSearches.map((search, index) => (\n                      <button\n                        key={index}\n                        onClick={() => handleSuggestionClick(search)}\n                        className=\"w-full flex items-center gap-3 px-4 py-2 hover:bg-gray-50 text-left\"\n                      >\n                        <TrendingUp size={16} className=\"text-orange-400\" />\n                        <span>{search}</span>\n                      </button>\n                    ))}\n                  </div>\n                )}\n\n                {/* No Results */}\n                {suggestions.length === 0 && searchQuery.length > 0 && !isLoading && (\n                  <div className=\"p-4 text-center text-sm text-gray-500\">\n                    No suggestions found for \"{searchQuery}\"\n                  </div>\n                )}\n              </>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":10049},"client/src/pages/jobs/list.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MapPin, Clock, DollarSign, X, Search, SlidersHorizontal, Calendar, User } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MobileAppLayout } from \"@/components/layout/mobile-app-layout\";\nimport { Navbar } from \"@/components/navbar\";\n\ninterface FilterState {\n  search: string;\n  location: string;\n  categories: string[];\n  budgetRange: number[];\n  urgency: string;\n  sortBy: string;\n  page: number;\n}\n\nexport default function JobsList() {\n  const [, setLocation] = useLocation();\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [user, setUser] = useState<any>(null);\n  const [showAuthModal, setShowAuthModal] = useState(false);\n\n  // Get URL parameters for SEO-friendly filtering\n  const urlParams = new URLSearchParams(window.location.search);\n  \n  const [filters, setFilters] = useState<FilterState>({\n    search: urlParams.get('search') || '',\n    location: urlParams.get('location') || 'all',\n    categories: urlParams.getAll('category'),\n    budgetRange: urlParams.get('minBudget') && urlParams.get('maxBudget') \n      ? [parseInt(urlParams.get('minBudget')!), parseInt(urlParams.get('maxBudget')!)]\n      : [0, 50000],\n    urgency: urlParams.get('urgency') || 'all',\n    sortBy: urlParams.get('sort') || 'newest',\n    page: parseInt(urlParams.get('page') || '1'),\n  });\n\n  const serviceCategories = [\n    \"Home Cleaning\", \"Plumbing\", \"Electrical Work\", \"Carpentry\", \"Painting\", \n    \"HVAC\", \"Appliance Repair\", \"Gardening\", \"Beauty & Spa\", \"Auto Services\",\n    \"Tech Support\", \"Tutoring\", \"Pet Care\", \"Moving Services\", \"Photography\", \"Catering\"\n  ];\n\n  const locations = [\n    \"Bangalore\", \"Mumbai\", \"Delhi\", \"Chennai\", \"Hyderabad\", \"Pune\", \n    \"Kolkata\", \"Jaipur\", \"Ahmedabad\", \"Surat\"\n  ];\n\n  // Update URL when filters change (SEO-friendly)\n  const updateURL = (newFilters: FilterState) => {\n    const params = new URLSearchParams();\n    \n    if (newFilters.search) params.set('search', newFilters.search);\n    if (newFilters.location) params.set('location', newFilters.location);\n    newFilters.categories.forEach(cat => params.append('category', cat));\n    if (newFilters.budgetRange[0] > 0) params.set('minBudget', newFilters.budgetRange[0].toString());\n    if (newFilters.budgetRange[1] < 50000) params.set('maxBudget', newFilters.budgetRange[1].toString());\n    if (newFilters.urgency !== 'all') params.set('urgency', newFilters.urgency);\n    if (newFilters.sortBy !== 'newest') params.set('sort', newFilters.sortBy);\n    if (newFilters.page > 1) params.set('page', newFilters.page.toString());\n\n    const newURL = `/jobs/list${params.toString() ? '?' + params.toString() : ''}`;\n    window.history.pushState({}, '', newURL);\n  };\n\n  // Fetch jobs with filters\n  const { data: jobsData, isLoading } = useQuery({\n    queryKey: ['/api/jobs/list', filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.search) params.set('search', filters.search);\n      if (filters.location) params.set('location', filters.location);\n      filters.categories.forEach(cat => params.append('category', cat));\n      if (filters.budgetRange[0] > 0) params.set('minBudget', filters.budgetRange[0].toString());\n      if (filters.budgetRange[1] < 50000) params.set('maxBudget', filters.budgetRange[1].toString());\n      if (filters.urgency !== 'all') params.set('urgency', filters.urgency);\n      params.set('sort', filters.sortBy);\n      params.set('page', filters.page.toString());\n      params.set('limit', '12');\n\n      const response = await apiRequest(\"GET\", `/api/jobs/list?${params}`);\n      return response.json();\n    },\n  });\n\n  // Update filters and URL\n  const updateFilters = (newFilters: Partial<FilterState>) => {\n    const updated = { ...filters, ...newFilters, page: 1 }; // Reset to page 1 when filters change\n    setFilters(updated);\n    updateURL(updated);\n  };\n\n  const clearFilters = () => {\n    const cleared = {\n      search: '',\n      location: 'all',\n      categories: [],\n      budgetRange: [0, 50000],\n      urgency: 'all',\n      sortBy: 'newest',\n      page: 1,\n    };\n    setFilters(cleared);\n    updateURL(cleared);\n  };\n\n  const toggleCategory = (category: string) => {\n    const newCategories = filters.categories.includes(category)\n      ? filters.categories.filter(c => c !== category)\n      : [...filters.categories, category];\n    updateFilters({ categories: newCategories });\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'urgent': return 'bg-red-100 text-red-800';\n      case 'asap': return 'bg-orange-100 text-orange-800';\n      case 'flexible': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-IN', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    });\n  };\n\n  const renderFilters = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-lg font-semibold\">Filters</h2>\n        <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters}>\n          Clear All\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">Search Jobs</label>\n        <div className=\"relative\">\n          <Search size={16} className=\"absolute left-3 top-3 text-gray-400\" />\n          <Input\n            placeholder=\"Search by title or description...\"\n            value={filters.search}\n            onChange={(e) => updateFilters({ search: e.target.value })}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Location */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">Location</label>\n        <Select value={filters.location} onValueChange={(value) => updateFilters({ location: value })}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select location\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Locations</SelectItem>\n            {locations.map((loc) => (\n              <SelectItem key={loc} value={loc}>{loc}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Categories */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">Service Categories</label>\n        <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n          {serviceCategories.map((category) => (\n            <div key={category} className=\"flex items-center space-x-2\">\n              <Checkbox\n                checked={filters.categories.includes(category)}\n                onCheckedChange={() => toggleCategory(category)}\n              />\n              <label className=\"text-sm cursor-pointer\" onClick={() => toggleCategory(category)}>\n                {category}\n              </label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Budget Range */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">\n          Budget Range: ₹{filters.budgetRange[0]} - ₹{filters.budgetRange[1]}\n        </label>\n        <Slider\n          value={filters.budgetRange}\n          onValueChange={(value) => updateFilters({ budgetRange: value })}\n          max={50000}\n          min={0}\n          step={1000}\n          className=\"w-full\"\n        />\n      </div>\n\n      {/* Urgency */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">Urgency</label>\n        <Select value={filters.urgency} onValueChange={(value) => updateFilters({ urgency: value })}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Jobs</SelectItem>\n            <SelectItem value=\"urgent\">Urgent (Within 24 hours)</SelectItem>\n            <SelectItem value=\"asap\">ASAP (Within 3 days)</SelectItem>\n            <SelectItem value=\"flexible\">Flexible Timing</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n\n  const renderJobCard = (job: any) => (\n    <Card key={job.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h3 className=\"font-semibold text-lg mb-1\">{job.title}</h3>\n            <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n              <div className=\"flex items-center gap-1\">\n                <MapPin size={14} />\n                <span>{job.location}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Calendar size={14} />\n                <span>Posted {formatDate(job.createdAt)}</span>\n              </div>\n            </div>\n          </div>\n          <Badge className={getUrgencyColor(job.urgency || 'flexible')}>\n            {job.urgency || 'Flexible'}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-gray-600 mb-3 line-clamp-3\">\n          {job.description}\n        </p>\n        \n        <div className=\"flex items-center justify-between mb-3\">\n          <Badge variant=\"outline\">{job.category}</Badge>\n          <div className=\"flex items-center gap-1 text-sm font-semibold text-green-600\">\n            <DollarSign size={14} />\n            <span>₹{job.budget || 'Negotiable'}</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n            <User size={14} />\n            <span>By {job.customerName || 'Anonymous'}</span>\n          </div>\n          <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n            <Clock size={14} />\n            <span>{job.proposals || 0} proposals</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderContent = () => (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"flex flex-col lg:flex-row gap-6\">\n        {/* Sidebar - Desktop */}\n        <div className={`lg:w-80 ${isSidebarOpen ? 'block' : 'hidden'} lg:block`}>\n          <Card className=\"sticky top-6\">\n            <CardContent className=\"p-6\">\n              {renderFilters()}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-bold\">Available Jobs</h1>\n              <p className=\"text-gray-600\">\n                {jobsData?.total || 0} jobs found\n                {filters.location && ` in ${filters.location}`}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              {/* Mobile Filter Toggle */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"lg:hidden\"\n                onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n              >\n                <SlidersHorizontal size={16} className=\"mr-1\" />\n                Filters\n              </Button>\n              \n              {/* Sort */}\n              <Select value={filters.sortBy} onValueChange={(value) => updateFilters({ sortBy: value })}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                  <SelectItem value=\"budget_high\">Highest Budget</SelectItem>\n                  <SelectItem value=\"budget_low\">Lowest Budget</SelectItem>\n                  <SelectItem value=\"urgent\">Most Urgent</SelectItem>\n                  <SelectItem value=\"proposals\">Most Proposals</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Active Filters */}\n          {(filters.categories.length > 0 || filters.search || filters.location || filters.budgetRange[0] > 0) && (\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              {filters.search && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  Search: {filters.search}\n                  <X size={14} className=\"cursor-pointer\" onClick={() => updateFilters({ search: '' })} />\n                </Badge>\n              )}\n              {filters.location && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  {filters.location}\n                  <X size={14} className=\"cursor-pointer\" onClick={() => updateFilters({ location: '' })} />\n                </Badge>\n              )}\n              {filters.categories.map(cat => (\n                <Badge key={cat} variant=\"secondary\" className=\"flex items-center gap-1\">\n                  {cat}\n                  <X size={14} className=\"cursor-pointer\" onClick={() => toggleCategory(cat)} />\n                </Badge>\n              ))}\n              {filters.budgetRange[0] > 0 && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  ₹{filters.budgetRange[0]}+ budget\n                  <X size={14} className=\"cursor-pointer\" onClick={() => updateFilters({ budgetRange: [0, 50000] })} />\n                </Badge>\n              )}\n            </div>\n          )}\n\n          {/* Loading */}\n          {isLoading && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {/* Jobs Grid */}\n          {!isLoading && jobsData?.jobs && (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                {jobsData.jobs.map(renderJobCard)}\n              </div>\n\n              {/* Pagination */}\n              {jobsData.totalPages > 1 && (\n                <div className=\"flex justify-center gap-2\">\n                  {Array.from({ length: jobsData.totalPages }, (_, i) => i + 1).map(page => (\n                    <Button\n                      key={page}\n                      variant={filters.page === page ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => updateFilters({ page })}\n                    >\n                      {page}\n                    </Button>\n                  ))}\n                </div>\n              )}\n            </>\n          )}\n\n          {/* No Results */}\n          {!isLoading && (!jobsData?.jobs || jobsData.jobs.length === 0) && (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <h3 className=\"text-lg font-semibold mb-2\">No jobs found</h3>\n                <p className=\"text-gray-600 mb-4\">Try adjusting your filters or search terms</p>\n                <Button onClick={clearFilters}>Clear Filters</Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      {/* Desktop Layout */}\n      <div className=\"hidden lg:block\">\n        <Navbar \n          user={user}\n          onSignIn={() => setShowAuthModal(true)}\n          onGetStarted={() => setShowAuthModal(true)}\n          onSignOut={() => setUser(null)}\n        />\n        {renderContent()}\n      </div>\n\n      {/* Mobile Layout */}\n      <div className=\"lg:hidden\">\n        <MobileAppLayout user={user} onAuthRequired={() => setShowAuthModal(true)}>\n          {renderContent()}\n        </MobileAppLayout>\n      </div>\n    </div>\n  );\n}","size_bytes":16664},"client/src/pages/providers/list.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Star, MapPin, Clock, Filter, X, Search, SlidersHorizontal } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MobileAppLayout } from \"@/components/layout/mobile-app-layout\";\nimport { Navbar } from \"@/components/navbar\";\n\ninterface FilterState {\n  search: string;\n  location: string;\n  categories: string[];\n  rating: number[];\n  priceRange: number[];\n  availability: string;\n  sortBy: string;\n  page: number;\n}\n\nexport default function ProvidersList() {\n  const [, setLocation] = useLocation();\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [user, setUser] = useState<any>(null);\n  const [showAuthModal, setShowAuthModal] = useState(false);\n\n  // Get URL parameters for SEO-friendly filtering\n  const urlParams = new URLSearchParams(window.location.search);\n  \n  const [filters, setFilters] = useState<FilterState>({\n    search: urlParams.get('search') || '',\n    location: urlParams.get('location') || 'all',\n    categories: urlParams.getAll('category'),\n    rating: urlParams.get('rating') ? [parseInt(urlParams.get('rating')!)] : [0],\n    priceRange: urlParams.get('minPrice') && urlParams.get('maxPrice') \n      ? [parseInt(urlParams.get('minPrice')!), parseInt(urlParams.get('maxPrice')!)]\n      : [0, 5000],\n    availability: urlParams.get('availability') || 'all',\n    sortBy: urlParams.get('sort') || 'rating',\n    page: parseInt(urlParams.get('page') || '1'),\n  });\n\n  const serviceCategories = [\n    \"Home Cleaning\", \"Plumbing\", \"Electrical Work\", \"Carpentry\", \"Painting\", \n    \"HVAC\", \"Appliance Repair\", \"Gardening\", \"Beauty & Spa\", \"Auto Services\",\n    \"Tech Support\", \"Tutoring\", \"Pet Care\", \"Moving Services\", \"Photography\", \"Catering\"\n  ];\n\n  const locations = [\n    \"Bangalore\", \"Mumbai\", \"Delhi\", \"Chennai\", \"Hyderabad\", \"Pune\", \n    \"Kolkata\", \"Jaipur\", \"Ahmedabad\", \"Surat\"\n  ];\n\n  // Update URL when filters change (SEO-friendly)\n  const updateURL = (newFilters: FilterState) => {\n    const params = new URLSearchParams();\n    \n    if (newFilters.search) params.set('search', newFilters.search);\n    if (newFilters.location) params.set('location', newFilters.location);\n    newFilters.categories.forEach(cat => params.append('category', cat));\n    if (newFilters.rating[0] > 0) params.set('rating', newFilters.rating[0].toString());\n    if (newFilters.priceRange[0] > 0) params.set('minPrice', newFilters.priceRange[0].toString());\n    if (newFilters.priceRange[1] < 5000) params.set('maxPrice', newFilters.priceRange[1].toString());\n    if (newFilters.availability !== 'all') params.set('availability', newFilters.availability);\n    if (newFilters.sortBy !== 'rating') params.set('sort', newFilters.sortBy);\n    if (newFilters.page > 1) params.set('page', newFilters.page.toString());\n\n    const newURL = `/providers/list${params.toString() ? '?' + params.toString() : ''}`;\n    window.history.pushState({}, '', newURL);\n  };\n\n  // Fetch providers with filters\n  const { data: providersData, isLoading } = useQuery({\n    queryKey: ['/api/providers/list', filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.search) params.set('search', filters.search);\n      if (filters.location) params.set('location', filters.location);\n      filters.categories.forEach(cat => params.append('category', cat));\n      if (filters.rating[0] > 0) params.set('minRating', filters.rating[0].toString());\n      if (filters.priceRange[0] > 0) params.set('minPrice', filters.priceRange[0].toString());\n      if (filters.priceRange[1] < 5000) params.set('maxPrice', filters.priceRange[1].toString());\n      if (filters.availability !== 'all') params.set('availability', filters.availability);\n      params.set('sort', filters.sortBy);\n      params.set('page', filters.page.toString());\n      params.set('limit', '12');\n\n      const response = await apiRequest(\"GET\", `/api/providers/list?${params}`);\n      return response.json();\n    },\n  });\n\n  // Update filters and URL\n  const updateFilters = (newFilters: Partial<FilterState>) => {\n    const updated = { ...filters, ...newFilters, page: 1 }; // Reset to page 1 when filters change\n    setFilters(updated);\n    updateURL(updated);\n  };\n\n  const clearFilters = () => {\n    const cleared = {\n      search: '',\n      location: 'all',\n      categories: [],\n      rating: [0],\n      priceRange: [0, 5000],\n      availability: 'all',\n      sortBy: 'rating',\n      page: 1,\n    };\n    setFilters(cleared);\n    updateURL(cleared);\n  };\n\n  const toggleCategory = (category: string) => {\n    const newCategories = filters.categories.includes(category)\n      ? filters.categories.filter(c => c !== category)\n      : [...filters.categories, category];\n    updateFilters({ categories: newCategories });\n  };\n\n  const renderFilters = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-lg font-semibold\">Filters</h2>\n        <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters}>\n          Clear All\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">Search Providers</label>\n        <div className=\"relative\">\n          <Search size={16} className=\"absolute left-3 top-3 text-gray-400\" />\n          <Input\n            placeholder=\"Search by name or service...\"\n            value={filters.search}\n            onChange={(e) => updateFilters({ search: e.target.value })}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Location */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">Location</label>\n        <Select value={filters.location} onValueChange={(value) => updateFilters({ location: value })}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select location\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Locations</SelectItem>\n            {locations.map((loc) => (\n              <SelectItem key={loc} value={loc}>{loc}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Categories */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">Service Categories</label>\n        <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n          {serviceCategories.map((category) => (\n            <div key={category} className=\"flex items-center space-x-2\">\n              <Checkbox\n                checked={filters.categories.includes(category)}\n                onCheckedChange={() => toggleCategory(category)}\n              />\n              <label className=\"text-sm cursor-pointer\" onClick={() => toggleCategory(category)}>\n                {category}\n              </label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Rating */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">\n          Minimum Rating: {filters.rating[0]} stars\n        </label>\n        <Slider\n          value={filters.rating}\n          onValueChange={(value) => updateFilters({ rating: value })}\n          max={5}\n          min={0}\n          step={0.5}\n          className=\"w-full\"\n        />\n      </div>\n\n      {/* Price Range */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">\n          Price Range: ₹{filters.priceRange[0]} - ₹{filters.priceRange[1]}\n        </label>\n        <Slider\n          value={filters.priceRange}\n          onValueChange={(value) => updateFilters({ priceRange: value })}\n          max={5000}\n          min={0}\n          step={100}\n          className=\"w-full\"\n        />\n      </div>\n\n      {/* Availability */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">Availability</label>\n        <Select value={filters.availability} onValueChange={(value) => updateFilters({ availability: value })}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Providers</SelectItem>\n            <SelectItem value=\"available\">Available Now</SelectItem>\n            <SelectItem value=\"today\">Available Today</SelectItem>\n            <SelectItem value=\"week\">Available This Week</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n\n  const renderProviderCard = (provider: any) => (\n    <Card key={provider.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center\">\n              <span className=\"font-semibold text-gray-600\">\n                {provider.businessName?.[0] || provider.name?.[0] || 'P'}\n              </span>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-lg\">{provider.businessName || provider.name}</h3>\n              <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n                <MapPin size={14} />\n                <span>{provider.location || 'Bangalore'}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Star size={16} className=\"text-yellow-500 fill-current\" />\n            <span className=\"font-medium\">{provider.rating || '4.5'}</span>\n            <span className=\"text-sm text-gray-500\">({provider.reviewCount || '12'})</span>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n          {provider.businessDetails || 'Professional service provider with years of experience.'}\n        </p>\n        \n        <div className=\"flex flex-wrap gap-1 mb-3\">\n          {(provider.serviceCategories || ['Home Cleaning']).slice(0, 3).map((cat: string, idx: number) => (\n            <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n              {cat}\n            </Badge>\n          ))}\n          {(provider.serviceCategories?.length || 0) > 3 && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              +{(provider.serviceCategories?.length || 0) - 3} more\n            </Badge>\n          )}\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n            <Clock size={14} />\n            <span>Available {provider.availability || 'Today'}</span>\n          </div>\n          <div className=\"text-sm font-semibold\">\n            From ₹{provider.startingPrice || '500'}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderContent = () => (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"flex flex-col lg:flex-row gap-6\">\n        {/* Sidebar - Desktop */}\n        <div className={`lg:w-80 ${isSidebarOpen ? 'block' : 'hidden'} lg:block`}>\n          <Card className=\"sticky top-6\">\n            <CardContent className=\"p-6\">\n              {renderFilters()}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-bold\">Service Providers</h1>\n              <p className=\"text-gray-600\">\n                {providersData?.total || 0} providers found\n                {filters.location && ` in ${filters.location}`}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              {/* Mobile Filter Toggle */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"lg:hidden\"\n                onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n              >\n                <SlidersHorizontal size={16} className=\"mr-1\" />\n                Filters\n              </Button>\n              \n              {/* Sort */}\n              <Select value={filters.sortBy} onValueChange={(value) => updateFilters({ sortBy: value })}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"rating\">Top Rated</SelectItem>\n                  <SelectItem value=\"price_low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price_high\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                  <SelectItem value=\"experience\">Most Experienced</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Active Filters */}\n          {(filters.categories.length > 0 || filters.search || filters.location || filters.rating[0] > 0) && (\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              {filters.search && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  Search: {filters.search}\n                  <X size={14} className=\"cursor-pointer\" onClick={() => updateFilters({ search: '' })} />\n                </Badge>\n              )}\n              {filters.location && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  {filters.location}\n                  <X size={14} className=\"cursor-pointer\" onClick={() => updateFilters({ location: '' })} />\n                </Badge>\n              )}\n              {filters.categories.map(cat => (\n                <Badge key={cat} variant=\"secondary\" className=\"flex items-center gap-1\">\n                  {cat}\n                  <X size={14} className=\"cursor-pointer\" onClick={() => toggleCategory(cat)} />\n                </Badge>\n              ))}\n              {filters.rating[0] > 0 && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  {filters.rating[0]}+ stars\n                  <X size={14} className=\"cursor-pointer\" onClick={() => updateFilters({ rating: [0] })} />\n                </Badge>\n              )}\n            </div>\n          )}\n\n          {/* Loading */}\n          {isLoading && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {/* Providers Grid */}\n          {!isLoading && providersData?.providers && (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-6\">\n                {providersData.providers.map(renderProviderCard)}\n              </div>\n\n              {/* Pagination */}\n              {providersData.totalPages > 1 && (\n                <div className=\"flex justify-center gap-2\">\n                  {Array.from({ length: providersData.totalPages }, (_, i) => i + 1).map(page => (\n                    <Button\n                      key={page}\n                      variant={filters.page === page ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => updateFilters({ page })}\n                    >\n                      {page}\n                    </Button>\n                  ))}\n                </div>\n              )}\n            </>\n          )}\n\n          {/* No Results */}\n          {!isLoading && (!providersData?.providers || providersData.providers.length === 0) && (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <h3 className=\"text-lg font-semibold mb-2\">No providers found</h3>\n                <p className=\"text-gray-600 mb-4\">Try adjusting your filters or search terms</p>\n                <Button onClick={clearFilters}>Clear Filters</Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      {/* Desktop Layout */}\n      <div className=\"hidden lg:block\">\n        <Navbar \n          user={user}\n          onSignIn={() => setShowAuthModal(true)}\n          onGetStarted={() => setShowAuthModal(true)}\n          onSignOut={() => setUser(null)}\n        />\n        {renderContent()}\n      </div>\n\n      {/* Mobile Layout */}\n      <div className=\"lg:hidden\">\n        <MobileAppLayout user={user} onAuthRequired={() => setShowAuthModal(true)}>\n          {renderContent()}\n        </MobileAppLayout>\n      </div>\n    </div>\n  );\n}","size_bytes":17557},"client/src/components/wallet/add-balance-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { QrCode, CreditCard, Wallet, IndianRupee, CheckCircle } from \"lucide-react\";\n\ninterface AddBalanceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  providerId: string;\n  currentBalance: number;\n}\n\nconst QUICK_AMOUNTS = [500, 1000, 2000, 5000];\n\nexport function AddBalanceModal({ isOpen, onClose, providerId, currentBalance }: AddBalanceModalProps) {\n  const [amount, setAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState<\"qr\" | \"razorpay\">(\"qr\");\n  const [showPayment, setShowPayment] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const rechargeWalletMutation = useMutation({\n    mutationFn: async (rechargeAmount: number) => {\n      const response = await apiRequest(\"POST\", `/api/wallet/${providerId}/recharge`, {\n        amount: rechargeAmount\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Balance Added Successfully!\",\n        description: `₹${amount} has been added to your wallet. New balance: ₹${data.newBalance}`,\n      });\n      \n      // Refresh wallet data\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet\", providerId] });\n      \n      // Close modal and reset state\n      handleClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message || \"Failed to add balance. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    setAmount(\"\");\n    setShowPayment(false);\n    setPaymentMethod(\"qr\");\n    onClose();\n  };\n\n  const handleAmountSubmit = () => {\n    const rechargeAmount = parseFloat(amount);\n    if (!rechargeAmount || rechargeAmount < 100) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Minimum recharge amount is ₹100\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (rechargeAmount > 50000) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Maximum recharge amount is ₹50,000\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setShowPayment(true);\n  };\n\n  const handlePayment = () => {\n    const rechargeAmount = parseFloat(amount);\n    \n    if (paymentMethod === \"qr\") {\n      // Simulate QR code payment completion\n      setTimeout(() => {\n        rechargeWalletMutation.mutate(rechargeAmount);\n      }, 2000);\n    } else {\n      // For Razorpay, we would integrate with their SDK\n      // For now, simulate payment success\n      setTimeout(() => {\n        rechargeWalletMutation.mutate(rechargeAmount);\n      }, 1500);\n    }\n  };\n\n  const setQuickAmount = (quickAmount: number) => {\n    setAmount(quickAmount.toString());\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"add-balance-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Wallet size={20} />\n            Add Balance to Wallet\n          </DialogTitle>\n        </DialogHeader>\n\n        {!showPayment ? (\n          // Amount Selection\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-2\">Current Balance</p>\n              <div className=\"flex items-center justify-center gap-1 text-2xl font-bold text-green-600\">\n                <IndianRupee size={20} />\n                <span>{currentBalance.toFixed(2)}</span>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"amount\">Enter Amount</Label>\n              <div className=\"relative mt-1\">\n                <IndianRupee size={16} className=\"absolute left-3 top-3 text-gray-400\" />\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  placeholder=\"Enter amount\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                  className=\"pl-10\"\n                  min=\"100\"\n                  max=\"50000\"\n                  data-testid=\"amount-input\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Minimum: ₹100 | Maximum: ₹50,000\n              </p>\n            </div>\n\n            {/* Quick Amount Buttons */}\n            <div>\n              <Label className=\"text-sm\">Quick Select</Label>\n              <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                {QUICK_AMOUNTS.map((quickAmount) => (\n                  <Button\n                    key={quickAmount}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setQuickAmount(quickAmount)}\n                    className=\"h-10\"\n                    data-testid={`quick-amount-${quickAmount}`}\n                  >\n                    ₹{quickAmount}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <Button\n              onClick={handleAmountSubmit}\n              className=\"w-full\"\n              disabled={!amount || parseFloat(amount) < 100}\n              data-testid=\"proceed-payment\"\n            >\n              Proceed to Payment\n            </Button>\n          </div>\n        ) : (\n          // Payment Method Selection\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">Amount to Add</p>\n              <div className=\"flex items-center justify-center gap-1 text-xl font-bold\">\n                <IndianRupee size={18} />\n                <span>₹{amount}</span>\n              </div>\n            </div>\n\n            <Tabs value={paymentMethod} onValueChange={(value) => setPaymentMethod(value as \"qr\" | \"razorpay\")}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"qr\" className=\"flex items-center gap-2\">\n                  <QrCode size={16} />\n                  QR Code\n                </TabsTrigger>\n                <TabsTrigger value=\"razorpay\" className=\"flex items-center gap-2\">\n                  <CreditCard size={16} />\n                  Razorpay\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"qr\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader className=\"text-center pb-3\">\n                    <CardTitle className=\"text-lg\">Scan QR Code to Pay</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"text-center\">\n                    <div className=\"w-48 h-48 mx-auto bg-gray-100 rounded-lg flex items-center justify-center mb-4\">\n                      <div className=\"text-center\">\n                        <QrCode size={64} className=\"mx-auto mb-2 text-gray-400\" />\n                        <p className=\"text-sm text-gray-500\">QR Code will appear here</p>\n                      </div>\n                    </div>\n                    <Badge variant=\"outline\" className=\"mb-4\">\n                      UPI • Google Pay • PhonePe • Paytm\n                    </Badge>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Scan with any UPI app to complete payment\n                    </p>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"razorpay\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader className=\"text-center pb-3\">\n                    <CardTitle className=\"text-lg\">Razorpay Payment</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"text-center\">\n                    <div className=\"w-48 h-32 mx-auto bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg flex items-center justify-center mb-4\">\n                      <div className=\"text-center\">\n                        <CreditCard size={48} className=\"mx-auto mb-2 text-blue-600\" />\n                        <p className=\"text-sm font-medium\">Secure Payment</p>\n                      </div>\n                    </div>\n                    <Badge variant=\"outline\" className=\"mb-4\">\n                      Cards • UPI • Netbanking • Wallets\n                    </Badge>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Powered by Razorpay secure payment gateway\n                    </p>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowPayment(false)}\n                className=\"flex-1\"\n                data-testid=\"back-to-amount\"\n              >\n                Back\n              </Button>\n              <Button\n                onClick={handlePayment}\n                disabled={rechargeWalletMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"pay-now\"\n              >\n                {rechargeWalletMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                    Processing...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle size={16} />\n                    Pay Now\n                  </div>\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10272},"client/src/lib/auth.ts":{"content":"interface User {\n  id: string;\n  phoneNumber: string;\n  name?: string;\n  email?: string;\n  userType: \"customer\" | \"provider\" | \"admin\";\n  isVerified: boolean;\n  isApproved: boolean;\n}\n\nexport const AUTH_STORAGE_KEY = 'serviceconnect_user';\n\nexport const authUtils = {\n  // Save user to localStorage\n  saveUser: (user: User): void => {\n    try {\n      localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(user));\n    } catch (error) {\n      console.error('Failed to save user to localStorage:', error);\n    }\n  },\n\n  // Get user from localStorage\n  getUser: (): User | null => {\n    try {\n      const userJson = localStorage.getItem(AUTH_STORAGE_KEY);\n      return userJson ? JSON.parse(userJson) : null;\n    } catch (error) {\n      console.error('Failed to get user from localStorage:', error);\n      return null;\n    }\n  },\n\n  // Remove user from localStorage\n  removeUser: (): void => {\n    try {\n      localStorage.removeItem(AUTH_STORAGE_KEY);\n    } catch (error) {\n      console.error('Failed to remove user from localStorage:', error);\n    }\n  },\n\n  // Check if user is logged in\n  isLoggedIn: (): boolean => {\n    return authUtils.getUser() !== null;\n  },\n\n  // Get dashboard URL based on user type\n  getDashboardUrl: (userType: string): string => {\n    switch (userType) {\n      case \"customer\":\n        return \"/customer/dashboard\";\n      case \"provider\":\n        return \"/provider/dashboard\";\n      case \"admin\":\n        return \"/admin/dashboard\";\n      default:\n        return \"/\";\n    }\n  }\n};\n\nexport type { User };","size_bytes":1529}},"version":1}